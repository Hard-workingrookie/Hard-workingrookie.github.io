<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王美的个人博客</title>
  
  
  <link href="https://hard-workingrookie.github.io/atom.xml" rel="self"/>
  
  <link href="https://hard-workingrookie.github.io/"/>
  <updated>2021-06-12T16:36:50.528Z</updated>
  <id>https://hard-workingrookie.github.io/</id>
  
  <author>
    <name>王美</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>页面横向滚动</title>
    <link href="https://hard-workingrookie.github.io/2021/06/13/%E9%A1%B5%E9%9D%A2%E6%A8%AA%E5%90%91%E6%BB%9A%E5%8A%A8/"/>
    <id>https://hard-workingrookie.github.io/2021/06/13/%E9%A1%B5%E9%9D%A2%E6%A8%AA%E5%90%91%E6%BB%9A%E5%8A%A8/</id>
    <published>2021-06-12T16:26:20.000Z</published>
    <updated>2021-06-12T16:36:50.528Z</updated>
    
    <content type="html"><![CDATA[<p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      * &#123;</span><br><span class="line">        padding: 0;</span><br><span class="line">        margin: 0;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.container</span> &#123;</span></span><br><span class="line">        display: flex;</span><br><span class="line">        overflow-x: scroll;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.page</span> &#123;</span></span><br><span class="line">        width: 100vw;</span><br><span class="line">        height: 100vh;</span><br><span class="line">        flex-shrink: 0;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.page</span><span class="selector-pseudo">:nth-child(1)</span> &#123;</span></span><br><span class="line">        background-color: red;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.page</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</span></span><br><span class="line">        background-color: aqua;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.page</span><span class="selector-pseudo">:nth-child(3)</span> &#123;</span></span><br><span class="line">        background-color: blueviolet;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">     <span class="keyword">let</span> box= <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.container&#x27;</span>);</span></span><br><span class="line"><span class="javascript">     box.addEventListener(<span class="string">&#x27;wheel&#x27;</span>,<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span></span><br><span class="line">         e.preventDefault();</span><br><span class="line">         box.scrollLeft+=e.deltaY;</span><br><span class="line">     &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;代码：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;</summary>
      
    
    
    
    <category term="js" scheme="https://hard-workingrookie.github.io/categories/js/"/>
    
    
    <category term="js" scheme="https://hard-workingrookie.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js面试题</title>
    <link href="https://hard-workingrookie.github.io/2021/03/14/js%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://hard-workingrookie.github.io/2021/03/14/js%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2021-03-14T07:37:45.000Z</published>
    <updated>2021-03-14T07:41:28.737Z</updated>
    
    <content type="html"><![CDATA[<h1 id="有一个数组中存着RGB三种颜色的球，需要按RGB的顺序排序数组"><a href="#有一个数组中存着RGB三种颜色的球，需要按RGB的顺序排序数组" class="headerlink" title="有一个数组中存着RGB三种颜色的球，需要按RGB的顺序排序数组"></a>有一个数组中存着RGB三种颜色的球，需要按RGB的顺序排序数组</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">let</span> RGBData = [<span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;R&#x27;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sortRGB</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> i,</span><br><span class="line">      j,</span><br><span class="line">      len,</span><br><span class="line">      rear,</span><br><span class="line">      front = <span class="number">0</span></span><br><span class="line">    rear = arr.length - <span class="number">1</span></span><br><span class="line">    len= rear + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = front, j = <span class="number">0</span>; j &lt; len; ) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[i] == <span class="string">&#x27;R&#x27;</span>) &#123;</span><br><span class="line">        swap(i, front)</span><br><span class="line">        <span class="comment">//当调换回来的还是R</span></span><br><span class="line">        <span class="keyword">while</span> (arr[front] == <span class="string">&#x27;R&#x27;</span>) &#123;</span><br><span class="line">          i++</span><br><span class="line">          front++</span><br><span class="line">          j++</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[i] == <span class="string">&#x27;B&#x27;</span>) &#123;</span><br><span class="line">        swap(i, rear)</span><br><span class="line">         <span class="comment">//当调换回来的还是B</span></span><br><span class="line">        <span class="keyword">while</span> (arr[rear] == <span class="string">&#x27;B&#x27;</span>) &#123;</span><br><span class="line">          rear--</span><br><span class="line">          j++</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        i++</span><br><span class="line">        j++</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 交换</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">index1, index2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> temp</span><br><span class="line">    temp = RGBData[index1]</span><br><span class="line">    RGBData[index1] = RGBData[index2]</span><br><span class="line">    RGBData[index2] = temp</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(sortRGB(RGBData))</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="两个有序数组a-b，请将a-b合成为一个新的有序数组"><a href="#两个有序数组a-b，请将a-b合成为一个新的有序数组" class="headerlink" title="两个有序数组a,b，请将a,b合成为一个新的有序数组"></a>两个有序数组a,b，请将a,b合成为一个新的有序数组</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> merge=<span class="function">(<span class="params">a,b</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> arr=[]</span><br><span class="line">        <span class="keyword">let</span> i=<span class="number">0</span>,j=<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span>(i&lt;a.length&amp;&amp;j&lt;b.length)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&lt;b[j])&#123;</span><br><span class="line">                arr.push(a[i])</span><br><span class="line">                i++</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                arr.push(b[j])</span><br><span class="line">                j++</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;a.length)&#123;</span><br><span class="line">            arr.push(a[i++])</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;b.length)&#123;</span><br><span class="line">            arr.push(b[j++])</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> arr1=[<span class="number">1</span>,<span class="number">100</span>,<span class="number">500</span>,<span class="number">700</span>,<span class="number">100000</span>]</span><br><span class="line">    <span class="keyword">let</span> arr2=[<span class="number">100</span>,<span class="number">3000</span>,<span class="number">6000</span>]</span><br><span class="line">    <span class="built_in">console</span>.log(merge(arr1,arr2))</span><br><span class="line">    </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;有一个数组中存着RGB三种颜色的球，需要按RGB的顺序排序数组&quot;&gt;&lt;a href=&quot;#有一个数组中存着RGB三种颜色的球，需要按RGB的顺序排序数组&quot; class=&quot;headerlink&quot; title=&quot;有一个数组中存着RGB三种颜色的球，需要按RGB的顺序排序数</summary>
      
    
    
    
    
    <category term="js面试题" scheme="https://hard-workingrookie.github.io/tags/js%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>DevOps总结</title>
    <link href="https://hard-workingrookie.github.io/2021/03/09/DevOps%E6%80%BB%E7%BB%93/"/>
    <id>https://hard-workingrookie.github.io/2021/03/09/DevOps%E6%80%BB%E7%BB%93/</id>
    <published>2021-03-09T13:42:24.000Z</published>
    <updated>2021-03-09T14:06:29.896Z</updated>
    
    <content type="html"><![CDATA[<p><img src= "/img/loading.gif" data-lazy-src="http://tvshow.date/images/1175964-20191105059673.png"></p><h1 id="DevOps-是什么？"><a href="#DevOps-是什么？" class="headerlink" title="DevOps 是什么？"></a>DevOps 是什么？</h1><p>DevOps来自<code>Development</code>和<code>Operations</code>的结合,突出重视<strong>软件开发人员</strong>和<strong>运维人员</strong>的沟通合作<br>DevOps 是一种软件开发方法。它将持续开发、持续测试、持续集成、持续部署和持续监控贯穿于软件开发的整个生命周期。当前几乎所有的顶尖公司均采用了该方法，用以提高软件开发质量，并缩短软件开发生命周期。从而以达到每个公司对软件产品的期望，交付出客户最满意的产品。</p><h1 id="DevOps流程"><a href="#DevOps流程" class="headerlink" title="DevOps流程"></a>DevOps流程</h1><p><img src= "/img/loading.gif" data-lazy-src="http://tvshow.date/images/1391569032.png"><br>计划（plan）、编码(code)、编译(build)、测试(test)、发布(release)、部署(deploy)、运营(operate)、监控（monitor）</p><h1 id="DevOps工具链"><a href="#DevOps工具链" class="headerlink" title="DevOps工具链"></a>DevOps工具链</h1><p><img src= "/img/loading.gif" data-lazy-src="http://tvshow.date/images/v2-c371a2b21c503a0fef8c271070778edf_720w.jpg"></p><ol><li>Puppet<br>Puppet 是使用最广泛的 DevOps 工具。允许快速、频繁地交付和发布技术更改。具有版本控制、自动测试和连续交付的功能。可以将整个基础架构作为代码进行管理，而无需扩大团队规模。<br>特性</li></ol><ol start="2"><li>Ansible<br>Ansible 是领先的 DevOps 工具。Ansible 是一个开源 IT 引擎，可自动执行应用部署、云供应、内部服务编排和其他 IT 工具。DevOps 团队可以更轻松地扩展自动化规模并提高生产率。<br>Ansible 易于部署，因为它在客户端不使用任何代理或自定义安全性基础结构、也不通过将模块推送到客户端。这些模块在客户端本地执行，并将输出推回 Ansible 服务器。</li></ol><ol start="3"><li>Docker<br>Docker 是高端 DevOps 工具，允许在多个系统上构建、交付和运行分布式应用程序。有助于从组件快速组装应用，通常适用于容器管理。</li></ol><ol start="4"><li>Nagios<br>Nagios 是 DevOps 的更有用的工具之一。它可以确定错误并在网络、基础架构、服务器和日志监视系统的帮助下进行纠正。</li></ol><ol start="5"><li><p>CHEF<br>Chef 是实现规模、速度和一致性的有用工具。Chef 是基于云的系统和开源技术。这项技术使用 Ruby 编码来开发必不可少的构建基块，例如菜谱和烹饪书。Chef 用于基础架构自动化，并有助于减少用于基础架构管理的手动和重复性任务。</p></li><li><p>Jenkins<br>Jenkins 是一个 DevOps 工具，用于监视重复任务的执行。Jenkins 是允许持续集成的软件。Jenkins 将安装在将进行集中构建的服务器上。通过快速发现问题，它有助于更有效地集成项目变更。</p></li></ol><p>几乎不需要维护，并具有内置的 GUI 工具，可轻松进行更新。<br>7) Git<br>Git 是一个开源的分布式版本控制系统，每个人都可以免费使用。它旨在快速高效地处理从小到大的项目。开发它是为了协调程序员之间的工作。版本控件使您可以在同一工作区中跟踪团队成员并与之一起工作。它用作 DevOps 工具的关键分布式版本控制。</p><ol start="8"><li><p>SALTSTACK<br>Stackify 是轻量级的 DevOps 工具。它显示实时错误查询日志并且更直接地显示到工作站中。SALTSTACK 是针对软件定义的数据中心进行智能编排的理想解决方案。</p></li><li><p>Splunk<br>Splunk 是使机器数据对所有人可用、可访问且有价值的工具。为 DevOps 团队提供运营情报。帮助公司提高安全性、生产率和竞争力。</p></li><li><p>Selenium<br>Selenium 是用于Web应用程序的便携式软件测试框架。它为开发自动化测试提供了简单的界面。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src= &quot;/img/loading.gif&quot; data-lazy-src=&quot;http://tvshow.date/images/1175964-20191105059673.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;DevOps-是什么？&quot;&gt;&lt;a href=&quot;#Dev</summary>
      
    
    
    
    <category term="DevOps" scheme="https://hard-workingrookie.github.io/categories/DevOps/"/>
    
    
    <category term="DevOps" scheme="https://hard-workingrookie.github.io/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>electron窗口管理</title>
    <link href="https://hard-workingrookie.github.io/2021/01/07/electron%E7%AA%97%E5%8F%A3%E7%AE%A1%E7%90%86/"/>
    <id>https://hard-workingrookie.github.io/2021/01/07/electron%E7%AA%97%E5%8F%A3%E7%AE%A1%E7%90%86/</id>
    <published>2021-01-07T07:32:15.000Z</published>
    <updated>2021-03-09T14:07:44.053Z</updated>
    
    <content type="html"><![CDATA[<h1 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h1><h2 id="主窗口隐藏和恢复"><a href="#主窗口隐藏和恢复" class="headerlink" title="主窗口隐藏和恢复"></a>主窗口隐藏和恢复</h2><h3 id="主窗口"><a href="#主窗口" class="headerlink" title="主窗口"></a>主窗口</h3><h4 id="为什么需要-主窗口"><a href="#为什么需要-主窗口" class="headerlink" title="为什么需要 主窗口?"></a>为什么需要 <strong>主窗口</strong>?</h4><p>一个应用存在着许多的窗口，需要一个窗口作为 __主窗口__，如果该窗口关闭，则意味着整个应用被关闭。</p><p>场景：在应用只有一个页面的时，用户点击关闭按钮，不想让整个应用关闭，而是隐藏；<br>例如：其他的app，像微信，QQ等桌面端。  </p><p>主进程代码示例，完整代码在本应用的<code>app/browser-window/index.ts</code>处</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mainWindowId: number</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> browserWindow = <span class="keyword">new</span> BrowserWindow()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 记录下主窗口id</span></span><br><span class="line"><span class="keyword">if</span> (!mainWindowId) &#123;</span><br><span class="line">  mainWindowId = browserWindow.id</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">browserWindow.on(<span class="string">&#x27;close&#x27;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 如果关闭的是主窗口，阻止</span></span><br><span class="line">  <span class="keyword">if</span> (browserWindow.id === mainWindowId) &#123;</span><br><span class="line">    event.preventDefault()</span><br><span class="line">    browserWindow.hide()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="恢复主窗口显示"><a href="#恢复主窗口显示" class="headerlink" title="恢复主窗口显示"></a>恢复主窗口显示</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mainWindow = BrowserWindowsMap.get(mainWindowId)</span><br><span class="line"><span class="keyword">if</span> (mainWindow) &#123;</span><br><span class="line">  mainWindow.restore()</span><br><span class="line">  <span class="comment">// windows下如果hide之后不调用show方法而是只调用restore方法就会导致页面挂住不能用</span></span><br><span class="line">  mainWindow.show()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="强制关闭主窗口"><a href="#强制关闭主窗口" class="headerlink" title="强制关闭主窗口"></a>强制关闭主窗口</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mainWindow = BrowserWindowsMap.get(mainWindowId)</span><br><span class="line"><span class="keyword">if</span> (mainWindow) &#123;</span><br><span class="line">  mainWindowId = <span class="number">-1</span></span><br><span class="line">  mainWindow.close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h3><h4 id="因为阻止了close事件，导致-关机-时无法关闭-主窗口-，可以使用如下代码："><a href="#因为阻止了close事件，导致-关机-时无法关闭-主窗口-，可以使用如下代码：" class="headerlink" title="因为阻止了close事件，导致 关机 时无法关闭 __主窗口__，可以使用如下代码："></a>因为阻止了close事件，导致 <strong>关机</strong> 时无法关闭 __主窗口__，可以使用如下代码：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.on(<span class="string">&#x27;before-quit&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    closeMainWindow()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><em>注：<code>macOS</code> <code>Linux</code> <code>Windows</code> <a href="https://www.electronjs.org/docs/api/app#%E4%BA%8B%E4%BB%B6%EF%BC%9Abefore-quit">完整文档</a></em>  </p><h4 id="为避免启动-多个应用-；"><a href="#为避免启动-多个应用-；" class="headerlink" title="为避免启动 __多个应用__；"></a>为避免启动 __多个应用__；</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.on(<span class="string">&#x27;second-instance&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> mainWindow = BrowserWindowsMap.get(mainWindowId)</span><br><span class="line">  <span class="keyword">if</span> (mainWindow) &#123;</span><br><span class="line">    mainWindow.restore()</span><br><span class="line">    mainWindow.show()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><em>注：<code>macOS</code> <code>Linux</code> <code>Windows</code> <a href="https://www.electronjs.org/docs/api/app#%E4%BA%8B%E4%BB%B6-second-instance">完整文档</a></em>  </p><h4 id="首次启动应用程序、尝试在应用程序已运行时或单击-应用程序-的-坞站-或-任务栏图标-时重新激活它；"><a href="#首次启动应用程序、尝试在应用程序已运行时或单击-应用程序-的-坞站-或-任务栏图标-时重新激活它；" class="headerlink" title="首次启动应用程序、尝试在应用程序已运行时或单击 应用程序 的 坞站 或 任务栏图标 时重新激活它；"></a>首次启动应用程序、尝试在应用程序已运行时或单击 <strong>应用程序</strong> 的 <strong>坞站</strong> 或 <strong>任务栏图标</strong> 时重新激活它；</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.on(<span class="string">&#x27;activate&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (mainWindow) &#123;</span><br><span class="line">    mainWindow.restore()</span><br><span class="line">    mainWindow.show()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><em>注：<code>macOS</code> <a href="https://www.electronjs.org/docs/api/app#%E4%BA%8B%E4%BB%B6-second-instance">文档</a></em></p><h4 id="双击托盘图标-打开app，完整代码见app-tray。"><a href="#双击托盘图标-打开app，完整代码见app-tray。" class="headerlink" title="双击托盘图标 打开app，完整代码见app/tray。"></a><strong>双击托盘图标</strong> 打开<code>app</code>，完整代码见<code>app/tray</code>。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tray.on(<span class="string">&#x27;double-click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (mainWindow) &#123;</span><br><span class="line">    mainWindow.restore()</span><br><span class="line">    mainWindow.show()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><em>注：<code>macOS</code>  <code>Windows</code> <a href="https://www.electronjs.org/docs/api/tray#event-double-click-macos-windows">文档</a></em></p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><blockquote><p>你可以操作本应用的主窗口</p></blockquote><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p>如果你还是新手，或者没有开发过<code>electron</code>应用，浏览器打开 <a href="https://www.electronjs.org/docs/tutorial/first-app#%E6%89%93%E9%80%A0%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA-electron-%E5%BA%94%E7%94%A8">打造你的第一个 Electron 应用</a></p><h2 id="全屏、最大化、最小化、关闭"><a href="#全屏、最大化、最小化、关闭" class="headerlink" title="全屏、最大化、最小化、关闭"></a>全屏、最大化、最小化、关闭</h2><h3 id="全屏"><a href="#全屏" class="headerlink" title="全屏"></a>全屏</h3><h4 id="创建时进入全屏"><a href="#创建时进入全屏" class="headerlink" title="创建时进入全屏"></a>创建时进入全屏</h4><blockquote><p>配置<code>new BrowserWindow(&#123; fullscreen:true &#125;)</code>  </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @@code-renderer: runner</span></span><br><span class="line"><span class="comment">// @@code-props: &#123; hideRight: true, height:&#x27;100px&#x27; &#125;</span></span><br><span class="line"><span class="keyword">const</span> &#123; BrowserWindow &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> win = <span class="keyword">new</span> BrowserWindow(&#123; <span class="attr">fullscreen</span>:<span class="literal">true</span>,<span class="attr">fullscreenable</span>:<span class="literal">true</span> &#125;)</span><br><span class="line">win.loadURL(<span class="string">&#x27;https://github.com&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="使用API进入全屏"><a href="#使用API进入全屏" class="headerlink" title="使用API进入全屏"></a>使用<code>API</code>进入全屏</h4><blockquote><p>确保当前窗口的<code>fullscreenable:true</code>，以下<code>API</code>才能使用</p></blockquote><ol><li><code>win.setFullScreen(flag)</code>，设置全屏状态；</li><li><code>win.setSimpleFullScreen(flag)</code>，<code>macOS</code>下独有，设置简单全屏。</li></ol><h4 id="全屏状态的获取"><a href="#全屏状态的获取" class="headerlink" title="全屏状态的获取"></a>全屏状态的获取</h4><ol><li><code>win.fullScreen</code>，来判断当前窗口是否全屏；</li><li><code>win.isFullScreen()</code>，<code>macOS</code>独有；</li><li><code>win.isSimpleFullScreen()</code>，<code>macOS</code>独有。</li></ol><h4 id="全屏事件的监听"><a href="#全屏事件的监听" class="headerlink" title="全屏事件的监听"></a>全屏事件的监听</h4><ol><li><code>rezise</code> 调整窗口大小后触发;</li><li><code>enter-full-screen</code> 窗口进入全屏状态时触发;</li><li><code>leave-full-screen</code> 窗口离开全屏状态时触发;</li><li><code>enter-html-full-screen</code> 窗口进入由HTML API 触发的全屏状态时触发;</li><li><code>leave-html-full-screen</code> 窗口离开由HTML API触发的全屏状态时触发。</li></ol><h4 id="HTML-API无法和窗口联动"><a href="#HTML-API无法和窗口联动" class="headerlink" title="HTML API无法和窗口联动"></a><code>HTML</code> <code>API</code>无法和窗口联动</h4><p><strong>试一试</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @@code-renderer: runner</span></span><br><span class="line"><span class="comment">// @@code-props: &#123; hideRight: true, height:&#x27;200px&#x27; &#125;</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; BrowserWindow &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> BaseWebPreferences = &#123; </span><br><span class="line">    nodeIntegration: <span class="literal">true</span>,</span><br><span class="line">    preload: path.resolve(__dirname, <span class="string">&#x27;./fullScreen.js&#x27;</span>), </span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> win = <span class="keyword">new</span> BrowserWindow(&#123; <span class="attr">webPreferences</span>: BaseWebPreferences &#125;)</span><br><span class="line">win.loadURL(<span class="string">&#x27;file:///&#x27;</span> + path.resolve(__dirname, <span class="string">&#x27;../playground/index.html#/demo/full-screen&#x27;</span>))</span><br></pre></td></tr></table></figure><blockquote><p>使用按钮全屏和退出全屏是可以的，但是先点击左上角🚥全屏，再使用按钮退出全屏，是不行的。因为无法知道当前的状态是全屏，还是不是全屏。</p></blockquote><p>解决办法：，将<code>win.setFullScreen(flag)</code>方法挂载到窗口的<code>window</code>上</p><h3 id="最大化、最小化"><a href="#最大化、最小化" class="headerlink" title="最大化、最小化"></a>最大化、最小化</h3><h4 id="创建窗口配置"><a href="#创建窗口配置" class="headerlink" title="创建窗口配置"></a>创建窗口配置</h4><blockquote><p><a href="https://www.electronjs.org/docs/api/browser-window#new-browserwindowoptions">完整API文档</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @@code-renderer: runner</span></span><br><span class="line"><span class="comment">// @@code-props: &#123; hideRight: true, height:&#x27;100px&#x27; &#125;</span></span><br><span class="line"><span class="keyword">const</span> &#123; BrowserWindow &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> win = <span class="keyword">new</span> BrowserWindow(&#123; <span class="attr">minWidth</span>:<span class="number">300</span>,<span class="attr">minHeight</span>:<span class="number">300</span>,<span class="attr">maxWidth</span>:<span class="number">500</span>,<span class="attr">maxHeight</span>:<span class="number">500</span>,<span class="attr">width</span>:<span class="number">600</span>,<span class="attr">height</span>:<span class="number">600</span> &#125;)</span><br><span class="line">win.loadURL(<span class="string">&#x27;https://github.com&#x27;</span>)</span><br></pre></td></tr></table></figure><p><em>当使用 <code>minWidth/maxWidth/minHeight/maxHeight</code> 设置最小或最大窗口大小时, 它只限制用户。 它不会阻止您将不符合大小限制的值传递给 <code>setBounds/setSize</code> 或 <code>BrowserWindow</code> 的构造函数。</em></p><h4 id="相关事件"><a href="#相关事件" class="headerlink" title="相关事件"></a>相关事件</h4><table><thead><tr><th>事件名称</th><th>触发条件</th></tr></thead><tbody><tr><td><code>maximize</code></td><td>窗口最大化时触发</td></tr><tr><td><code>unmaximize</code></td><td>当窗口从最大化状态退出时触发</td></tr><tr><td><code>minimize</code></td><td>窗口最小化时触发</td></tr><tr><td><code>restore</code></td><td>当窗口从最小化状态恢复时触发</td></tr></tbody></table><h4 id="相关状态API"><a href="#相关状态API" class="headerlink" title="相关状态API"></a>相关状态API</h4><ol><li><code>win.minimizable</code> 窗口是否可以最小化</li><li><code>win.maximizable</code> 窗口是否可以最大化</li><li><code>win.isMaximized()</code> 是否最大化</li><li><code>win.isMinimized()</code> 是否最小化</li></ol><h4 id="控制API"><a href="#控制API" class="headerlink" title="控制API"></a>控制API</h4><ol><li><code>win.maximize()</code> 使窗口最大化</li><li><code>win.unmaximize()</code> 退出最大化</li><li><code>win.minimize()</code> 使窗口最小化</li><li><code>win.unminimize()</code> 退出最小化</li></ol><h3 id="窗口恢复"><a href="#窗口恢复" class="headerlink" title="窗口恢复"></a>窗口恢复</h3><p><code>win.restore()</code> 将窗口从最小化状态恢复到以前的状态。</p><h2 id="创建和管理窗口"><a href="#创建和管理窗口" class="headerlink" title="创建和管理窗口"></a>创建和管理窗口</h2><p>通过<code>electron</code>的<code>BrowserWindow</code>模块，我们可以轻松 <strong>创建</strong> 和 <strong>管理</strong> 窗口。</p><p>在浏览器打开 <a href="https://www.electronjs.org/docs/api/browser-window">完整的API文档</a></p><p>每个应用，因为业务的不同；创建和管理窗口的方式和流程也大不相同；这里我们以下流程为例：</p><img src= "/img/loading.gif" data-lazy-src="http://mei160.cn/images/window-create.png" alt="window create"><h3 id="创建窗口"><a href="#创建窗口" class="headerlink" title="创建窗口"></a>创建窗口</h3><p>通过<code>BrowserWindow</code>，来 <strong>创建</strong> 或者 <strong>管理</strong> 新的浏览器窗口，每个浏览器窗口都有一个进程来管理。</p><p>这里，我们把 <strong>创建</strong> 和 <strong>管理__，分为 __用户行为</strong> 和 __应用本身__。</p><p><strong>应用本身</strong> 即是：应用启动 ——&gt; 窗口创建 –&gt; 窗口展示<br><strong>用户行为</strong> 即是：窗口已经创建完毕，用户点击<code>a</code>链接而创建的窗口的行为</p><h4 id="简单创建一个窗口"><a href="#简单创建一个窗口" class="headerlink" title="简单创建一个窗口"></a>简单创建一个窗口</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @@code-renderer: runner</span></span><br><span class="line"><span class="comment">// @@code-props: &#123; hideRight: false, height:&#x27;100px&#x27; &#125;</span></span><br><span class="line"><span class="keyword">const</span> &#123; BrowserWindow &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> win = <span class="keyword">new</span> BrowserWindow();</span><br><span class="line">win.loadURL(<span class="string">&#x27;https://github.com&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><p>__问题__：<code>electron</code>的<code>BrowserWindow</code>模块在创建时，如果没有配置<code>show:false</code>，在创建之时就会显示出来，且默认的背景是白色；然后窗口请求<code>HTML</code>，会出现闪烁。   </p><p><a href="https://www.electronjs.org/docs/api/browser-window#%E4%BD%BF%E7%94%A8ready-to-show%E4%BA%8B%E4%BB%B6">完整api文档</a></p><p><strong>解决</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @@code-renderer: runner</span></span><br><span class="line"><span class="comment">// @@code-props: &#123; hideRight: true, height:&#x27;200px&#x27; &#125;</span></span><br><span class="line"><span class="keyword">const</span> &#123; BrowserWindow &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> win = <span class="keyword">new</span> BrowserWindow(&#123; <span class="attr">show</span>:<span class="literal">false</span>,<span class="attr">x</span>:<span class="number">100</span>,<span class="attr">y</span>:<span class="number">100</span> &#125;);</span><br><span class="line"></span><br><span class="line">win.loadURL(<span class="string">&#x27;https://github.com&#x27;</span>);</span><br><span class="line"></span><br><span class="line">win.on(<span class="string">&#x27;ready-to-show&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    win.show();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>__对比上面简单创建窗口__，可以明显看出2者的区别</p><p><code>new BrowserWindow(options)</code>，<a href="https://www.electronjs.org/docs/api/browser-window#new-browserwindowoptions">options配置文档</a>  </p><h3 id="管理窗口"><a href="#管理窗口" class="headerlink" title="管理窗口"></a>管理窗口</h3><h4 id="管理应用创建的窗口"><a href="#管理应用创建的窗口" class="headerlink" title="管理应用创建的窗口"></a>管理应用创建的窗口</h4><p><code>BrowserWindow</code>模块在创建窗口时，会返回 <strong>窗口实例</strong></p><p>在这里使用<code>Map</code>对象来存储这些 <strong>窗口实例</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> BrowserWindowsMap = <span class="keyword">new</span> <span class="built_in">Map</span>&lt;<span class="built_in">number</span>, BrowserWindow&gt;()</span><br><span class="line"><span class="keyword">let</span> mainWindowId: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> browserWindows = <span class="keyword">new</span> BrowserWindow(&#123; show:<span class="literal">false</span> &#125;)</span><br><span class="line">browserWindows.loadURL(<span class="string">&#x27;https://github.com&#x27;</span>)</span><br><span class="line">browserWindows.once(<span class="string">&#x27;ready-to-show&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  browserWindows.show()</span><br><span class="line">&#125;)</span><br><span class="line">BrowserWindowsMap.set(browserWindow.id, browserWindow)</span><br><span class="line">mainWindowId = browserWindow.id  <span class="comment">// 记录当前窗口为主窗口</span></span><br></pre></td></tr></table></figure><blockquote><p>代码中提到 __主窗口__，什么是主窗口？<a href="./index.html#/browser/awaken">主窗口隐藏和恢复</a>章节</p></blockquote><p>__窗口被关闭__，得把<code>Map</code>中的实例删除。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">browserWindow.on(<span class="string">&#x27;closed&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  BrowserWindowsMap?.delete(browserWindowID)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="管理用户创建的窗口"><a href="#管理用户创建的窗口" class="headerlink" title="管理用户创建的窗口"></a>管理用户创建的窗口</h4><p>一个窗口中存在许多的链接，不管是链接跳转，或是创建新的窗口，我们都需要管理这些窗口。</p><p><strong>使用<code>new-window</code>监听窗口创建</strong><br>使用<code>new-window</code>可监听 <strong>新窗口</strong> 的创建。浏览器打开<a href="https://www.electronjs.org/docs/api/web-contents#event-new-window">完整文档</a></p><p>核心代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建窗口监听</span></span><br><span class="line">browserWindow.webContents.on(<span class="string">&#x27;new-window&#x27;</span>, <span class="function">(<span class="params">event, url, frameName, disposition</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/** <span class="doctag">@params <span class="type">&#123;string&#125;</span> <span class="variable">disposition</span></span></span></span><br><span class="line"><span class="comment">  *  new-window : window.open调用</span></span><br><span class="line"><span class="comment">  *  background-tab: command+click</span></span><br><span class="line"><span class="comment">  *  foreground-tab: 右键点击新标签打开或点击a标签target _blank打开</span></span><br><span class="line"><span class="comment">  * /</span></span><br><span class="line"><span class="comment">&#125;)</span></span><br></pre></td></tr></table></figure><blockquote><p>注：关于<code>disposition</code>字段的解释，移步<a href="https://www.electronjs.org/docs/api/web-contents#webcontents">electron文档</a>、<a href="https://github.com/electron/electron/blob/72a089262e31054eabd342294ccdc4c414425c99/shell/browser/api/electron_api_web_contents.cc">electron源码</a>、<a href="https://chromium.googlesource.com/chromium/src/+/66.0.3359.158/ui/base/mojo/window_open_disposition_struct_traits.h">chrome 源码</a></p></blockquote><p><strong>扩展<code>new-window</code></strong></p><ul><li>可以被 当前窗口的 <code>new-window</code>事件捕捉到的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.open(<span class="string">&#x27;https://github.com&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://github.com&#x27;</span> <span class="attr">target</span>=<span class="string">&#x27;__blank&#x27;</span>&gt;</span>链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>不可被 当前窗口的 <code>new-window</code>事件捕捉到的<br>以下api需要窗口 集成node，即 <strong>主进程</strong> 创建时需配置<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; BrowserWindow &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> parent = <span class="keyword">new</span> BrowserWindow(&#123; <span class="attr">webPreferences</span>:&#123;<span class="attr">nodeIntegration</span>: <span class="literal">true</span>&#125;&#125;);</span><br></pre></td></tr></table></figure><strong>渲染进程</strong> 使用<code>BrowserWindow</code>创建窗口<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; BrowserWindow &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>).remote</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> win = <span class="keyword">new</span> BrowserWindow()</span><br><span class="line">win.loadURL(<span class="string">&#x27;https://github.com&#x27;</span>)</span><br></pre></td></tr></table></figure><strong>应用<code>new-window</code></strong><br><strong>通过 __默认浏览器</strong> 来打开 __第三方链接<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; shell &#125; <span class="keyword">from</span> <span class="string">&#x27;electron&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">openExternal</span>(<span class="params">url: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> HTTP_REGEXP = <span class="regexp">/^https?:\/\//</span></span><br><span class="line">  <span class="comment">// 非http协议不打开，防止出现自定义协议等导致的安全问题</span></span><br><span class="line">  <span class="keyword">if</span> (!HTTP_REGEXP) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> shell.openExternal(url, options)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">&#x27;open external error: &#x27;</span>, error)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建窗口监听</span></span><br><span class="line">browserWindow.webContents.on(<span class="string">&#x27;new-window&#x27;</span>, <span class="function">(<span class="params">event, url, frameName, disposition</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (disposition === <span class="string">&#x27;foreground-tab&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// 阻止鼠标点击链接</span></span><br><span class="line">      event.preventDefault()</span><br><span class="line">      openExternal(url)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="关闭窗口"><a href="#关闭窗口" class="headerlink" title="关闭窗口"></a>关闭窗口</h3><p>关闭窗口或者隐藏的<code>API</code></p><h4 id="win-close"><a href="#win-close" class="headerlink" title="win.close()"></a><code>win.close()</code></h4><ol><li>关闭页面，如果阻止<code>close</code>事件，将不会关闭页面，这会 __阻止计算机关闭__；</li><li>关闭页面的服务，如<code>websocket</code>，下次打开窗口，窗口中的页面会 __重新渲染__；</li><li>通过这个<code>API</code>触发的<code>close</code>事件在 <code>unload</code> 和 <code>beforeunload</code>之前触发，通过这点可以实现 __关闭时触发弹窗__；</li><li>会被<code>closed</code>事件捕捉到。</li></ol><p>__例子__：实现关闭窗口之前触发弹窗<br>代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @@code-renderer: runner</span></span><br><span class="line"><span class="comment">// @@code-props: &#123; hideRight: true, height:&#x27;100px&#x27; &#125;</span></span><br><span class="line"><span class="keyword">const</span> &#123; BrowserWindow &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> browserWindows = <span class="keyword">new</span> BrowserWindow(&#123;<span class="attr">webPreferences</span>:&#123;<span class="attr">nodeIntegration</span>: <span class="literal">true</span>,<span class="attr">webSecurity</span>: <span class="literal">false</span>&#125;&#125;)</span><br><span class="line">browserWindows.loadURL(<span class="string">&#x27;file:///&#x27;</span> + path.resolve(__dirname, <span class="string">&#x27;../playground/index.html#/demo/window-close&#x27;</span>))</span><br></pre></td></tr></table></figure><p>注：</p><ul><li>上面代码，只能应用于electron端，在web端刷新不起作用；web端无法在页面关闭或者刷新之前阻塞浏览器；<img src= "/img/loading.gif" data-lazy-src="http://mei160.cn/images/close-window-model.png" alt="close-window-model" /><img src= "/img/loading.gif" data-lazy-src="http://mei160.cn/images/close-window-model2.png" alt="close-window-model" /></li><li>阻止关闭窗口出现的弹窗，<code>img</code>元素外链<code>url</code>不起作用，会发出请求，但是不会渲染出来，可以使用<code>div+background</code>的方式；</li><li>关于<code>beforeunload</code><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event">完整<code>API</code>文档</a></li></ul><h4 id="win-destroy"><a href="#win-destroy" class="headerlink" title="win.destroy()"></a><code>win.destroy()</code></h4><ol><li>强制退出，无视<code>close</code>事件；</li><li>关闭页面，以及页面内的服务，下次打开窗口，窗口中的页面会重新渲染；</li><li>会被<code>closed</code>事件捕捉到。</li></ol><h4 id="win-hide"><a href="#win-hide" class="headerlink" title="win.hide()"></a><code>win.hide()</code></h4><blockquote><p>这个隐藏窗口。</p></blockquote><ol><li>隐藏窗口，会触发<code>hide</code>和<code>blur</code>事件，同样也是可以通过<code>event.preventDefault()</code>来阻止</li><li>只是隐藏窗口，通过<code>win.show()</code>，可以将窗口显现，并且会保持原来的窗口，里面的服务也不会挂断</li></ol><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>关于页面可见性，可参见<a href="https://www.electronjs.org/docs/API/browser-window#%E9%A1%B5%E9%9D%A2%E5%8F%AF%E8%A7%81%E6%80%A7">文档</a>；</li><li><strong>主窗口的隐藏和唤醒</strong> 的具体细节，可参见本章的 <a href="./index.html#/browser/awaken">主窗口隐藏和恢复</a>章节；</li><li>窗口在被创建之后，窗口实例各种 <strong>事件触发顺序</strong> 可参见 <a href="./index.html#/browser/window-event">窗口触发顺序</a>章节；</li><li>__窗口通信__，可参见 <a href="./index.html#/browser/communication">窗口通信</a>章节；</li><li>__无边框窗口__、__父子窗口__、__模态窗口__，参见<a href="./index.html#/browser/window-type">窗口类型</a>章节；</li></ul><h2 id="窗口之间的通信"><a href="#窗口之间的通信" class="headerlink" title="窗口之间的通信"></a>窗口之间的通信</h2><h3 id="主进程干预方式"><a href="#主进程干预方式" class="headerlink" title="主进程干预方式"></a>主进程干预方式</h3><p>主进程是可以干预渲染进程生成新的窗口的，只需要在创建窗口时，<code>webContents</code> 监听 <code>new-window</code> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; PRELOAD_FILE &#125; <span class="keyword">from</span> <span class="string">&#x27;app/config&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; browserWindow &#125; <span class="keyword">from</span> <span class="string">&#x27;electron&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> BaseWebPreferences: Electron.BrowserWindowConstructorOptions[<span class="string">&#x27;webPreferences&#x27;</span>] = &#123;</span><br><span class="line">  nodeIntegration: <span class="literal">true</span>,</span><br><span class="line">  webSecurity: <span class="literal">false</span>,</span><br><span class="line">  preload: path.resolve(__dirname, PRELOAD_FILE),</span><br><span class="line">  enableRemoteModule:<span class="literal">true</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建窗口监听</span></span><br><span class="line">browserWindow.webContents.on(<span class="string">&#x27;new-window&#x27;</span>, <span class="function">(<span class="params">event, url, frameName, disposition</span>) =&gt;</span> &#123;</span><br><span class="line">    event.preventDefault()</span><br><span class="line">    <span class="comment">// 在通过BrowserWindow创建窗口</span></span><br><span class="line">    <span class="keyword">const</span> win = <span class="keyword">new</span> BrowserWindow(&#123; </span><br><span class="line">      show:<span class="literal">false</span>, </span><br><span class="line">      webPreferences: &#123;</span><br><span class="line">        ...BaseWebPreferences,</span><br><span class="line">        additionalArguments:[<span class="string">`--parentWindow=<span class="subst">$&#123;browserWindow.id&#125;</span>`</span>] <span class="comment">// 把父窗口的id传过去</span></span><br><span class="line">        enableRemoteModule:<span class="literal">true</span></span><br><span class="line">      &#125; </span><br><span class="line">    &#125;);</span><br><span class="line">    win.loadURl(url);</span><br><span class="line">    win.once(<span class="string">&#x27;ready-to-show&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        win.show()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在preload.js文件<code>window.process.argv</code>，便能拿到父窗口的id，<code>window.process.argv</code>是一个字符串数组，可以使用<a href='https://github.com/yargs/yargs'>yargs</a>来解析</p><p>preload.js 代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; argv &#125; <span class="keyword">from</span> <span class="string">&#x27;yargs&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(argv);</span><br></pre></td></tr></table></figure><img src= "/img/loading.gif" data-lazy-src='http://mei160.cn/images/yargv-parse.png'/>拿到父窗口的id，便可以通信了<p><strong>试一试</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @@code-renderer: runner</span></span><br><span class="line"><span class="comment">// @@code-props: &#123; hideRight: true, height:&#x27;600px&#x27; &#125;</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; BrowserWindow &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> BaseWebPreferences = &#123;</span><br><span class="line">  <span class="comment">// // 集成node</span></span><br><span class="line">  nodeIntegration: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// // 禁用同源策略</span></span><br><span class="line">  <span class="comment">// webSecurity: false,</span></span><br><span class="line">  <span class="comment">// 预加载脚本 通过绝对地址注入</span></span><br><span class="line">  preload: path.resolve(__dirname, <span class="string">&#x27;./communication1.js&#x27;</span>),</span><br><span class="line">  enableRemoteModule:<span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主窗口代码</span></span><br><span class="line"><span class="keyword">const</span> parent = <span class="keyword">new</span> BrowserWindow(&#123; <span class="attr">webPreferences</span>: BaseWebPreferences, <span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;)</span><br><span class="line">parent.loadURL(</span><br><span class="line">  <span class="string">&#x27;file:///&#x27;</span> + path.resolve(__dirname, <span class="string">&#x27;../playground/index.html#/demo/communication-part1/main&#x27;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">parent.webContents.on(<span class="string">&#x27;new-window&#x27;</span>, <span class="function">(<span class="params">event, url, frameName, disposition</span>) =&gt;</span> &#123;</span><br><span class="line">  event.preventDefault()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在通过BrowserWindow创建窗口 // 子窗口代码</span></span><br><span class="line">  <span class="keyword">const</span> son = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    webPreferences: &#123;</span><br><span class="line">      ...BaseWebPreferences,</span><br><span class="line">      additionalArguments: [<span class="string">&#x27;--parentWindowId=&#x27;</span> + parent.id],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  son.webContents.openDevTools()</span><br><span class="line">  son.loadURL(</span><br><span class="line">    <span class="string">&#x27;file:///&#x27;</span> +</span><br><span class="line">      path.resolve(__dirname, <span class="string">&#x27;../playground/index.html#/demo/communication-part1/client&#x27;</span>),</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>其余代码如下</strong>:<br>主窗口代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; ReactElement, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> style <span class="keyword">from</span> <span class="string">&#x27;../style.module.less&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Communication</span>(<span class="params"></span>): <span class="title">ReactElement</span> </span>&#123;</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">&#x27;父窗口&#x27;</span></span><br><span class="line">  &#125;, [])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=&#123;style.wrap&#125;&gt;</span><br><span class="line">      &lt;a href=<span class="string">&#x27;http://www.github.com&#x27;</span> target=<span class="string">&#x27;__blank&#x27;</span>&gt;</span><br><span class="line">        通过a标签target=__blank打开新的窗口</span><br><span class="line">      &lt;/a&gt;</span><br><span class="line">      &lt;div</span><br><span class="line">        onClick=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">window</span>.open(<span class="string">&#x27;http://www.github.com&#x27;</span>)</span><br><span class="line">        &#125;&#125;&gt;</span><br><span class="line">        通过<span class="built_in">window</span>.open打开新的窗口</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>子窗口代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; ReactElement, useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> style <span class="keyword">from</span> <span class="string">&#x27;../style.module.less&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> COUNT_NUM = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Communication</span>(<span class="params"></span>): <span class="title">ReactElement</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [num, setNum] = useState(COUNT_NUM)</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">&#x27;子窗口&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> timer: NodeJS.Timeout</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        setNum(num - <span class="number">1</span>)</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// @ts-ignore</span></span><br><span class="line">      <span class="built_in">window</span>.send(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">      <span class="built_in">window</span>.close()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      timer &amp;&amp; <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [num])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;style.countDown&#125;</span>&gt;</span>子窗口 &#123;num&#125; 秒之后，请看主窗口<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="父子窗口通信"><a href="#父子窗口通信" class="headerlink" title="父子窗口通信"></a>父子窗口通信</h3><p>和主进程干预，通过<code>ipc</code>通信方式差不多，只是利用父子窗口这点，不用通过<code>additionalArguments</code>传递父窗口<code>id</code>，在子窗口通过<code>window.parent</code>，就可以拿到父窗口</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">browserWindow.webContents.on(<span class="string">&#x27;new-window&#x27;</span>, <span class="function">(<span class="params">event, url, frameName, disposition</span>) =&gt;</span> &#123;</span><br><span class="line">    event.preventDefault()</span><br><span class="line">      </span><br><span class="line">    <span class="comment">// 在通过BrowserWindow创建窗口</span></span><br><span class="line">    <span class="keyword">const</span> win = <span class="keyword">new</span> BrowserWindow(&#123; </span><br><span class="line">        show:<span class="literal">false</span>, </span><br><span class="line">        webPreferences:BaseWebPreferences,</span><br><span class="line">        parent:browserWindow <span class="comment">// 添加父窗口</span></span><br><span class="line">      &#125;);</span><br><span class="line">    win.loadURl(url);</span><br><span class="line">    win.once(<span class="string">&#x27;ready-to-show&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        win.show()</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>弊端：子窗口永远在父窗口之上。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @@code-renderer: runner</span></span><br><span class="line"><span class="comment">// @@code-props: &#123; hideRight: true, height:&#x27;600px&#x27; &#125;</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; BrowserWindow &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> BaseWebPreferences = &#123;</span><br><span class="line">  <span class="comment">// // 集成node</span></span><br><span class="line">  nodeIntegration: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// // 禁用同源策略</span></span><br><span class="line">  <span class="comment">// webSecurity: false,</span></span><br><span class="line">  <span class="comment">// 预加载脚本 通过绝对地址注入</span></span><br><span class="line">  preload: path.resolve(__dirname, <span class="string">&#x27;./communication2.js&#x27;</span>),</span><br><span class="line">  enableRemoteModule:<span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主窗口代码</span></span><br><span class="line"><span class="keyword">const</span> parent = <span class="keyword">new</span> BrowserWindow(&#123; <span class="attr">webPreferences</span>: BaseWebPreferences, <span class="attr">left</span>: <span class="number">100</span>, <span class="attr">top</span>: <span class="number">0</span> &#125;)</span><br><span class="line">parent.loadURL(</span><br><span class="line">  <span class="string">&#x27;file:///&#x27;</span> + path.resolve(__dirname, <span class="string">&#x27;../playground/index.html#/demo/communication-part2/main&#x27;</span>),</span><br><span class="line">)</span><br><span class="line">parent.webContents.on(<span class="string">&#x27;new-window&#x27;</span>, <span class="function">(<span class="params">event, url, frameName, disposition</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 阻止默认事件</span></span><br><span class="line">  event.preventDefault()</span><br><span class="line">  <span class="comment">// 在通过BrowserWindow创建窗口</span></span><br><span class="line">  <span class="comment">// 子窗口代码</span></span><br><span class="line">  <span class="keyword">const</span> son = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    webPreferences: BaseWebPreferences,</span><br><span class="line">    parent,</span><br><span class="line">    width: <span class="number">400</span>,</span><br><span class="line">    height: <span class="number">400</span>,</span><br><span class="line">    alwaysOnTop: <span class="literal">false</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// son.webContents.openDevTools();</span></span><br><span class="line">  son.loadURL(</span><br><span class="line">    <span class="string">&#x27;file:///&#x27;</span> +</span><br><span class="line">      path.resolve(__dirname, <span class="string">&#x27;../playground/index.html#/demo/communication-part2/client&#x27;</span>),</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>其余代码如下</strong>:</p><p>主窗口代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; ReactElement, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> style <span class="keyword">from</span> <span class="string">&#x27;../style.module.less&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Communication</span>(<span class="params"></span>): <span class="title">ReactElement</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">&#x27;父窗口&#x27;</span></span><br><span class="line">  &#125;, [])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=&#123;style.wrap&#125;&gt;</span><br><span class="line">      &lt;a href=<span class="string">&#x27;http://www.github.com&#x27;</span> target=<span class="string">&#x27;__blank&#x27;</span>&gt;</span><br><span class="line">        通过a标签target=__blank打开新的窗口</span><br><span class="line">      &lt;/a&gt;</span><br><span class="line">      &lt;div</span><br><span class="line">        onClick=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">window</span>.open(<span class="string">&#x27;http://www.github.com&#x27;</span>)</span><br><span class="line">        &#125;&#125;&gt;</span><br><span class="line">        通过<span class="built_in">window</span>.open打开新的窗口</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子窗口代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; ReactElement, useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> style <span class="keyword">from</span> <span class="string">&#x27;../style.module.less&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> COUNT_NUM = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Communication</span>(<span class="params"></span>): <span class="title">ReactElement</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [num, setNum] = useState(COUNT_NUM)</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">&#x27;子窗口&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> timer: NodeJS.Timeout</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        setNum(num - <span class="number">1</span>)</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// @ts-ignore</span></span><br><span class="line">      <span class="built_in">window</span>.sendToParent(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">      <span class="built_in">window</span>.close()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      timer &amp;&amp; <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [num])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;style.countDown&#125;</span>&gt;</span>子窗口 &#123;num&#125; 秒之后，请看主窗口<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用window-open"><a href="#使用window-open" class="headerlink" title="使用window.open"></a>使用<code>window.open</code></h3><h2 id="窗口事件"><a href="#窗口事件" class="headerlink" title="窗口事件"></a>窗口事件</h2><img src= "/img/loading.gif" data-lazy-src='http://mei160.cn/images/window-event.png'/><h3 id="窗口加载时"><a href="#窗口加载时" class="headerlink" title="窗口加载时"></a>窗口加载时</h3><blockquote><p>从上到下，依次执行</p></blockquote><table><thead><tr><th>环境</th><th>事件</th><th>触发时机</th></tr></thead><tbody><tr><td>webPreferences的preload</td><td>-</td><td>在页面运行其他脚本之前预先加载指定的脚本 无论页面是否集成Node, 此脚本都可以访问所有Node API 脚本路径为文件的绝对路径。</td></tr><tr><td>webContents</td><td><code>did-start-loading</code></td><td>当tab中的旋转指针（spinner）开始旋转时，就会触发该事件</td></tr><tr><td>webContents</td><td><code>did-start-navigation</code></td><td>当窗口开始导航是，触发该事件</td></tr><tr><td>窗口中的<code>JavaScript</code></td><td><code>DOMContentLoaded</code></td><td>初始的 HTML 文档被完全加载和解析完成</td></tr><tr><td>窗口中的<code>JavaScript</code></td><td><code>load</code></td><td>页面资源全部加载完成之时</td></tr><tr><td><code>BrowserWindow</code>实例</td><td><code>show</code></td><td>窗口显示时触发时</td></tr><tr><td><code>webContents</code></td><td><code>did-frame-navigate</code></td><td><code>frame</code>导航结束时时</td></tr><tr><td><code>webContents</code></td><td><code>did-navigate</code></td><td><code>main frame</code>导航结束时时</td></tr><tr><td><code>BrowserWindow</code>实例</td><td><code>page-title-updated</code></td><td>文档更改标题时触发</td></tr><tr><td><code>webContents</code></td><td><code>page-title-updated</code></td><td>文档更改标题时触发</td></tr><tr><td><code>webContents</code></td><td><code>dom-ready</code></td><td>一个框架中的文本加载完成后触发该事件</td></tr><tr><td><code>webContents</code></td><td><code>did-frame-finish-load</code></td><td>当框架完成导航（navigation）时触发</td></tr><tr><td><code>webContents</code></td><td><code>did-finish-load</code></td><td>导航完成时触发，即选项卡的旋转器将停止旋转</td></tr><tr><td><code>webContents</code></td><td><code>did-stop-loading</code></td><td>当tab中的旋转指针（spinner）结束旋转时，就会触发该事件</td></tr></tbody></table><p>##. 窗口加载完毕，用户触发事件（不包括resize和move）</p><table><thead><tr><th>事件</th><th>作用</th></tr></thead><tbody><tr><td><code>page-title-updated</code></td><td>文档更改标题时触发</td></tr><tr><td><code>blur</code></td><td>当窗口失去焦点时触发</td></tr><tr><td><code>focus</code></td><td>当窗口获得焦点时触发</td></tr><tr><td><code>hide</code></td><td>窗口隐藏</td></tr><tr><td><code>show</code></td><td>窗口显示</td></tr><tr><td><code>maximize</code></td><td>窗口最大化时触发（mac是双击title）</td></tr><tr><td><code>unmaximize</code></td><td>当窗口从最大化状态退出时触发</td></tr><tr><td><code>enter-full-screen</code></td><td>窗口进入全屏状态时触发</td></tr><tr><td><code>leave-full-screen</code></td><td>窗口离开全屏状态时触发</td></tr><tr><td><code>enter-html-full-screen</code></td><td>窗口进入由HTML API 触发的全屏状态时触发</td></tr><tr><td><code>leave-html-full-screen</code></td><td>窗口离开由HTML API触发的全屏状态时触发</td></tr><tr><td><code>always-on-top-changed</code></td><td>设置或取消设置窗口总是在其他窗口的顶部显示时触发。</td></tr><tr><td><code>app-command</code></td><td><code>window</code> <code>linux</code>独有</td></tr></tbody></table><h3 id="用户移动窗口"><a href="#用户移动窗口" class="headerlink" title="用户移动窗口"></a>用户移动窗口</h3><ol><li>移动窗口之前 <code>will-move</code>；</li><li>移动窗口中 <code>move</code>；</li><li>移动之后 <code>moved</code>；</li></ol><h3 id="用户改变窗口大小"><a href="#用户改变窗口大小" class="headerlink" title="用户改变窗口大小"></a>用户改变窗口大小</h3><ol><li>改变之前 <code>will-resize</code>；</li><li>改变之后 <code>resize</code></li></ol><h3 id="窗口的内容异常事件（webContent事件）"><a href="#窗口的内容异常事件（webContent事件）" class="headerlink" title="窗口的内容异常事件（webContent事件）"></a>窗口的内容异常事件（<code>webContent</code>事件）</h3><table><thead><tr><th>事件名</th><th>错误类型</th></tr></thead><tbody><tr><td><code>unresponsive</code></td><td>网页变得未响应时触发</td></tr><tr><td><code>responsive</code></td><td>未响应的页面变成响应时触发</td></tr><tr><td><code>did-fail-load</code></td><td>加载失败，<a href="https://code.google.com/p/chromium/codesearch#chromium/src/net/base/net_error_list.h">错误码</a></td></tr><tr><td><code>did-fail-provisional-load</code></td><td>页面加载过程中，执行了<code>window.stop()</code></td></tr><tr><td><code>did-frame-finish-load</code></td><td></td></tr><tr><td><code>crashed</code></td><td>渲染进程崩溃或被结束时触发</td></tr><tr><td><code>render-process-gone</code></td><td>渲染进程意外失败时发出</td></tr><tr><td><code>plugin-crashed</code></td><td>有插件进程崩溃时触发</td></tr><tr><td><code>certificate-error</code></td><td>证书的链接验证失败</td></tr><tr><td><code>preload-error</code></td><td><code>preload.js</code>抛出错误</td></tr></tbody></table><h3 id="窗口关闭（包括意外关闭）"><a href="#窗口关闭（包括意外关闭）" class="headerlink" title="窗口关闭（包括意外关闭）"></a>窗口关闭（包括意外关闭）</h3><p>按触发顺序依次：（带window的是渲染进程中的）</p><ul><li>关闭之前：close</li><li>window.onbeforeunload</li><li>window.onunload</li><li>关闭之后：closed</li></ul><h3 id="文档-1"><a href="#文档-1" class="headerlink" title="文档"></a>文档</h3><ol><li><a href="https://www.electronjs.org/docs/api/browser-window">BrowserWindow</a>;</li><li><a href="https://www.electronjs.org/docs/api/web-contents">webContents</a>;</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Events/DOMContentLoaded">DOMContended</a></li></ol><h2 id="窗口的聚焦和失焦"><a href="#窗口的聚焦和失焦" class="headerlink" title="窗口的聚焦和失焦"></a>窗口的聚焦和失焦</h2><h3 id="聚焦"><a href="#聚焦" class="headerlink" title="聚焦"></a>聚焦</h3><h4 id="创建窗口时配置："><a href="#创建窗口时配置：" class="headerlink" title="创建窗口时配置："></a>创建窗口时配置：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @@code-renderer: runner</span></span><br><span class="line"><span class="comment">// @@code-props: &#123; hideRight: true, height:&#x27;150px&#x27; &#125;</span></span><br><span class="line"><span class="keyword">const</span> &#123; BrowserWindow &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> win = <span class="keyword">new</span> BrowserWindow();</span><br><span class="line">win.loadURL(<span class="string">&#x27;https://github.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> win2 = <span class="keyword">new</span> BrowserWindow(&#123;<span class="attr">x</span>:<span class="number">100</span>,<span class="attr">y</span>:<span class="number">100</span>&#125;)</span><br><span class="line">    win2.loadURL(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line">&#125;,<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p><code>focusable:true</code>  窗口便可聚焦，便可以使用聚焦的<code>api</code></p><p><code>focusable:false</code> 在 <code>Windows</code> 中设置 <code>focusable: false</code> 也意味着设置了<code>skipTaskbar: true</code>. 在 <code>Linux</code> 中设置 <code>focusable: false</code> 时窗口停止与 <code>wm</code> 交互, 并且窗口将始终置顶。</p><p>以下讨论的情况仅为<code>focusable:true</code>情况下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; BrowserWindow &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> win = <span class="keyword">new</span> BrowserWindow() <span class="comment">// focusable:true 为默认配置</span></span><br></pre></td></tr></table></figure><h4 id="关于聚焦的api"><a href="#关于聚焦的api" class="headerlink" title="关于聚焦的api"></a>关于聚焦的<code>api</code></h4><table><thead><tr><th>api</th><th>功能</th></tr></thead><tbody><tr><td><code>BrowserWindow.getFocusedWindow()</code></td><td>来获取聚焦的窗口</td></tr><tr><td><code>win.isFocused()</code></td><td>判断窗口是否聚焦</td></tr><tr><td><code>win.on(&#39;focus&#39;,cb)</code></td><td>来监听窗口是否聚焦</td></tr><tr><td><code>win.focus()</code></td><td>手动聚焦窗口</td></tr></tbody></table><h4 id="其他api副作用和聚焦有关的："><a href="#其他api副作用和聚焦有关的：" class="headerlink" title="其他api副作用和聚焦有关的："></a>其他<code>api</code>副作用和聚焦有关的：</h4><table><thead><tr><th>api</th><th>功能</th></tr></thead><tbody><tr><td><code>win.show()</code></td><td>显示窗口，并且聚焦于窗口</td></tr><tr><td><code>win.showInactive()</code></td><td>显示窗口，但是不会聚焦于窗口</td></tr></tbody></table><h3 id="失焦"><a href="#失焦" class="headerlink" title="失焦"></a>失焦</h3><h4 id="关于失焦的api"><a href="#关于失焦的api" class="headerlink" title="关于失焦的api"></a>关于失焦的<code>api</code></h4><table><thead><tr><th>api</th><th>功能</th></tr></thead><tbody><tr><td><code>win.blur()</code></td><td>取消窗口聚焦</td></tr><tr><td><code>win.on(&#39;blur&#39;,cb)</code></td><td>监听失焦</td></tr></tbody></table><h4 id="其他api副作用和失焦有关的："><a href="#其他api副作用和失焦有关的：" class="headerlink" title="其他api副作用和失焦有关的："></a>其他<code>api</code>副作用和失焦有关的：</h4><table><thead><tr><th>api</th><th>功能</th></tr></thead><tbody><tr><td><code>win.hide()</code></td><td>隐藏窗口，并且会触发失焦事件</td></tr></tbody></table><h2 id="窗口类型"><a href="#窗口类型" class="headerlink" title="窗口类型"></a>窗口类型</h2><h3 id="无边框窗口"><a href="#无边框窗口" class="headerlink" title="无边框窗口"></a>无边框窗口</h3><h4 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h4><p>无边框窗口是不带外壳（包括窗口边框、工具栏等），只含有网页内容的窗口</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p><code>Windows</code> <code>macOS</code> <code>Linux</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @@code-renderer: runner</span></span><br><span class="line"><span class="comment">// @@code-props: &#123; hideRight: true, height:&#x27;100px&#x27; &#125;</span></span><br><span class="line"><span class="keyword">const</span> &#123; BrowserWindow &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> win = <span class="keyword">new</span> BrowserWindow(&#123; <span class="attr">width</span>: <span class="number">800</span>, <span class="attr">height</span>: <span class="number">600</span>, <span class="attr">frame</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">win.loadURL(<span class="string">&#x27;https://github.com&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在<code>macOS</code>下，还有不同的实现方式，<a href="https://www.electronjs.org/docs/api/frameless-window#macos-%E4%B8%8A%E7%9A%84%E5%85%B6%E4%BB%96%E6%96%B9%E6%A1%88">完整文档</a></p><h4 id="macOS-下独有的无边框"><a href="#macOS-下独有的无边框" class="headerlink" title="macOS 下独有的无边框"></a><code>macOS</code> 下独有的无边框</h4><ul><li>配置<code>titleBarStyle: &#39;hidden&#39;</code><blockquote><p>返回一个隐藏标题栏的全尺寸内容窗口，在左上角仍然有标准的窗口控制按钮（俗称“红绿灯”）</p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @@code-renderer: runner</span></span><br><span class="line"><span class="comment">// @@code-props: &#123; hideRight: true, height:&#x27;100px&#x27; &#125;</span></span><br><span class="line"><span class="comment">// 创建一个无边框的窗口</span></span><br><span class="line"><span class="keyword">const</span> &#123; BrowserWindow &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> win = <span class="keyword">new</span> BrowserWindow(&#123; <span class="attr">titleBarStyle</span>: <span class="string">&#x27;hidden&#x27;</span> &#125;)</span><br><span class="line">win.loadURL(<span class="string">&#x27;https://github.com&#x27;</span>)</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src= "/img/loading.gif" data-lazy-src="http://mei160.cn/images/window-type-frame.gif" alt="window-type-frame"></p><ul><li>配置<code>titleBarStyle: &#39;hiddenInset&#39;</code><blockquote><p>返回一个另一种隐藏了标题栏的窗口，其中控制按钮到窗口边框的距离更大。</p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @@code-renderer: runner</span></span><br><span class="line"><span class="comment">// @@code-props: &#123; hideRight: true, height:&#x27;100px&#x27; &#125;</span></span><br><span class="line"><span class="comment">// 创建一个无边框的窗口</span></span><br><span class="line"><span class="keyword">const</span> &#123; BrowserWindow &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> win = <span class="keyword">new</span> BrowserWindow(&#123; <span class="attr">titleBarStyle</span>: <span class="string">&#x27;hiddenInset&#x27;</span> &#125;)</span><br><span class="line">win.loadURL(<span class="string">&#x27;https://github.com&#x27;</span>)</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src= "/img/loading.gif" data-lazy-src="http://mei160.cn/images/window-type-frame2.gif" alt="window-type-frame2"></p><h5 id="1-1-0-3-3-配置titleBarStyle-39-customButtonsOnHover-39"><a href="#1-1-0-3-3-配置titleBarStyle-39-customButtonsOnHover-39" class="headerlink" title="1.1.0.3.3. 配置titleBarStyle: &#39;customButtonsOnHover&#39;"></a>1.1.0.3.3. 配置<code>titleBarStyle: &#39;customButtonsOnHover&#39;</code></h5><p>效果如下：<br><img src= "/img/loading.gif" data-lazy-src="http://mei160.cn/images/window-type-frame3.gif" alt="window-type-frame2"></p><h4 id="无边框窗口常见的问题"><a href="#无边框窗口常见的问题" class="headerlink" title="无边框窗口常见的问题"></a>无边框窗口常见的问题</h4><ul><li>窗口顶部无法拖拽的问题<br>默认情况下, 无边框窗口是不可拖拽的。 应用程序需要在 <code>CSS</code> 中指定 <code>-webkit-app-region: drag</code> 来告诉 <code>Electron</code> 哪些区域是可拖拽的（如操作系统的标准标题栏），在可拖拽区域内部使用 <code>-webkit-app-region: no-drag</code> 则可以将其中部分区域排除。 请注意, 当前只支持矩形形状。<a href="https://www.electronjs.org/docs/api/frameless-window#%E5%8F%AF%E6%8B%96%E6%8B%BD%E5%8C%BA">完整文档</a></li></ul><p>使用<code>-webkit-app-region: drag</code> 来实现拖拽，但是会导致内部的<code>click</code>事件失效。这个时候可以将需要<code>click</code>元素设置为<code>-webkit-app-region: no-drag</code>。具体的细节可看<a href="https://github.com/electron/electron/issues/3647">issues</a></p><p>为了不影响窗口，这里拖拽的代码，应该在<code>preload</code>触发。<br>核心代码：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在顶部插入一个可以移动的dom</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initTopDrag</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> topDiv = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>) <span class="comment">// 创建节点</span></span><br><span class="line">  topDiv.style.position = <span class="string">&#x27;fixed&#x27;</span> <span class="comment">// 一直在顶部</span></span><br><span class="line">  topDiv.style.top = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">  topDiv.style.left = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">  topDiv.style.height = <span class="string">&#x27;20px&#x27;</span> <span class="comment">// 顶部20px才可拖动</span></span><br><span class="line">  topDiv.style.width = <span class="string">&#x27;100%&#x27;</span> <span class="comment">// 宽度100%</span></span><br><span class="line">  topDiv.style.zIndex = <span class="string">&#x27;9999&#x27;</span> <span class="comment">// 悬浮于最外层</span></span><br><span class="line">  topDiv.style.pointerEvents = <span class="string">&#x27;none&#x27;</span> <span class="comment">// 用于点击穿透</span></span><br><span class="line">  <span class="comment">// @ts-ignore</span></span><br><span class="line">  topDiv.style[<span class="string">&#x27;-webkit-user-select&#x27;</span>] = <span class="string">&#x27;none&#x27;</span> <span class="comment">// 禁止选择文字</span></span><br><span class="line">  <span class="comment">// @ts-ignore</span></span><br><span class="line">  topDiv.style[<span class="string">&#x27;-webkit-app-region&#x27;</span>] = <span class="string">&#x27;drag&#x27;</span> <span class="comment">// 拖动</span></span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(topDiv) <span class="comment">// 添加节点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="function"><span class="keyword">function</span> <span class="title">onDOMContentLoaded</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    initTopDrag()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>试一试</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @@code-renderer: runner</span></span><br><span class="line"><span class="comment">// @@code-props: &#123; hideRight: true, height:&#x27;200px&#x27; &#125;</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; BrowserWindow &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> BaseWebPreferences = &#123;</span><br><span class="line">  nodeIntegration: <span class="literal">true</span>,</span><br><span class="line">  preload: path.resolve(__dirname, <span class="string">&#x27;./windowType.js&#x27;</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主窗口代码</span></span><br><span class="line"><span class="keyword">const</span> win = <span class="keyword">new</span> BrowserWindow(&#123; <span class="attr">webPreferences</span>: BaseWebPreferences, <span class="attr">frame</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">win.loadURL(<span class="string">&#x27;https://github.com&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="父子窗口"><a href="#父子窗口" class="headerlink" title="父子窗口"></a>父子窗口</h3><p>子窗口始终在父窗口之上，在 <strong>窗口之间通信</strong> 章节中介绍到父子窗口之间的通信，<a href="./index.html#/browser/communication"><strong>窗口之间通信</strong></a>章节</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @@code-renderer: runner</span></span><br><span class="line"><span class="comment">// @@code-props: &#123; hideRight: true, height:&#x27;100px&#x27; &#125;</span></span><br><span class="line"><span class="keyword">const</span> &#123; BrowserWindow &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> top = <span class="keyword">new</span> BrowserWindow()</span><br><span class="line"><span class="keyword">let</span> child = <span class="keyword">new</span> BrowserWindow(&#123; <span class="attr">parent</span>: top &#125;)</span><br><span class="line">child.show()</span><br><span class="line">top.show()</span><br></pre></td></tr></table></figure><h3 id="模态窗口"><a href="#模态窗口" class="headerlink" title="模态窗口"></a>模态窗口</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;窗口&quot;&gt;&lt;a href=&quot;#窗口&quot; class=&quot;headerlink&quot; title=&quot;窗口&quot;&gt;&lt;/a&gt;窗口&lt;/h1&gt;&lt;h2 id=&quot;主窗口隐藏和恢复&quot;&gt;&lt;a href=&quot;#主窗口隐藏和恢复&quot; class=&quot;headerlink&quot; title=&quot;主窗口隐藏和恢复&quot;</summary>
      
    
    
    
    <category term="electron" scheme="https://hard-workingrookie.github.io/categories/electron/"/>
    
    
    <category term="electron" scheme="https://hard-workingrookie.github.io/tags/electron/"/>
    
  </entry>
  
  <entry>
    <title>electron应用</title>
    <link href="https://hard-workingrookie.github.io/2021/01/07/electron%E5%BA%94%E7%94%A8/"/>
    <id>https://hard-workingrookie.github.io/2021/01/07/electron%E5%BA%94%E7%94%A8/</id>
    <published>2021-01-07T07:30:23.000Z</published>
    <updated>2021-03-09T14:08:41.531Z</updated>
    
    <content type="html"><![CDATA[<h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><h2 id="Dialog与文件选择"><a href="#Dialog与文件选择" class="headerlink" title="Dialog与文件选择"></a>Dialog与文件选择</h2><p>显示系统对话框, 提供了消息提示、消息提示操作以及选择文件、保存文件等操作.</p><h3 id="消息提示-dialog-showMessageBoxSync"><a href="#消息提示-dialog-showMessageBoxSync" class="headerlink" title="消息提示 dialog.showMessageBoxSync"></a>消息提示 dialog.showMessageBoxSync</h3><h4 id="消息提示"><a href="#消息提示" class="headerlink" title="消息提示"></a>消息提示</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @@code-renderer: runner</span></span><br><span class="line"><span class="comment">// @@code-props: &#123; height: &#x27;130px&#x27; &#125;</span></span><br><span class="line"><span class="keyword">const</span> &#123; dialog &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line">dialog.showMessageBoxSync(&#123;</span><br><span class="line">  type: <span class="string">&#x27;info&#x27;</span>,</span><br><span class="line">  title: <span class="string">&#x27;这里是标题&#x27;</span>,</span><br><span class="line">  message: <span class="string">&#x27;提示内容&#x27;</span>,</span><br><span class="line">  detail: <span class="string">&#x27;额外信息&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="消息提示与确认"><a href="#消息提示与确认" class="headerlink" title="消息提示与确认"></a>消息提示与确认</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @@code-renderer: runner</span></span><br><span class="line"><span class="comment">// @@code-props: &#123; height: &#x27;240px&#x27; &#125;</span></span><br><span class="line"><span class="keyword">const</span> &#123; dialog &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> res = dialog.showMessageBoxSync(&#123;</span><br><span class="line">  type: <span class="string">&#x27;info&#x27;</span>,</span><br><span class="line">  title: <span class="string">&#x27;这里是标题&#x27;</span>,</span><br><span class="line">  message: <span class="string">&#x27;提示内容&#x27;</span>,</span><br><span class="line">  detail: <span class="string">&#x27;额外信息&#x27;</span>,</span><br><span class="line">  cancelId: <span class="number">1</span>, <span class="comment">// 按esc默认点击索引按钮</span></span><br><span class="line">  defaultId: <span class="number">0</span>, <span class="comment">// 默认高亮的按钮下标</span></span><br><span class="line">  buttons: [<span class="string">&#x27;确认按钮&#x27;</span>, <span class="string">&#x27;取消按钮&#x27;</span>], <span class="comment">// 按钮按索引从右往左排序</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;操作结果&#x27;</span>, res, res === <span class="number">0</span> ? <span class="string">&#x27;点击确认按钮&#x27;</span> : <span class="string">&#x27;点击取消按钮&#x27;</span>) <span class="comment">// 根据按钮数组中的下标来判断</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;操作中还有个checkboxLabel的单选框需要使用showMessageBox api才可以获取到返回值&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="API说明"><a href="#API说明" class="headerlink" title="API说明"></a>API说明</h4><h4 id="dialog-showMessageBoxSync-browserWindow-options"><a href="#dialog-showMessageBoxSync-browserWindow-options" class="headerlink" title="dialog.showMessageBoxSync(browserWindow, options)"></a>dialog.showMessageBoxSync(browserWindow, options)</h4><p>显示一个消息框，它将阻止进程，直到消息框被关闭。返回值为点击的按钮的索引。</p><p>参数：</p><ul><li><p><code>browserWindow</code></p><p>可以指定一个父窗口，作为模态窗口附加到该窗口。</p></li><li><p><code>options</code></p><ul><li><p><code>type</code>: String (可选) - “none” ｜ “info” ｜ “error” ｜ “question” 不同的type提示的图标不同；</p></li><li><p><code>title</code>: String (可选) - message box 的标题，一些平台不显示，建议使用message和detail；</p></li><li><p><code>message</code>:  String - message box 的内容.</p></li><li><p><code>detail</code>: String (可选) - 额外信息</p></li><li><p><code>buttons</code> String[] - 字符串按钮数组，按钮按索引从右往左排序，如果未指定默认有一个”OK”的按钮。</p></li><li><p><code>defaultId</code>: Integer (可选) - 默认高亮的按钮下标，回车的时候自动选中该项</p></li><li><p><code>cancelId</code>: Integer (可选)  按esc默认点击索引按钮</p></li></ul></li></ul><p>返回值类型：</p><ul><li><code>number</code>: 所点击的按钮的索引</li></ul><h4 id="dialog-showMessageBox-browserWindow-options"><a href="#dialog-showMessageBox-browserWindow-options" class="headerlink" title="dialog.showMessageBox(browserWindow, options)"></a>dialog.showMessageBox(browserWindow, options)</h4><p>与dialog.showMessageBoxSync类似，不同点在于：</p><ol><li>这是一个异步方法，返回值为Promise类型；</li><li>显示的对话框可以指定一个复选框，返回值中也增加了对应的字段；</li></ol><p>下面是带复选框的示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @@code-renderer: runner</span></span><br><span class="line"><span class="comment">// @@code-props: &#123; height: &#x27;280px&#x27; &#125;</span></span><br><span class="line"><span class="keyword">const</span> &#123; dialog &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> res = dialog.showMessageBox(&#123;</span><br><span class="line">  type: <span class="string">&#x27;info&#x27;</span>,</span><br><span class="line">  title: <span class="string">&#x27;这里是标题&#x27;</span>,</span><br><span class="line">  message: <span class="string">&#x27;提示内容&#x27;</span>,</span><br><span class="line">  detail: <span class="string">&#x27;额外信息&#x27;</span>,</span><br><span class="line">  cancelId: <span class="number">1</span>, <span class="comment">// 按esc默认点击索引按钮</span></span><br><span class="line">  defaultId: <span class="number">0</span>, <span class="comment">// 默认高亮的按钮下标</span></span><br><span class="line">  checkboxLabel: <span class="string">&#x27;单选框内容&#x27;</span>,</span><br><span class="line">  checkboxChecked: <span class="literal">false</span>, <span class="comment">// 是否选中单选框</span></span><br><span class="line">  buttons: [<span class="string">&#x27;确认按钮&#x27;</span>, <span class="string">&#x27;取消按钮&#x27;</span>], <span class="comment">// 按钮按索引从右往左排序</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;操作结果 promise&#x27;</span>, res) <span class="comment">// 返回一个promise可以通过它判断结果</span></span><br></pre></td></tr></table></figure><h3 id="选择文件和文件夹"><a href="#选择文件和文件夹" class="headerlink" title="选择文件和文件夹"></a>选择文件和文件夹</h3><h4 id="选择文件实例"><a href="#选择文件实例" class="headerlink" title="选择文件实例"></a>选择文件实例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @@code-renderer: runner</span></span><br><span class="line"><span class="comment">// @@code-props: &#123; height: &#x27;320px&#x27; &#125;</span></span><br><span class="line"><span class="keyword">const</span> &#123; dialog, app &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> res = dialog.showOpenDialogSync(&#123;</span><br><span class="line">  title: <span class="string">&#x27;对话框窗口的标题&#x27;</span>,</span><br><span class="line">  <span class="comment">// 默认打开的路径，比如这里默认打开下载文件夹</span></span><br><span class="line">  defaultPath: app.getPath(<span class="string">&#x27;downloads&#x27;</span>), </span><br><span class="line">  buttonLabel: <span class="string">&#x27;确认按钮文案&#x27;</span>,</span><br><span class="line">  <span class="comment">// 限制能够选择的文件类型</span></span><br><span class="line">  filters: [</span><br><span class="line">    <span class="comment">// &#123; name: &#x27;Images&#x27;, extensions: [&#x27;jpg&#x27;, &#x27;png&#x27;, &#x27;gif&#x27;] &#125;,</span></span><br><span class="line">    <span class="comment">// &#123; name: &#x27;Movies&#x27;, extensions: [&#x27;mkv&#x27;, &#x27;avi&#x27;, &#x27;mp4&#x27;] &#125;,</span></span><br><span class="line">    <span class="comment">// &#123; name: &#x27;Custom File Type&#x27;, extensions: [&#x27;as&#x27;] &#125;,</span></span><br><span class="line">    <span class="comment">// &#123; name: &#x27;All Files&#x27;, extensions: [&#x27;*&#x27;] &#125;, </span></span><br><span class="line">  ],</span><br><span class="line">  properties: [ <span class="string">&#x27;openFile&#x27;</span>, <span class="string">&#x27;openDirectory&#x27;</span>, <span class="string">&#x27;multiSelections&#x27;</span>, <span class="string">&#x27;showHiddenFiles&#x27;</span> ],</span><br><span class="line">  message: <span class="string">&#x27;mac文件选择器title&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;res&#x27;</span>, res)</span><br></pre></td></tr></table></figure><h3 id="API说明-1"><a href="#API说明-1" class="headerlink" title="API说明"></a>API说明</h3><p><code>dialog.showOpenDialogSync(browserWindow,options)</code></p><p>参数：</p><p><code>options</code></p><ul><li><p><code>defaultPath</code>  String (可选) - 设置对话框默认打开哪个路径，需要设置一个有效路径否则将不生效。</p></li><li><p><code>buttonLabel</code>  String (可选) - 确认按钮的文案, 当为空时, 将使用默认标签</p></li><li><p><code>filters</code> 默认所有文件类型都可以选择，设置后,只能选择允许的文件类型</p></li><li><p><code>properties</code> String[] (可选)</p><ul><li><code>openFile</code> - 允许选择文件</li><li><code>openDirectory</code> - 允许选择文件夹</li><li><code>multiSelections</code> - 允许多选。</li><li><code>showHiddenFiles</code> - 显示对话框中的隐藏文件</li></ul></li></ul><ul><li><code>message</code> String (可选) -  mac文件选择器的title</li></ul><blockquote><p>tips: 尝试修改options中的参数来查看效果；</p></blockquote><p>返回值类型：</p><p><code>String[] | undefined</code> - 用户选择的文件或文件夹路径;如果取消对话框，则返回undefined</p><p><a href="https://www.electronjs.org/docs/api/dialog#dialogshowopendialogsyncbrowserwindow-options">完整API解释参考文档</a></p><h3 id="保存文件"><a href="#保存文件" class="headerlink" title="保存文件"></a>保存文件</h3><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @@code-renderer: runner</span></span><br><span class="line"><span class="comment">// @@code-props: &#123; height: &#x27;300px&#x27; &#125;</span></span><br><span class="line"><span class="keyword">const</span> &#123; dialog &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> res = dialog.showSaveDialogSync(&#123;</span><br><span class="line">  title: <span class="string">&#x27;对话框窗口的标题&#x27;</span>,</span><br><span class="line">  defaultPath: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 打开文件选择器的哪个路径 需要输入一个有效路径</span></span><br><span class="line">  buttonLabel: <span class="string">&#x27;确认按钮文案&#x27;</span>,</span><br><span class="line">  <span class="comment">// 限制能够选择的文件为某些类型</span></span><br><span class="line">  filters: [</span><br><span class="line">    <span class="comment">// &#123; name: &#x27;Images&#x27;, extensions: [&#x27;jpg&#x27;, &#x27;png&#x27;, &#x27;gif&#x27;] &#125;,</span></span><br><span class="line">    <span class="comment">// &#123; name: &#x27;Movies&#x27;, extensions: [&#x27;mkv&#x27;, &#x27;avi&#x27;, &#x27;mp4&#x27;] &#125;,</span></span><br><span class="line">    <span class="comment">// &#123; name: &#x27;Custom File Type&#x27;, extensions: [&#x27;as&#x27;] &#125;,</span></span><br><span class="line">    <span class="comment">// &#123; name: &#x27;All Files&#x27;, extensions: [&#x27;*&#x27;] &#125;, </span></span><br><span class="line">  ],</span><br><span class="line">  nameFieldLabel: <span class="string">&#x27;替换文件&#x27;</span>, <span class="comment">// “文件名”文本字段前面显示的文本自定义标签</span></span><br><span class="line">  showsTagField: <span class="literal">true</span>, <span class="comment">// 显示标签输入框，默认值为true</span></span><br><span class="line">  properties: [ <span class="string">&#x27;showHiddenFiles&#x27;</span> ],</span><br><span class="line">  message: <span class="string">&#x27;mac文件选择器title&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;res&#x27;</span>, res)</span><br></pre></td></tr></table></figure><h4 id="API说明-2"><a href="#API说明-2" class="headerlink" title="API说明"></a>API说明</h4><p><code>dialog.showSaveDialogSync(browserWindow,options)</code></p><p>参数：</p><p><code>options</code></p><ul><li><p><code>defaultPath</code>  String (可选) - 设置对话框默认打开哪个路径，需要设置一个有效路径否则将不生效。</p></li><li><p><code>buttonLabel</code>  String (可选) - 确认按钮的文案, 当为空时, 将使用默认标签</p></li><li><p><code>filters</code> 默认所有文件类型都可以选择，设置后,只能选择允许的文件类型</p></li><li><p><code>properties</code> String[] (可选)</p><ul><li><code>openFile</code> - 允许选择文件</li><li><code>openDirectory</code> - 允许选择文件夹</li><li><code>multiSelections</code> - 允许多选。</li><li><code>showHiddenFiles</code> - 显示对话框中的隐藏文件</li></ul></li></ul><ul><li><code>message</code> String (可选) -  mac文件选择器的title</li></ul><p>返回值类型：</p><p><code>String[] | undefined</code> - 用户选择的文件或文件夹路径;如果取消对话框，则返回undefined；</p><p>完整API解释参考<a href="https://www.electronjs.org/docs/api/dialog#dialogshowsavedialogsyncbrowserwindow-options">文档</a></p><h4 id="不同场景表现"><a href="#不同场景表现" class="headerlink" title="不同场景表现"></a>不同场景表现</h4><ol><li><p>选择了一个存在的文件 </p><p> 提示”<strong>文件夹中已有相同名称的文件或文件夹。替换它将覆盖其当前内容。</strong>“，点击确认后返回该文件地址</p></li><li><p>选择了一个不存在的文件</p><p> 返回该不存在的文件地址</p></li></ol><h3 id="错误信息弹窗"><a href="#错误信息弹窗" class="headerlink" title="错误信息弹窗"></a>错误信息弹窗</h3><h2 id="下载管理器"><a href="#下载管理器" class="headerlink" title="下载管理器"></a>下载管理器</h2><h3 id="下载管理器-1"><a href="#下载管理器-1" class="headerlink" title="下载管理器"></a>下载管理器</h3><p>点击“试一试”按钮体验一下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @@code-renderer: runner</span></span><br><span class="line"><span class="comment">// @@code-props: &#123;hideRight: true, mProcess: false&#125;</span></span><br><span class="line"><span class="keyword">const</span> &#123;ipcRenderer&#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line">ipcRenderer.invoke(<span class="string">&#x27;openDownloadManager&#x27;</span>, <span class="string">&#x27;/download-manager/demo&#x27;</span>)</span><br></pre></td></tr></table></figure><p>文件下载是我们开发中比较常见的业务需求，比如：导出 excel。</p><p>web 应用文件下载存在一些局限性，通常是让后端将响应的头信息改成 <code>Content-Disposition: attachment; filename=xxx.pdf</code>，触发浏览器的下载行为。</p><p>在 electron 中的下载行为，都会触发 session 的 <a href="https://www.electronjs.org/docs/api/session#instance-events">will-download</a> 事件。在该事件里面可以获取到 <a href="https://www.electronjs.org/docs/api/download-item">downloadItem</a> 对象，通过 <a href="https://www.electronjs.org/docs/api/download-item">downloadItem</a> 对象实现一个简单的文件下载管理器：</p><p><img src= "/img/loading.gif" data-lazy-src="http://mei160.cn/images/demo.gif" alt="效果图"></p><h3 id="如何触发下载"><a href="#如何触发下载" class="headerlink" title="如何触发下载"></a>如何触发下载</h3><p>由于 electron 是基于 chromium 实现的，通过调用 webContents 的 <a href="https://www.electronjs.org/docs/api/web-contents#contentsdownloadurlurl">downloadURL</a> 方法，相当于调用了 chromium 底层实现的下载，会忽略响应头信息，触发 <a href="https://www.electronjs.org/docs/api/session#instance-events">will-download</a> 事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 触发下载</span></span><br><span class="line">win.webContents.downloadURL(url)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听 will-download</span></span><br><span class="line">session.defaultSession.on(<span class="string">&#x27;will-download&#x27;</span>, <span class="function">(<span class="params">event, item, webContents</span>) =&gt;</span> &#123;&#125;)</span><br></pre></td></tr></table></figure><h3 id="下载流程图"><a href="#下载流程图" class="headerlink" title="下载流程图"></a>下载流程图</h3><p><img src= "/img/loading.gif" data-lazy-src="http://mei160.cn/images/flow_chart.png" alt="流程图"></p><h3 id="功能设计"><a href="#功能设计" class="headerlink" title="功能设计"></a>功能设计</h3><p>在上面的效果图中，实现的简单文件下载管理器功能包含：</p><ul><li>设置保存路径</li><li>暂停/恢复和取消</li><li>下载进度</li><li>下载速度</li><li>下载完成</li><li>打开文件和打开文件所在位置</li><li>文件图标</li><li>下载记录</li></ul><h4 id="设置保存路径"><a href="#设置保存路径" class="headerlink" title="设置保存路径"></a>设置保存路径</h4><p>如果没有设置保存路径，electron 会自动弹出系统的保存对话框。不想使用系统的保存对话框，可以使用 <a href="https://www.electronjs.org/docs/api/download-item#downloaditemsetsavepathpath">setSavePath</a> 方法，当有重名文件时，会直接覆盖下载。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">item.setSavePath(path)</span><br></pre></td></tr></table></figure><p>为了更好的用户体验，可以让用户自己选择保存位置操作。当点击位置输入框时，渲染进程通过 ipc 与主进程通信，打开系统文件选择对话框。</p><p><img src= "/img/loading.gif" data-lazy-src="http://mei160.cn/images/select_path.gif" alt="选择保存位置"></p><p>主进程实现代码：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打开文件选择框</span></span><br><span class="line"><span class="comment"> * @param oldPath - 上一次打开的路径</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> openFileDialog = <span class="keyword">async</span> (oldPath: <span class="built_in">string</span> = app.getPath(<span class="string">&#x27;downloads&#x27;</span>)) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!win) <span class="keyword">return</span> oldPath</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; canceled, filePaths &#125; = <span class="keyword">await</span> dialog.showOpenDialog(win, &#123;</span><br><span class="line">    title: <span class="string">&#x27;选择保存位置&#x27;</span>,</span><br><span class="line">    properties: [<span class="string">&#x27;openDirectory&#x27;</span>, <span class="string">&#x27;createDirectory&#x27;</span>],</span><br><span class="line">    defaultPath: oldPath,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> !canceled ? filePaths[<span class="number">0</span>] : oldPath</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ipcMain.handle(<span class="string">&#x27;openFileDialog&#x27;</span>, <span class="function">(<span class="params">event, oldPath?: <span class="built_in">string</span></span>) =&gt;</span> openFileDialog(oldPath))</span><br></pre></td></tr></table></figure><p>渲染进程代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="keyword">await</span> ipcRenderer.invoke(<span class="string">&#x27;openFileDialog&#x27;</span>, <span class="string">&#x27;PATH&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(path)</span><br></pre></td></tr></table></figure><h4 id="暂停-恢复和取消"><a href="#暂停-恢复和取消" class="headerlink" title="暂停/恢复和取消"></a>暂停/恢复和取消</h4><p>拿到 <a href="https://www.electronjs.org/docs/api/download-item">downloadItem</a> 后，暂停、恢复和取消分别调用 <code>pause</code>、<code>resume</code> 和 <code>cancel</code> 方法。当我们要删除列表中正在下载的项，需要先调用 cancel 方法取消下载。</p><h4 id="下载进度"><a href="#下载进度" class="headerlink" title="下载进度"></a>下载进度</h4><p>在 <a href="https://www.electronjs.org/docs/api/download-item">downloadItem</a> 中监听 updated 事件，可以实时获取到已下载的字节数据，来计算下载进度和每秒下载的速度。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算下载进度</span></span><br><span class="line"><span class="keyword">const</span> progress = item.getReceivedBytes() / item.getTotalBytes()</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="http://mei160.cn/images/download_progress.png" alt="下载进度"></p><p>在下载的时候，想在 Mac 系统的程序坞和 Windows 系统的任务栏展示下载信息，比如：</p><ul><li>下载数：通过 app 的 <a href="https://www.electronjs.org/docs/api/app#appbadgecount-linux-macos">badgeCount</a> 属性设置，当为 0 时，不会显示。也可以通过 dock 的 <a href="https://www.electronjs.org/docs/api/app#appsetbadgecountcount-linux-macos">setBadge</a> 方法设置，该方法支持的是字符串，如果不要显示，需要设置为 ‘’。</li><li>下载进度：通过窗口的 <a href="https://www.electronjs.org/docs/api/browser-window#winsetprogressbarprogress-options">setProgressBar</a> 方法设置。</li></ul><blockquote><p>由于 Mac 和 Windows 系统差异，下载数仅在 Mac 系统中生效。加上 process.platform === ‘darwin’ 条件，避免在非 Mac、Linux 系统下出现异常错误。</p></blockquote><p>下载进度（Windows 系统任务栏、Mac 系统程序坞）显示效果：</p><p><img src= "/img/loading.gif" data-lazy-src="http://mei160.cn/images/windows_progress.png" alt="windows 进度"></p><p><img src= "/img/loading.gif" data-lazy-src="http://mei160.cn/images/mac_download_progress.png" alt="mac 程序坞"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mac 程序坞显示下载数：</span></span><br><span class="line"><span class="comment">// 方式一</span></span><br><span class="line">app.badgeCount = <span class="number">1</span></span><br><span class="line"><span class="comment">// 方式二</span></span><br><span class="line">app.dock.setBadge(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// mac 程序坞、windows 任务栏显示进度</span></span><br><span class="line">win.setProgressBar(progress)</span><br></pre></td></tr></table></figure><h4 id="下载速度"><a href="#下载速度" class="headerlink" title="下载速度"></a>下载速度</h4><p>由于 <a href="https://www.electronjs.org/docs/api/download-item">downloadItem</a> 没有直接为我们提供方法或属性获取下载速度，需要自己实现。</p><blockquote><p>思路：在 updated 事件里通过 getReceivedBytes 方法拿到本次下载的字节数据减去上一次下载的字节数据。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 记录上一次下载的字节数据</span></span><br><span class="line"><span class="keyword">let</span> prevReceivedBytes = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">item.on(<span class="string">&#x27;updated&#x27;</span>, <span class="function">(<span class="params">e, state</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> receivedBytes = item.getReceivedBytes()</span><br><span class="line">  <span class="comment">// 计算每秒下载的速度</span></span><br><span class="line">  downloadItem.speed = receivedBytes - prevReceivedBytes</span><br><span class="line">  prevReceivedBytes = receivedBytes</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是，updated 事件执行的时间约 500ms 一次。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="http://mei160.cn/images/updated_event.png" alt="updated_event"></p><h4 id="下载完成"><a href="#下载完成" class="headerlink" title="下载完成"></a>下载完成</h4><p>当一个文件下载完成、中断或者被取消，需要通知渲染进程修改状态，通过监听 <a href="https://www.electronjs.org/docs/api/download-item">downloadItem</a> 的 done 事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">item.on(<span class="string">&#x27;done&#x27;</span>, <span class="function">(<span class="params">e, state</span>) =&gt;</span> &#123;</span><br><span class="line">  downloadItem.state = state</span><br><span class="line">  downloadItem.receivedBytes = item.getReceivedBytes()</span><br><span class="line">  downloadItem.lastModifiedTime = item.getLastModifiedTime()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通知渲染进程，更新下载状态</span></span><br><span class="line">  webContents.send(<span class="string">&#x27;downloadItemDone&#x27;</span>, downloadItem)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="打开文件和打开文件所在位置"><a href="#打开文件和打开文件所在位置" class="headerlink" title="打开文件和打开文件所在位置"></a>打开文件和打开文件所在位置</h4><p>使用 electron 的 shell 模块来实现打开文件（<a href="https://www.electronjs.org/docs/api/shell#shellopenpathpath">openPath</a>）和打开文件所在位置（<a href="https://www.electronjs.org/docs/api/shell#shellshowiteminfolderfullpath">showItemInFolder</a>）。</p><blockquote><p>由于 openPath 方法支持返回值 <code>Promise&lt;string&gt;</code>，当不支持打开的文件，系统会有相应的提示，而 showItemInFolder 方法返回值是 <code>void</code>。如果需要更好的用户体验，可使用 nodejs 的 fs 模块，先检查文件是否存在。</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开文件</span></span><br><span class="line"><span class="keyword">const</span> openFile = (path: <span class="built_in">string</span>): <span class="function"><span class="params">boolean</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!fs.existsSync(path)) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  shell.openPath(path)</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开文件所在位置</span></span><br><span class="line"><span class="keyword">const</span> openFileInFolder = (path: <span class="built_in">string</span>): <span class="function"><span class="params">boolean</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!fs.existsSync(path)) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  shell.showItemInFolder(path)</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文件图标"><a href="#文件图标" class="headerlink" title="文件图标"></a>文件图标</h4><p>很方便的是使用 app 模块的 <a href="https://www.electronjs.org/docs/api/app#appgetfileiconpath-options">getFileIcon</a> 方法来获取系统关联的文件图标，返回的是 <code>Promise&lt;NativeImage&gt;</code> 类型，我们可以用 toDataURL 方法转换成 base64，不需要我们去处理不同文件类型显示不同的图标。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getFileIcon = <span class="keyword">async</span> (path: <span class="built_in">string</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> iconDefault = <span class="string">&#x27;./icon_default.png&#x27;</span></span><br><span class="line">  <span class="keyword">if</span> (!path) <span class="built_in">Promise</span>.resolve(iconDefault)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> icon = <span class="keyword">await</span> app.getFileIcon(path, &#123;</span><br><span class="line">    size: <span class="string">&#x27;normal&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> icon.toDataURL()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="下载记录"><a href="#下载记录" class="headerlink" title="下载记录"></a>下载记录</h4><p>随着下载的历史数据越来越多，使用 <a href="https://github.com/sindresorhus/electron-store">electron-store</a> 将下载记录保存在本地。</p><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><p><strong>协议自动唤起应用与自定义协议</strong></p><h3 id="协议-从网页端唤起Electron应用"><a href="#协议-从网页端唤起Electron应用" class="headerlink" title="协议: 从网页端唤起Electron应用"></a>协议: 从网页端唤起Electron应用</h3><h4 id="协议唤起示例"><a href="#协议唤起示例" class="headerlink" title="协议唤起示例:"></a>协议唤起示例:</h4><p><img src= "/img/loading.gif" data-lazy-src="http://mei160.cn/images/wakeUp.jpg?height=200"></p><h4 id="什么是协议"><a href="#什么是协议" class="headerlink" title="什么是协议"></a>什么是协议</h4><p>electron注册的协议, electron会将协议注册到系统的协议列表中，它是系统层级的API，只能在当前系统下使用, 其他未注册协议的电脑不能识别。</p><p>Electron的app模块提供了一些处理协议的方法, 这些方法允许您设置协议和取消协议, 来让你的应用成为默认的应用程序。</p><h4 id="协议的作用"><a href="#协议的作用" class="headerlink" title="协议的作用"></a>协议的作用</h4><p>注册一个协议到系统协议中, 当通过其他应用/浏览器网页端**打开新协议的链接时，浏览器会检测该协议有没有在系统协议中, 如果该协议注册过，然后唤起协议的默认处理程序(我们的应用)**。</p><h4 id="注册协议-app-setAsDefaultProtocolClient"><a href="#注册协议-app-setAsDefaultProtocolClient" class="headerlink" title="注册协议: app.setAsDefaultProtocolClient"></a>注册协议: app.setAsDefaultProtocolClient</h4><p>协议需要在ready事件后注册，具体代码如下.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @@code-renderer: runner</span></span><br><span class="line"><span class="comment">// @@code-props: &#123; height: &#x27;400px&#x27; &#125;</span></span><br><span class="line"><span class="comment">// 注册自定义协议</span></span><br><span class="line"><span class="keyword">const</span> &#123; app &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册自定义协议</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setDefaultProtocol</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> agreement = <span class="string">&#x27;electron-playground-code&#x27;</span> <span class="comment">// 自定义协议名</span></span><br><span class="line">  <span class="keyword">let</span> isSet = <span class="literal">false</span> <span class="comment">// 是否注册成功</span></span><br><span class="line"></span><br><span class="line">  app.removeAsDefaultProtocolClient(agreement) <span class="comment">// 每次运行都删除自定义协议 然后再重新注册</span></span><br><span class="line">  <span class="comment">// 开发模式下在window运行需要做兼容</span></span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">&#x27;development&#x27;</span> &amp;&amp; process.platform === <span class="string">&#x27;win32&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 设置electron.exe 和 app的路径</span></span><br><span class="line">    isSet = app.setAsDefaultProtocolClient(agreement, process.execPath, [</span><br><span class="line">      path.resolve(process.argv[<span class="number">1</span>]),</span><br><span class="line">    ])</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    isSet = app.setAsDefaultProtocolClient(agreement)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;是否注册成功&#x27;</span>, isSet)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setDefaultProtocol()</span><br></pre></td></tr></table></figure><h4 id="使用协议"><a href="#使用协议" class="headerlink" title="使用协议"></a>使用协议</h4><p>使用方式: 在浏览器地址栏输入注册好的协议，即可唤起应用。 </p><p>协议唤起的链接格式: 自协议名称://参数</p><p>比如上文注册: <code>electron-playground-code</code>协议,触发时会默认带上<code>://</code>。</p><p>在使用的时候, 需要在浏览器地址栏输入: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">electron-playground-code:<span class="comment">//1234 // 1234是参数 可根据业务自行修改</span></span><br></pre></td></tr></table></figure><h4 id="1-6-注册协议并通过浏览器唤起后台应用的gif示例"><a href="#1-6-注册协议并通过浏览器唤起后台应用的gif示例" class="headerlink" title="1.6 注册协议并通过浏览器唤起后台应用的gif示例:"></a>1.6 注册协议并通过浏览器唤起后台应用的gif示例:</h4><p><img src= "/img/loading.gif" data-lazy-src="http://mei160.cn/images/setProtocol.gif?height=400"></p><h4 id="监听应用程序被唤起"><a href="#监听应用程序被唤起" class="headerlink" title="监听应用程序被唤起"></a>监听应用程序被唤起</h4><p>应用程序唤起，mac系统会触发open-url事件，window系统会触发second-instance事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @@code-renderer: runner</span></span><br><span class="line"><span class="comment">// @@code-props: &#123; height: &#x27;450px&#x27; &#125;</span></span><br><span class="line"><span class="comment">// 注册自定义协议</span></span><br><span class="line"><span class="keyword">const</span> &#123; app, dialog &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> agreement = <span class="string">&#x27;electron-playground-code&#x27;</span> <span class="comment">// 自定义协议名</span></span><br><span class="line"><span class="comment">// 验证是否为自定义协议的链接</span></span><br><span class="line"><span class="keyword">const</span> AGREEMENT_REGEXP = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`^<span class="subst">$&#123;agreement&#125;</span>://`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听自定义协议唤起</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">watchProtocol</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// mac唤醒应用 会激活open-url事件 在open-url中判断是否为自定义协议打开事件</span></span><br><span class="line">  app.on(<span class="string">&#x27;open-url&#x27;</span>, <span class="function">(<span class="params">event, url</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> isProtocol = AGREEMENT_REGEXP.test(url)</span><br><span class="line">    <span class="keyword">if</span> (isProtocol) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;获取协议链接, 根据参数做各种事情&#x27;</span>)</span><br><span class="line">      dialog.showMessageBox(&#123;</span><br><span class="line">        type: <span class="string">&#x27;info&#x27;</span>,</span><br><span class="line">        message: <span class="string">&#x27;Mac protocol 自定义协议打开&#x27;</span>,</span><br><span class="line">        detail: <span class="string">`自定义协议链接:<span class="subst">$&#123;url&#125;</span>`</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// window系统下唤醒应用会激活second-instance事件 它在ready执行之后才能被监听</span></span><br><span class="line">  app.on(<span class="string">&#x27;second-instance&#x27;</span>, <span class="function">(<span class="params">event, commandLine</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// commandLine 是一个数组， 唤醒的链接作为数组的一个元素放在这里面</span></span><br><span class="line">    commandLine.forEach(<span class="function"><span class="params">str</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (AGREEMENT_REGEXP.test(str)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;获取协议链接, 根据参数做各种事情&#x27;</span>)</span><br><span class="line">        dialog.showMessageBox(&#123;</span><br><span class="line">          type: <span class="string">&#x27;info&#x27;</span>,</span><br><span class="line">          message: <span class="string">&#x27;window protocol 自定义协议打开&#x27;</span>,</span><br><span class="line">          detail: <span class="string">`自定义协议链接:<span class="subst">$&#123;str&#125;</span>`</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在ready事件回调中监听自定义协议唤起</span></span><br><span class="line">watchProtocol()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;监听成功&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="唤起应用执行回调示例"><a href="#唤起应用执行回调示例" class="headerlink" title="唤起应用执行回调示例"></a>唤起应用执行回调示例</h4><p><img src= "/img/loading.gif" data-lazy-src="http://mei160.cn/images/protocolWatch.gif?height=400"></p><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ol><li><p>单纯唤醒应用</p><p> 只需注册协议，系统会自动打开应用。<br> 表现：如果应用未打开将打开应用，如果应用已经打开应用将会激活应用窗口。</p></li><li><p>根据协议链接的参数进行各种操作</p><p>如上面的弹窗演示, <strong>在监听协议链接打开的时候，可以获取完整的协议链接</strong>。</p><p>我们可以根据协议链接来进行各种业务操作。</p><p>比如跳转指定链接地址，比如判断是否登录再进行跳转，比如下载指定文件等。</p></li></ol><h4 id="一些其他API"><a href="#一些其他API" class="headerlink" title="一些其他API"></a>一些其他API</h4><p><strong>app.removeAsDefaultProtocolClient(protocol)</strong> 删除注册的协议, 返回是否成功删除的Boolean</p><p><strong>Mac: app.isDefaultProtocolClient(protocol)</strong> 当前程序是否为协议的处理程序。</p><p><strong>app.getApplicationNameForProtocol(url)</strong> 获取该协议链接的应用处理程序</p><p>参数说明: </p><p>protocol 不包含:// 注册的协议名。</p><p>url 包含://</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @@code-renderer: runner</span></span><br><span class="line"><span class="comment">// @@code-props: &#123; height: &#x27;200px&#x27; &#125;</span></span><br><span class="line"><span class="comment">// 自定义协议的其他相关API</span></span><br><span class="line"><span class="keyword">const</span> &#123; app &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> agreement = <span class="string">&#x27;electron-playground-code&#x27;</span> <span class="comment">// 自定义协议名</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;自行注释，自由尝试&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> isApp = app.isDefaultProtocolClient(agreement)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;当前程序是否为自定义协议的处理程序: &#x27;</span>, isApp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> AgreementAppName = app.getApplicationNameForProtocol(<span class="string">`<span class="subst">$&#123;agreement&#125;</span>://`</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;获取该自定义协议链接的应用处理程序的名字&#x27;</span>, AgreementAppName)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isDelete = app.removeAsDefaultProtocolClient(agreement)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;删除自定义协议&#x27;</span>, isDelete)</span><br></pre></td></tr></table></figure><h3 id="自定义协议"><a href="#自定义协议" class="headerlink" title="自定义协议"></a>自定义协议</h3><p>注册自定义协议，拦截基于现有协议的请求，根据注册的自定义协议类型返回对应类型的数据。</p><p>在该项目中的代码地址: electron-playground/app/protocol, 可以运行项目调试一下看看效果。</p><h4 id="protocol-registerSchemesAsPrivileged"><a href="#protocol-registerSchemesAsPrivileged" class="headerlink" title="protocol.registerSchemesAsPrivileged"></a>protocol.registerSchemesAsPrivileged</h4><p>将协议注册成标准的scheme, 方便后续调用。</p><p><strong>注意</strong>： 它必须在ready事件加载之前调用，并且只能调用一次。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">protocol.registerSchemesAsPrivileged([</span><br><span class="line">  &#123; <span class="attr">scheme</span>: <span class="string">&#x27;myscheme&#x27;</span>, <span class="attr">privileges</span>: &#123; <span class="attr">bypassCSP</span>: <span class="literal">true</span> &#125; &#125;,</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h4 id="protocol-registerFileProtocol"><a href="#protocol-registerFileProtocol" class="headerlink" title="protocol.registerFileProtocol"></a>protocol.registerFileProtocol</h4><p>拦截自定义协议的请求回调，重新处理后再请求路径。</p><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">protocol.registerFileProtocol(</span><br><span class="line">  <span class="string">&#x27;myscheme&#x27;</span>,</span><br><span class="line">  (request, callback) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 拼接绝对路径的url</span></span><br><span class="line">    <span class="keyword">const</span> resolvePath = path.resolve(__dirname, <span class="string">&#x27;../../playground&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> url = request.url.replace( <span class="string">`<span class="subst">$&#123;myScheme&#125;</span>://`</span>, <span class="string">&#x27;&#x27;</span> )</span><br><span class="line">    url = <span class="string">`<span class="subst">$&#123;resolvePath&#125;</span>/<span class="subst">$&#123;url&#125;</span>`</span></span><br><span class="line">    <span class="keyword">return</span> callback(&#123; <span class="attr">path</span>: <span class="built_in">decodeURIComponent</span>(url) &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) <span class="built_in">console</span>.error(<span class="string">&#x27;Failed to register protocol&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>PS: 在<a href="https://www.electronjs.org/docs/api/protocol">文档</a>上提供了不同种类的加载API，这里只演示其中的一种。</p><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><p>在html中使用自定义协议请求文件，即可自动拦截。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;</span>&quot;<span class="attr">myscheme:</span>//<span class="attr">page</span>/<span class="attr">protocol</span>/<span class="attr">wakeUp.jpg</span>&quot;&#125; <span class="attr">alt</span>=<span class="string">&quot;wakeUp&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="protocol其他API"><a href="#protocol其他API" class="headerlink" title="protocol其他API"></a>protocol其他API</h4><h2 id="托盘"><a href="#托盘" class="headerlink" title="托盘"></a>托盘</h2><h3 id="创建托盘"><a href="#创建托盘" class="headerlink" title="创建托盘"></a>创建托盘</h3><ol><li>引入Tray类</li><li>获取图标地址</li><li>实例化tray并传入图标地址</li></ol><p>代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @@code-renderer: block</span></span><br><span class="line"><span class="keyword">const</span> &#123; Tray &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> icon = path.join(__dirname, <span class="string">&#x27;你的图片路径&#x27;</span>)</span><br><span class="line"><span class="keyword">new</span> Tray(icon)</span><br></pre></td></tr></table></figure><p>一个系统托盘就会被创建出来。很简单对不对，但是这个图标还没有任何功能，接下来我们为图标添加一些属性和事件。</p><h3 id="设置托盘属性"><a href="#设置托盘属性" class="headerlink" title="设置托盘属性"></a>设置托盘属性</h3><h4 id="常用属性和事件"><a href="#常用属性和事件" class="headerlink" title="常用属性和事件"></a>常用属性和事件</h4><p>为tray实例设置一些属性和事件，包括上下文菜单、鼠标移入文字。详细文档<a href="https://www.electronjs.org/docs/api/tray">点击这里。</a></p><p>这里我们为tray设置灵活图标，让它可以根据系统主题显示不同的图标；再设置一个鼠标移入图标的时候会显示的提示文字，最后为它设置上下文菜单，让它可以具备一些功能。</p><p>先看下效果图：</p><p><img src= "/img/loading.gif" data-lazy-src="http://mei160.cn/images/create-tray.gif?width=600"></p><p>附上代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @@code-renderer: runner</span></span><br><span class="line"><span class="comment">// @@code-props: &#123;height: &#x27;580px&#x27;, hideRight: true&#125;</span></span><br><span class="line"><span class="keyword">const</span> &#123; Tray, Menu, nativeTheme, BrowserWindow &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tray</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置顶部APP图标的操作和图标</span></span><br><span class="line"><span class="keyword">const</span> lightIcon = path.join(__dirname, <span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;resources&#x27;</span>, <span class="string">&#x27;tray&#x27;</span>, <span class="string">&#x27;StatusIcon_light.png&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> darkIcon = path.join(__dirname, <span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;resources&#x27;</span>, <span class="string">&#x27;tray&#x27;</span>, <span class="string">&#x27;StatusIcon_dark.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据系统主题显示不同的主题图标</span></span><br><span class="line">tray = <span class="keyword">new</span> Tray(nativeTheme.shouldUseDarkColors ? darkIcon : lightIcon)</span><br><span class="line"></span><br><span class="line">tray.setToolTip(<span class="string">&#x27;Electron-Playground&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> contextMenu = Menu.buildFromTemplate([</span><br><span class="line">  &#123;</span><br><span class="line">    label: <span class="string">&#x27;打开新窗口&#x27;</span>,</span><br><span class="line">    click: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> child = <span class="keyword">new</span> BrowserWindow(&#123; <span class="attr">parent</span>: BrowserWindow.getFocusedWindow() &#125;)</span><br><span class="line">      child.loadURL(<span class="string">&#x27;https://electronjs.org&#x27;</span>)</span><br><span class="line">      child.show()</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    label: <span class="string">&#x27;删除图标&#x27;</span>,</span><br><span class="line">    click: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      tray.destroy()</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">tray.setContextMenu(contextMenu)</span><br></pre></td></tr></table></figure><br>你可以修改提示或者菜单来试一下。这里可以设置多个托盘，实际应用中要注意设置单例锁。<p>我们设置了托盘根据系统主题显示不同的图标，但是系统主题是动态的，又该怎么做呢，请看：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @@code-renderer: block</span></span><br><span class="line">nativeTheme.on(<span class="string">&#x27;updated&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  tray.setImage(nativeTheme.shouldUseDarkColors ? darkIcon : lightIcon)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>添加一个主题监听事件就好了。把这段代码复制到上面执行看下效果吧。</p><h4 id="显示未读消息数-macOS"><a href="#显示未读消息数-macOS" class="headerlink" title="显示未读消息数(macOS)"></a>显示未读消息数(macOS)</h4><p>在macOS系统下，可以采用setTitle(String)设置未读消息数。PS：windows下无效果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @@code-renderer: block</span></span><br><span class="line">tray.setTitle(<span class="string">&quot;1&quot;</span>)</span><br></pre></td></tr></table></figure><p>效果是这样的：</p><p><img src= "/img/loading.gif" data-lazy-src="http://mei160.cn/images/set-tray-title.png?width=400"></p><p>你也可以复制到上面代码编辑器中然后点击执行看下效果。</p><h4 id="有未读消息时图标闪动-windows"><a href="#有未读消息时图标闪动-windows" class="headerlink" title="有未读消息时图标闪动(windows)"></a>有未读消息时图标闪动(windows)</h4><p>在windows系统下，可通过setImage设置正常图标与空图标切换达到闪动效果。在mac系统下空图标不占用图标空间，所以需要设置透明图标。<br>你可以在下面示例中用darkIcon代替nativeImage.createEmpty()然后执行看一下效果。</p><p>如何判断操作系统平台，<a href="http://nodejs.cn/api/process/process_platform.html">点击这里</a></p><p>windows下效果：</p><p><img src= "/img/loading.gif" data-lazy-src="http://mei160.cn/images/create-glimmer-tray.gif?width=600"></p><p>附代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @@code-renderer: runner</span></span><br><span class="line"><span class="comment">// @@code-props: &#123;height: &#x27;880px&#x27;, hideRight: true&#125;</span></span><br><span class="line"><span class="keyword">const</span> &#123; Tray, Menu, nativeTheme, BrowserWindow, nativeImage &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tray</span><br><span class="line"><span class="keyword">let</span> timer</span><br><span class="line"><span class="keyword">let</span> toggle = <span class="literal">true</span></span><br><span class="line"><span class="keyword">let</span> haveMessage = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> lightIcon = path.join(__dirname, <span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;resources&#x27;</span>, <span class="string">&#x27;tray&#x27;</span>, <span class="string">&#x27;StatusIcon_light.png&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> darkIcon = path.join(__dirname, <span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;resources&#x27;</span>, <span class="string">&#x27;tray&#x27;</span>, <span class="string">&#x27;StatusIcon_dark.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> win = BrowserWindow.getFocusedWindow();</span><br><span class="line"></span><br><span class="line">tray = <span class="keyword">new</span> Tray(lightIcon)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> contextMenu = Menu.buildFromTemplate([</span><br><span class="line">  &#123;</span><br><span class="line">    label: <span class="string">&#x27;张三的消息&#x27;</span>,</span><br><span class="line">    click: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> child = <span class="keyword">new</span> BrowserWindow(&#123; <span class="attr">parent</span>: BrowserWindow.getFocusedWindow() &#125;)</span><br><span class="line">      child.loadURL(<span class="string">&#x27;https://electronjs.org&#x27;</span>)</span><br><span class="line">      child.show()</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">&#x27;separator&#x27;</span> &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    label: <span class="string">&#x27;删除图标&#x27;</span>,</span><br><span class="line">    click: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      tray.destroy()</span><br><span class="line">      <span class="built_in">clearInterval</span>(timer)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">tray.setContextMenu(contextMenu)</span><br><span class="line"></span><br><span class="line">tray.setToolTip(<span class="string">&#x27;Electron-Playground&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (haveMessage) &#123;</span><br><span class="line">  timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    toggle = !toggle</span><br><span class="line">    <span class="keyword">if</span> (toggle) &#123;</span><br><span class="line">      tray.setImage(nativeImage.createEmpty())</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      tray.setImage(lightIcon)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">600</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="双击托盘显示隐藏界面-windows"><a href="#双击托盘显示隐藏界面-windows" class="headerlink" title="双击托盘显示隐藏界面(windows)"></a>双击托盘显示隐藏界面(windows)</h4><p>windows下效果：</p><p><img src= "/img/loading.gif" data-lazy-src="http://mei160.cn/images/create-toggle-tray.gif?width=600"></p><p>附代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @@code-renderer: runner</span></span><br><span class="line"><span class="comment">// @@code-props: &#123;height: &#x27;260px&#x27;, hideRight: true&#125;</span></span><br><span class="line"><span class="keyword">const</span> &#123; Tray, Menu, nativeTheme, BrowserWindow, nativeImage &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tray</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> lightIcon = path.join(__dirname, <span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;resources&#x27;</span>, <span class="string">&#x27;tray&#x27;</span>, <span class="string">&#x27;StatusIcon_light.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> win = BrowserWindow.getFocusedWindow()</span><br><span class="line"></span><br><span class="line">tray = <span class="keyword">new</span> Tray(lightIcon)</span><br><span class="line"></span><br><span class="line">tray.on(<span class="string">&#x27;double-click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  win.isVisible() ? win.hide() : win.show()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>注：此效果在windows上良好，在mac下会有兼容性问题，双击事件可能失效，实际使用过程中要注意。</p><h2 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>菜单主要分为应用程序菜单、上下文菜单，在tray和dock中也有用到菜单，本节主要介绍前两种。<a href="https://www.electronjs.org/docs/api/menu">文档地址</a></p><blockquote><p>以下案例如有操作到应用程序菜单，可点击右下角撤回恢复正常菜单。</p></blockquote><h4 id="应用程序菜单"><a href="#应用程序菜单" class="headerlink" title="应用程序菜单"></a>应用程序菜单</h4><p>mac和windows都在左上角，但是一个在屏幕左上角一个在应用程序视图左上角。<br>mac是这样的：  </p><p><img src= "/img/loading.gif" data-lazy-src="http://mei160.cn/images/mac-menu.png?width=400"></p><p>windows长这样：  </p><p><img src= "/img/loading.gif" data-lazy-src="http://mei160.cn/images/win-menu.png?width=400">  </p><p>如果windows下没有显示菜单，在当前窗口按alt键即会出现。</p><h3 id="创建菜单"><a href="#创建菜单" class="headerlink" title="创建菜单"></a>创建菜单</h3><h4 id="创建应用程序菜单"><a href="#创建应用程序菜单" class="headerlink" title="创建应用程序菜单"></a>创建应用程序菜单</h4><p>接下来我们创建应用程序菜单。如下步骤：  </p><ol><li>引入Menu类  </li><li>定义一个菜单模板  </li><li>调用Menu类的<code>buildFromTemplate</code>方法，该方法会根据传入的模板创建对应的菜单  </li><li>调用Menu类的<code>setApplicationMenu</code>方法  </li></ol><p>此四步即可创建应用程序菜单，先来看下效果图。</p><p><img src= "/img/loading.gif" data-lazy-src="http://mei160.cn/images/create-menu.gif?width=600">   </p><p>附上代码：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @@code-renderer: runner</span></span><br><span class="line"><span class="comment">// @@code-props: &#123; height: &#x27;570px&#x27;, hideRight: true &#125;</span></span><br><span class="line"><span class="keyword">const</span> &#123; Menu, dialog, app &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> template = [</span><br><span class="line">  &#123;</span><br><span class="line">    label: <span class="string">&#x27;app&#x27;</span>, <span class="comment">// macOS下第一个标签是应用程序名字，此处设置无效</span></span><br><span class="line">    submenu: [</span><br><span class="line">      &#123; <span class="attr">label</span>: <span class="string">&#x27;退出&#x27;</span>, <span class="attr">click</span>: <span class="function">() =&gt;</span> &#123; app.quit() &#125; &#125;,</span><br><span class="line">      &#123; <span class="attr">label</span>: <span class="string">&#x27;关于&#x27;</span>, <span class="attr">click</span>: <span class="function">() =&gt;</span> &#123; app.showAboutPanel() &#125; &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    label: <span class="string">&#x27;文件&#x27;</span>,</span><br><span class="line">    submenu: [</span><br><span class="line">      &#123;</span><br><span class="line">        label: <span class="string">&#x27;子菜单&#x27;</span>, </span><br><span class="line">        click: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 调用了dialog（弹窗模块），演示效果</span></span><br><span class="line">          dialog.showMessageBoxSync(&#123;</span><br><span class="line">            type: <span class="string">&#x27;info&#x27;</span>,</span><br><span class="line">            title: <span class="string">&#x27;提示&#x27;</span>,</span><br><span class="line">            message: <span class="string">&#x27;点击了子菜单&#x27;</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> menu = Menu.buildFromTemplate(template)</span><br><span class="line"></span><br><span class="line">Menu.setApplicationMenu(menu)</span><br></pre></td></tr></table></figure><br>点击执行后看左上菜单效果。  <h4 id="创建上下文菜单"><a href="#创建上下文菜单" class="headerlink" title="创建上下文菜单"></a>创建上下文菜单</h4><p>即创建右键点击菜单，前三步与创建应用程序菜单相同，最后一步需监听窗口<code>context-menu</code>事件展示菜单选项。<br>监听事件<a href="https://www.electronjs.org/docs/api/web-contents#event-context-menu">context-menu文档</a>  </p><p>先上效果图。  </p><p><img src= "/img/loading.gif" data-lazy-src="http://mei160.cn/images/create-context-menu.gif?width=600">   </p><p>附上代码：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @@code-renderer: runner</span></span><br><span class="line"><span class="comment">// @@code-props: &#123;height: &#x27;460px&#x27;, hideRight: true&#125;</span></span><br><span class="line"><span class="keyword">const</span> &#123; Menu, BrowserWindow &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> menu = <span class="keyword">new</span> Menu();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> template = [</span><br><span class="line">  &#123;</span><br><span class="line">    label: <span class="string">&#x27;app&#x27;</span>, <span class="comment">// macOS下第一个标签是应用程序名字，此处设置无效</span></span><br><span class="line">    submenu: [</span><br><span class="line">      &#123; <span class="attr">role</span>: <span class="string">&#x27;quit&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">role</span>: <span class="string">&#x27;about&#x27;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    label: <span class="string">&#x27;编辑&#x27;</span>,</span><br><span class="line">    role: <span class="string">&#x27;editMenu&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> contextMenu = Menu.buildFromTemplate(template)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主进程，渲染进程可使用window.addEventListener设置监听事件</span></span><br><span class="line">BrowserWindow.getFocusedWindow().webContents.on(<span class="string">&#x27;context-menu&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  contextMenu.popup()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br><p>可能你已经发现，这个例子的代码比上个例子少，实现的菜单却更多，而且这个<code>role</code>又是干嘛的呢，别急，往下看。</p><h3 id="设置菜单属性"><a href="#设置菜单属性" class="headerlink" title="设置菜单属性"></a>设置菜单属性</h3><p>上节说到，这个<code>role</code>是干嘛的呢？<br>其实创建菜单行为有两种方式，一种是自定义，即1.1中实现方式，另外一种是预定义即<code>role</code>。  </p><p>role是MenuItem的属性，是electron的预定义行为。<a href="https://www.electronjs.org/docs/api/menu-item#%E8%A7%92%E8%89%B2">文档</a>说：最好给任何一个菜单指定 role去匹配一个标准角色, 而不是尝试在 click 函数中手动实现该行为。 内置的 role 行为将提供最佳的原生体验。使用 role 时, label 和 accelerator 值是可选的, 并为每个平台，将默认为适当值。</p><p>这就是说，你只要设置好role属性，那么这个菜单的文案、快捷键、事件行为都已内部实现，而且比自定义的行为体验更好。</p><pre><code class="js">// @@code-renderer: runner// @@code-props: &#123;height: &#39;500px&#39;, hideRight: true&#125;const &#123; Menu, BrowserWindow &#125; = require(&#39;electron&#39;)const templateCustom = [  &#123;    label: &#39;app&#39;, // macOS下第一个标签是应用程序名字，此处设置无效    submenu: [      &#123; label: &#39;quit&#39;, role: &#39;quit&#39; &#125;,      &#123;label: &#39;关于&#39;, role: &#39;about&#39;, accelerator: &#39;CommandOrControl + shift + H&#39; &#125;    ]  &#125;,  &#123;    label: &#39;编辑&#39;,    submenu: [      &#123;role: &#39;editMenu&#39;&#125;,      &#123;type: &#39;separator&#39;&#125;,      &#123;label: &#39;自定义&#39;, click: () =&gt; &#123;        const win = new BrowserWindow()        win.loadURL(&#39;https://electronjs.org&#39;)      &#125; &#125;    ]  &#125;]const customMenu = Menu.buildFromTemplate(templateCustom)Menu.setApplicationMenu(customMenu)</code></pre><br><p>line8的<code>accelerator</code>相信你看一眼就知道是设置快捷键的属性，你也可以自己更改快捷键点击执行试一下。</p><h3 id="隐藏菜单"><a href="#隐藏菜单" class="headerlink" title="隐藏菜单"></a>隐藏菜单</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;应用&quot;&gt;&lt;a href=&quot;#应用&quot; class=&quot;headerlink&quot; title=&quot;应用&quot;&gt;&lt;/a&gt;应用&lt;/h1&gt;&lt;h2 id=&quot;Dialog与文件选择&quot;&gt;&lt;a href=&quot;#Dialog与文件选择&quot; class=&quot;headerlink&quot; title=&quot;Dia</summary>
      
    
    
    
    <category term="electron" scheme="https://hard-workingrookie.github.io/categories/electron/"/>
    
    
    <category term="electron" scheme="https://hard-workingrookie.github.io/tags/electron/"/>
    
  </entry>
  
  <entry>
    <title>electron工程化</title>
    <link href="https://hard-workingrookie.github.io/2021/01/07/electron%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    <id>https://hard-workingrookie.github.io/2021/01/07/electron%E5%B7%A5%E7%A8%8B%E5%8C%96/</id>
    <published>2021-01-07T07:30:05.000Z</published>
    <updated>2021-03-09T14:07:46.598Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工程化"><a href="#工程化" class="headerlink" title="工程化"></a>工程化</h1><h2 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h2><p>在这里讨论安全性，我们主要分为两种，一种是加载<strong>应用内</strong>资源，一种是加载<strong>远程</strong>资源。</p><p>对于加载应用内资源代码我们是可控的，需要注意的安全问题和通常的网站差不多，防范XSS攻击等。</p><p>而很多情况下，在我们的应用中可能需要加载远程站点（合作网站、用户发送的链接，由第三方开发的小程序等），对于这些很多场景下不可控的代码资源，如果直接给他们所有的访问权限，后果将不可控，因此我们着重讨论加载远程资源可能的问题以及解决方法。</p><h3 id="用户发送的链接"><a href="#用户发送的链接" class="headerlink" title="用户发送的链接"></a>用户发送的链接</h3><p>用户发送的内容并不可控，在这里我们需要<strong>多重拦截</strong>做保障。</p><h4 id="后端维护站点黑名单"><a href="#后端维护站点黑名单" class="headerlink" title="后端维护站点黑名单"></a>后端维护站点黑名单</h4><p>由后端维护一个站点黑名单，用户发送的每个链接在打开前都请求一次接口，判断到如果是色情网站钓鱼网站等不合法站点，直接提醒用户不要打开。</p><h4 id="通过系统浏览器打开"><a href="#通过系统浏览器打开" class="headerlink" title="通过系统浏览器打开"></a>通过系统浏览器打开</h4><p>可以通过<code>shell.openExternal</code>通过浏览器打开第三方站点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @@code-renderer:runner</span></span><br><span class="line"><span class="comment">// @@code-props: &#123; height: &#x27;120px&#x27;, hideRight: true &#125;</span></span><br><span class="line"><span class="keyword">const</span> &#123; shell &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line">shell.openExternal(<span class="string">&#x27;https://github.com&#x27;</span>)</span><br></pre></td></tr></table></figure><p>但是使用这个方法需要注意两点：</p><p>1.<strong>openExternal不只能打开http链接</strong></p><p>  <code>openExternal</code>方法是是通过系统的默认应用打开给定的外部协议URL，比如说打开下面这段url会打开邮件应用写邮件，非http协议的链接只要有对应的处理程序都会打开。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @@code-renderer:runner</span></span><br><span class="line"><span class="comment">// @@code-props: &#123; height: &#x27;120px&#x27;, hideRight: true &#125;</span></span><br><span class="line"><span class="keyword">const</span> &#123; shell &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line">shell.openExternal(<span class="string">&#x27;mailto:somebody@gmail.com?subject=I love you&#x27;</span>)</span><br></pre></td></tr></table></figure><p>使用此API时需要注意先判断URL地址的协议。</p><p>2.<strong>打开http链接仍应先判断风险</strong> </p><p>  即使是http协议，通过浏览器打开前，最好也能先判断是否有风险，否则相当于将网站的安全性判断责任转嫁给了浏览器，用户仍然有不小心打开钓鱼网站的风险。</p><h3 id="通过webPreferences限制API访问"><a href="#通过webPreferences限制API访问" class="headerlink" title="通过webPreferences限制API访问"></a>通过webPreferences限制API访问</h3><p>如果需要在Electron应用中打开无法确定安全性的链接，我们可以对打开该链接的窗口设置更为严格的<code>webPreferences</code>选项以限制其能访问到的api和内容。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; BrowserWindow &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> win = <span class="keyword">new</span> BrowserWindow(&#123;<span class="attr">webPreferences</span>: &#123;</span><br><span class="line">  <span class="comment">// 是否集成node环境</span></span><br><span class="line">  nodeIntegration: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 在沙盒中运行渲染进程</span></span><br><span class="line">  sandbox: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 是否启用remote模块</span></span><br><span class="line">  enableRemoteModule: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 启用同源策略</span></span><br><span class="line">  webSecurity: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 是否允许运行http协议加载的内容</span></span><br><span class="line">  allowRunningInsecureContent: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 在独立JavaScript环境中运行Electron API和指定的preload脚本</span></span><br><span class="line">  contextIsolation: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 是否允许使用原生的window.open()</span></span><br><span class="line">  nativeWindowOpen: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 是否启用webview标签</span></span><br><span class="line">  webviewTag: <span class="literal">false</span>,</span><br><span class="line">&#125;&#125;)</span><br><span class="line">win.loadURL(<span class="string">&#x27;https://github.com&#x27;</span>)</span><br></pre></td></tr></table></figure><p>更详细的参数设置可以参考<a href="https://www.electronjs.org/docs/api/browser-window#new-browserwindowoptions">文档</a></p><p>上面的选项进行了十分严格的限制，无node环境，不允许<code>window.open</code>，不允许加载非https链接，在独立JS环境运行等等，安全性是够了，但是带来的问题就是，如果遇到业务需要使用API怎么办？</p><p>比如说由第三方开发的小程序，可能会需要获取一些Node或Electron的api，但是又要确保安全性。</p><p>这种情况下就需要代理一些Node和Electron的api了</p><h3 id="代理API"><a href="#代理API" class="headerlink" title="代理API"></a>代理API</h3><p>这里我们主要讨论两种方式。</p><h4 id="对API做完全的封装"><a href="#对API做完全的封装" class="headerlink" title="对API做完全的封装"></a>对API做完全的封装</h4><p>将方法在preload中封装好（禁用node集成不影响preload），然后挂载到Window上供其调用，比如在<br>中通过下面的代码可以提供API读取文件内容，但不允许写入文件等操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> JSBridge = &#123;</span><br><span class="line">  <span class="comment">// 只提供读取方法，不提供写入</span></span><br><span class="line">  readFile: <span class="function">(<span class="params">path</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="comment">// 做一些路径规则判断，是否允许访问</span></span><br><span class="line">      <span class="keyword">if</span>(!<span class="regexp">/regexp-to-test-path/</span>.test(path)) reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`not allowed path <span class="subst">$&#123;path&#125;</span>`</span>))</span><br><span class="line">      fs.readFile(path, <span class="function">(<span class="params">err, data</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err) reject(err)</span><br><span class="line">        resolve(data)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.JSBridge = JSBridge</span><br></pre></td></tr></table></figure><h4 id="通过remote-require事件做代理和放行"><a href="#通过remote-require事件做代理和放行" class="headerlink" title="通过remote-require事件做代理和放行"></a>通过<code>remote-require</code>事件做代理和放行</h4><p>监听<a href="https://www.electronjs.org/docs/api/app#event-remote-require">app的remote-require事件</a>，根据模块名称做过滤和放行，也可以返回封装好的代理模块。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> readOnlyFsProxy = <span class="built_in">require</span>(<span class="comment">/* ... */</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> allowedModules = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;crypto&#x27;</span>])</span><br><span class="line"><span class="keyword">const</span> proxiedModules = <span class="keyword">new</span> <span class="built_in">Map</span>([<span class="string">&#x27;fs&#x27;</span>, readOnlyFsProxy])</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">&#x27;remote-require&#x27;</span>, <span class="function">(<span class="params">event, webContents, moduleName</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (proxiedModules.has(moduleName)) &#123;</span><br><span class="line">    event.returnValue = proxiedModules.get(moduleName)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!allowedModules.has(moduleName)) &#123;</span><br><span class="line">    event.preventDefault()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="限制导航"><a href="#限制导航" class="headerlink" title="限制导航"></a>限制导航</h3><p>在浏览器要开始导航时会触发<code>will-navigate</code>事件，我们可以在事件回调中判断url是否为站内链接，如果非站内链接可以调用<code>event.preventDefault()</code>阻止这次导航。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; BrowserWindow &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> browserWindow = <span class="keyword">new</span> BrowserWindow()</span><br><span class="line">browserWindow.webContents.on(<span class="string">&#x27;will-navigate&#x27;</span>, <span class="function">(<span class="params">event, url</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 判断链接域名</span></span><br><span class="line">  <span class="keyword">if</span>(!<span class="regexp">/google.com?/</span>.test(<span class="keyword">new</span> URL(url).origin))&#123;</span><br><span class="line">    event.preventDefault()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">browserWindow.loadURL(<span class="string">&#x27;https://google.com&#x27;</span>)</span><br></pre></td></tr></table></figure><p>执行上面的代码，会发现打开的窗口中可以进行搜索，但是无法进入搜索出的第三方页面。</p><h3 id="限制新窗口的创建"><a href="#限制新窗口的创建" class="headerlink" title="限制新窗口的创建"></a>限制新窗口的创建</h3><p>新窗口的创建主要有几种形式：</p><ol><li>站点资源，可能会通过window.open(), a标签的target=_blank等方式打开新窗口；</li><li>用户通过Command/Ctrl+鼠标单击，右键菜单等方式打开新窗口；</li></ol><p>通过监听<code>new-window</code>事件可以判断url和打开方式，然后通过<code>event.preventDefault()</code>来阻止创建新窗口</p><p>下面的代码阻止了command+click和点击a标签target=_blank的方式打开新窗口:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; BrowserWindow, dialog &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> browserWindow = <span class="keyword">new</span> BrowserWindow()</span><br><span class="line">browserWindow.webContents.on(<span class="string">&#x27;new-window&#x27;</span>, <span class="function">(<span class="params">event, url, frameName, disposition</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// disposition字段的相关解释:</span></span><br><span class="line">  <span class="comment">// new-window : open调用</span></span><br><span class="line">  <span class="comment">// background-tab: command+click</span></span><br><span class="line">  <span class="comment">// foreground-tab: 右键点击新标签打开或点击a标签target _blank打开</span></span><br><span class="line">  <span class="comment">// electron文档: 文档：https://www.electronjs.org/docs/api/web-contents#webcontents</span></span><br><span class="line">  <span class="comment">// github源码: github源码： https://github.com/electron/electron/blob/72a089262e31054eabd342294ccdc4c414425c99/shell/browser/api/electron_api_web_contents.cc</span></span><br><span class="line">  <span class="comment">// chrome 源码： https://chromium.googlesource.com/chromium/src/+/66.0.3359.158/ui/base/mojo/window_open_disposition_struct_traits.h</span></span><br><span class="line">  <span class="keyword">if</span> (disposition === <span class="string">&#x27;background-tab&#x27;</span> || disposition === <span class="string">&#x27;foreground-tab&#x27;</span>) &#123;</span><br><span class="line">    dialog.showMessageBox(&#123;<span class="attr">message</span>: <span class="string">`not allowed. url: <span class="subst">$&#123;url&#125;</span>, disposition: <span class="subst">$&#123;disposition&#125;</span>`</span>&#125;)</span><br><span class="line">    event.preventDefault()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">browserWindow.loadURL(<span class="string">&#x27;https://google.com&#x27;</span>)</span><br></pre></td></tr></table></figure><p>尝试一下：修改上面的代码，看看不同的disposition分别适用什么场景</p><h2 id="崩溃收集"><a href="#崩溃收集" class="headerlink" title="崩溃收集"></a>崩溃收集</h2><p>开发electron项目时，经常会遇到APP崩溃的情况，如果APP端没有对应的日志记录，那开发就无法掌握APP的崩溃情况了，也不好做分析。</p><p>目前我们选用的是开源项目<a href="https://sentry.io/">Sentry</a>,它用来记录crash日志，它也有统计模块，也能私有化部署，基本上开箱就能用</p><p><img src= "/img/loading.gif" data-lazy-src="http://mei160.cn/images/sentry.png" alt="sentry"></p><h3 id="情况模拟"><a href="#情况模拟" class="headerlink" title="情况模拟"></a>情况模拟</h3><h4 id="Renderer进程主动push错误信息"><a href="#Renderer进程主动push错误信息" class="headerlink" title="Renderer进程主动push错误信息"></a>Renderer进程主动push错误信息</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.$EB.ipcRenderer.send(<span class="string">&#x27;renderer.error&#x27;</span>, &#123;</span><br><span class="line">  message: <span class="string">&#x27;renderer.error&#x27;</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>触发的<a href="https://sentry.io/share/issue/76069b04b4aa4cc0ba99c2e74fceb8fc/">sentry 错误日志(可能需要翻墙)</a></p><h4 id="2-Renderer进程被动触发错误信息"><a href="#2-Renderer进程被动触发错误信息" class="headerlink" title="2. Renderer进程被动触发错误信息"></a>2. Renderer进程被动触发错误信息</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Error triggered in renderer process&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这不会触发sentry信息</p><h4 id="Renderer进程crash了"><a href="#Renderer进程crash了" class="headerlink" title="Renderer进程crash了"></a>Renderer进程crash了</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">window</span>.$EB.crash()</span><br></pre></td></tr></table></figure><p>触发的<a href="https://sentry.io/share/issue/05a5ec366a194f36b2293b453cdec25c/">sentry crash日志(可能需要翻墙)</a></p><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><h3 id="快速新建一个Electron-App"><a href="#快速新建一个Electron-App" class="headerlink" title="快速新建一个Electron App"></a>快速新建一个Electron App</h3><p>新建一个工作目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir my-app &amp;&amp; cd my-app</span><br></pre></td></tr></table></figure><p>初始化<strong>package.json</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn init</span><br></pre></td></tr></table></figure><p>安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add electron -D</span><br></pre></td></tr></table></figure><p>新建index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    html, body &#123;</span><br><span class="line">      background-color: antiquewhite;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新建index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, BrowserWindow &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">&#x27;ready&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="built_in">window</span> = <span class="keyword">new</span> BrowserWindow()</span><br><span class="line">  <span class="built_in">window</span>.loadFile(path.resolve(__dirname, <span class="string">&#x27;src&#x27;</span>, <span class="string">&#x27;index.html&#x27;</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在package.json中添加启动命令</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;start&quot;: &quot;electron .&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>执行启动命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn start</span><br></pre></td></tr></table></figure><p>显示效果如下</p><p><img src= "/img/loading.gif" data-lazy-src="http://mei160.cn/images/quick_start_electron_app.png" alt="quick start electron app"></p><p>这样，一个十分简单的Electron App就完成了。</p><h3 id="正式开始"><a href="#正式开始" class="headerlink" title="正式开始"></a>正式开始</h3><p>刚刚的项目虽然已经能够启动来，但还有些简单，对于需求和业务复杂的项目来说还有很多不足。</p><p>比如，主进程和渲染进程改如何调试？我想用最新的ES特性该怎么做？想用TypeScript该怎么配置？想用React，Vue，Angular来写UI呢？</p><p>接下来我们将一一解决这些问题。</p><h4 id="使用Webpack来编译我们的代码"><a href="#使用Webpack来编译我们的代码" class="headerlink" title="使用Webpack来编译我们的代码"></a>使用Webpack来编译我们的代码</h4><p>首先调整一下目录结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── app                                 </span><br><span class="line">│   └── index.js                        主进程入口文件</span><br><span class="line">├── build                               构建相关的脚本和配置</span><br><span class="line">│   └── webpack.config.js</span><br><span class="line">├── output                              编译结果输出目录</span><br><span class="line">└── src                                 </span><br><span class="line">    └── index.html                      渲染进程入口文件 </span><br></pre></td></tr></table></figure><p>我们这里选择webpack作为构建工具。</p><p>Electron本身的TypeScript类型声明文件很齐全，开发体验不错，因此这里选择TypeScript作为主要开发语言。</p><p>首先安装必要的依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D webpack webpack-cli webpack-merge typescript awesome-typescript-loader</span><br></pre></td></tr></table></figure><p>在build目录添加webpack.config.base.js，配置如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.tsx&#x27;</span>, <span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.jsx&#x27;</span>],</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">&#x27;app&#x27;</span>: path.resolve(__dirname, <span class="string">&#x27;../app&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;src&#x27;</span>: path.resolve(__dirname, <span class="string">&#x27;../src&#x27;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">      test: <span class="regexp">/\.tsx?$/</span>,</span><br><span class="line">      exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">      use: [&#123;</span><br><span class="line">        loader: <span class="string">&#x27;awesome-typescript-loader&#x27;</span>,</span><br><span class="line">      &#125;],</span><br><span class="line">    &#125;],</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.join(__dirname, <span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;output&#x27;</span>, <span class="string">&#x27;main&#x27;</span>),</span><br><span class="line">    filename: <span class="string">&#x27;[name].js&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// https://webpack.js.org/configuration/node/</span></span><br><span class="line">  <span class="comment">// 避免webpack配置导致的__dirname和__filename和实际输出文件的不一致</span></span><br><span class="line">  node: &#123;</span><br><span class="line">    __dirname: <span class="literal">false</span>,</span><br><span class="line">    __filename: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 启用source-map</span></span><br><span class="line">  devtool: <span class="string">&#x27;source-map&#x27;</span>,</span><br><span class="line">  plugins: [</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里是基础的webpack配置，将应用于主进程和preload的代码编译。</p><p>接下来在build目录添加webpack.config.main.js作为主进程的webpack配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; merge &#125; = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> baseConfig = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.config.base&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(baseConfig, &#123;</span><br><span class="line">  mode: process.env.NODE_ENV,</span><br><span class="line">  <span class="comment">// https://webpack.js.org/configuration/target/</span></span><br><span class="line">  <span class="comment">// webpack可以针对多种环境或目标进行编译，包括electron-main和electron-preload。</span></span><br><span class="line">  target: <span class="string">&#x27;electron-main&#x27;</span>,</span><br><span class="line">  entry: &#123;</span><br><span class="line">    index: <span class="string">&#x27;./app/index.ts&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.NamedModulesPlugin(),</span><br><span class="line">    <span class="keyword">new</span> webpack.EnvironmentPlugin(&#123;</span><br><span class="line">      NODE_ENV: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>添加<code>tsconfig.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://www.typescriptlang.org/docs/handbook/tsconfig-json.html</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;commonjs&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span>: <span class="string">&quot;node&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;importHelpers&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;es2015&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span>: <span class="string">&quot;react&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;sourceMap&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;noImplicitAny&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;strict&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;allowSyntheticDefaultImports&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;experimentalDecorators&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span>: <span class="string">&quot;.&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;paths&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;app/*&quot;</span>: [<span class="string">&quot;app/*&quot;</span>],</span><br><span class="line">      <span class="attr">&quot;src/*&quot;</span>: [<span class="string">&quot;src/*&quot;</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;include&quot;</span>: [<span class="string">&quot;app/**/*&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span>: [<span class="string">&quot;node_modules&quot;</span>, <span class="string">&quot;packages&quot;</span>, <span class="string">&quot;public&quot;</span>, <span class="string">&quot;mock&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>删除<code>app/index.js</code>，添加<code>app/index.ts</code>，现在我们就可以使用TypeScript来编写electron应用了。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; app, BrowserWindow &#125; <span class="keyword">from</span> <span class="string">&#x27;electron&#x27;</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"></span><br><span class="line">app.on(<span class="string">&#x27;ready&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="built_in">window</span> = <span class="keyword">new</span> BrowserWindow()</span><br><span class="line">  <span class="built_in">window</span>.loadFile(path.resolve(__dirname, <span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;src&#x27;</span>, <span class="string">&#x27;index.html&#x27;</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在package.json中添加命令</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;dev:main&quot;: &quot;NODE_ENV=development webpack --config ./build/webpack.config.main.js --watch&quot;</span><br></pre></td></tr></table></figure><p>将 <code>main</code> 字段改为输出文件的路径：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;main&quot;: &quot;output/main/index.js&quot;,</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn dev:main</span><br></pre></td></tr></table></figure><p>发现output目录下得到了编译后的<code>index.js</code>文件和sourcemap文件，接下来运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn start</span><br></pre></td></tr></table></figure><p>即可启动electron app</p><h4 id="调试主进程"><a href="#调试主进程" class="headerlink" title="调试主进程"></a>调试主进程</h4><h5 id="使用chrome调试"><a href="#使用chrome调试" class="headerlink" title="使用chrome调试"></a>使用chrome调试</h5><p>首先可以通过electron本身提供的inspect项和chrome进行调试</p><p>修改package.json中的<code>start</code>命令</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;start&quot;: &quot;electron . --inspect-brk=5858&quot;,</span><br></pre></td></tr></table></figure><p>运行后打开chrome，输入 <code>chrome://inspect</code>进入inspect页面，可以看到</p><p><img src= "/img/loading.gif" data-lazy-src="http://mei160.cn/images//inspect_main_process_in_chrome.png"></p><p>点击 <code>Configure</code> 输入 <code>localhost:5858</code>，点击<code>Done</code>，即可在下面的Remote Target列表中看到我们的Electron应用，点击inspect便可以开始调试。</p><p><a href="https://nodejs.org/en/docs/guides/debugging-getting-started/">文档参考</a></p><h5 id="使用vscode调试"><a href="#使用vscode调试" class="headerlink" title="使用vscode调试"></a>使用vscode调试</h5><p>尽管chrome的开发者工具用来调试已经相当好用，但还是抵挡不了将debugger集成到编辑器中的诱惑：在编辑器中源代码直接打断点调试实在是太方便了。</p><p>vscode中配置十分简单，打开debug面板，点击添加配置，launch.json配置如下:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;configurations&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;node&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Launch Program&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;program&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;/app/index.ts&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;skipFiles&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;&lt;node_internals&gt;/**&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;runtimeExecutable&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;/node_modules/.bin/electron&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;windows&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;runtimeExecutable&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;/node_modules/.bin/electron.cmd&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;outFiles&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;$&#123;workspaceRoot&#125;/output/main/*.js&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;args&quot;</span> : [<span class="string">&quot;.&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打开<code>app/index.ts</code>，在想要调试的代码左边点击打上断点，在debug面板点击<code>start debugging</code>，就会发现代码执行到断点处停住，接下来就可以自由在vscode中调试了。</p><p><a href="https://www.electronjs.org/docs/tutorial/debugging-main-process-vscode">文档参考</a></p><h5 id="使用webstorm调试"><a href="#使用webstorm调试" class="headerlink" title="使用webstorm调试"></a>使用webstorm调试</h5><p>和vscode类似，在webstorm中也是通过添加配置来进行调试，点击添加配置，选择Node.js，填写如下：</p><p><img src= "/img/loading.gif" data-lazy-src="http://mei160.cn/images/debug_main_process_in_webstorm.png"></p><p><a href="https://blog.jetbrains.com/webstorm/2016/05/getting-started-with-electron-in-webstorm/">文档参考</a></p><h4 id="调试渲染进程"><a href="#调试渲染进程" class="headerlink" title="调试渲染进程"></a>调试渲染进程</h4><h5 id="打开控制台"><a href="#打开控制台" class="headerlink" title="打开控制台"></a>打开控制台</h5><p>修改<code>app/index.ts</code>中的代码:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.on(<span class="string">&#x27;ready&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="built_in">window</span> = <span class="keyword">new</span> BrowserWindow()</span><br><span class="line">  <span class="built_in">window</span>.loadFile(path.resolve(__dirname, <span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;src&#x27;</span>, <span class="string">&#x27;index.html&#x27;</span>))</span><br><span class="line">  <span class="keyword">if</span>(process.env.NODE_ENV === <span class="string">&#x27;development&#x27;</span>)&#123;</span><br><span class="line">    <span class="built_in">window</span>.webContents.openDevTools()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在开发环境下，就会自动打开chrome调试工具了</p><h5 id="添加preload"><a href="#添加preload" class="headerlink" title="添加preload"></a>添加preload</h5><p>在<code>app</code>文件夹下添加<code>preload.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ipcRenderer &#125; <span class="keyword">from</span> <span class="string">&#x27;electron&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getAppInfo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> ipcRenderer.invoke(<span class="string">&#x27;app/get_basic_info&#x27;</span>) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> JSBridge = &#123;</span><br><span class="line">  getAppInfo,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.JSBridge = JSBridge;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> JSBridgeType = <span class="keyword">typeof</span> JSBridge;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>并在app中添加对ipc的处理：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app.on(<span class="string">&#x27;will-finish-launching&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  ipcMain.handle(<span class="string">&#x27;app/get_basic_info&#x27;</span>, <span class="function"><span class="keyword">function</span> <span class="title">handleAppGetBasicInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      version: app.getVersion(),</span><br><span class="line">      name: app.name,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>由于window上没有JSBridge属性，ts会报错，此时我们在根目录添加一个global.d.ts:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; JSBridgeType &#125; <span class="keyword">from</span> <span class="string">&quot;app/preload&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="built_in">global</span>&#123;</span><br><span class="line">  <span class="keyword">interface</span> Window&#123;</span><br><span class="line">    JSBridge: JSBridgeType</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来在build下添加<code>webpack.config.preload.js</code>，将preload也输出到output目录下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&quot;webpack&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; merge &#125; = <span class="built_in">require</span>(<span class="string">&quot;webpack-merge&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> baseConfig = <span class="built_in">require</span>(<span class="string">&quot;./webpack.config.base&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(baseConfig, &#123;</span><br><span class="line">  mode: process.env.NODE_ENV,</span><br><span class="line">  target: <span class="string">&quot;electron-preload&quot;</span>,</span><br><span class="line">  entry: &#123;</span><br><span class="line">    preload: <span class="string">&quot;./app/preload.ts&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.NamedModulesPlugin(),</span><br><span class="line">    <span class="keyword">new</span> webpack.EnvironmentPlugin(&#123;</span><br><span class="line">      NODE_ENV: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在package.json中添加一条preload的开发命令:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;dev:preload&quot;: &quot;NODE_ENV=development webpack --config ./build/webpack.config.preload.js --watch&quot;</span><br></pre></td></tr></table></figure><p>启动后就会发现output/main目录下多出一个preload.js及sourcemap</p><p>修改<code>app/index.ts</code>，创建BrowserWindow时注入preload.js</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PRELOAD = path.resolve(__dirname, <span class="string">&#x27;preload.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">&#x27;ready&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="built_in">window</span> = <span class="keyword">new</span> BrowserWindow(&#123;webPreferences: &#123;preload: PRELOAD&#125;&#125;)</span><br><span class="line">  <span class="built_in">window</span>.loadFile(path.resolve(__dirname, <span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;src&#x27;</span>, <span class="string">&#x27;index.html&#x27;</span>))</span><br><span class="line">  <span class="keyword">if</span>(process.env.NODE_ENV === <span class="string">&#x27;development&#x27;</span>)&#123;</span><br><span class="line">    <span class="built_in">window</span>.webContents.openDevTools()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在<code>app/index.html</code>中添加按钮获取app信息:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      html,</span><br><span class="line">      body &#123;</span><br><span class="line">        background-color: antiquewhite;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">handleGetAppInfo</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> &#123; version, name &#125; = <span class="keyword">await</span> <span class="built_in">window</span>.JSBridge.getAppInfo();</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(version,name)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#version&#x27;</span>).innerText = version</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#name&#x27;</span>).innerText = name</span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dt</span>&gt;</span>version<span class="tag">&lt;/<span class="name">dt</span>&gt;</span> <span class="tag">&lt;<span class="name">dd</span> <span class="attr">id</span>=<span class="string">&quot;version&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dt</span>&gt;</span>name<span class="tag">&lt;/<span class="name">dt</span>&gt;</span> <span class="tag">&lt;<span class="name">dd</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;handleGetAppInfo()&quot;</span>&gt;</span>get app info<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动app，点击按钮，发现能够正常获取到app信息</p><p>至此我们基本的开发流程就都实现了，主要包括：</p><ul><li>主进程，渲染进程，preload的编译</li><li>主进程和渲染进程的调试</li></ul><p>看起来是完备了，但开发时就会发现还不够用呢。接下来对这个流程做一些补充</p><h3 id="流程完善"><a href="#流程完善" class="headerlink" title="流程完善"></a>流程完善</h3><h4 id="启动命令完善"><a href="#启动命令完善" class="headerlink" title="启动命令完善"></a>启动命令完善</h4><p>首先安装cross-env和concurrently</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D cross-env concurrently</span><br></pre></td></tr></table></figure><p>修改<code>dev:main</code>和<code>dev:preload</code>命令并添加<code>dev</code>命令：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;dev:main&quot;: &quot;webpack --config ./build/webpack.config.main.js --watch&quot;,</span><br><span class="line">&quot;dev:preload&quot;: &quot;webpack --config ./build/webpack.config.preload.js --watch&quot;,</span><br><span class="line">&quot;dev&quot;: &quot;cross-env NODE_ENV=development concurrently \&quot;npm run dev:main\&quot; \&quot;npm run dev:preload\&quot;&quot;</span><br></pre></td></tr></table></figure><p>cross-env用于兼容各平台下的<strong>环境变量设置</strong>，concurrently用于同时运行多个webpack编译的watch模式。之后app的编译只需运行<code>yarn dev</code>即可</p><h4 id="使用React做渲染进程开发"><a href="#使用React做渲染进程开发" class="headerlink" title="使用React做渲染进程开发"></a>使用React做渲染进程开发</h4><p>首先用<code>create-react-app</code>创建一个React应用，在项目根目录下运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn create react-app renderer</span><br></pre></td></tr></table></figure><p>进入renderer目录运行<code>yarn start</code>，应用默认在2333端口启动，如果报错<code>The react-scripts package provided by Create React App requires a dependency: webpack</code>，可以在renderer目录下添加.env文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SKIP_PREFLIGHT_CHECK&#x3D;true</span><br></pre></td></tr></table></figure><p>这时候我们将<code>app/index.ts</code>中的<code>window.loadFile ...</code>改为</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.loadURL(<span class="string">&#x27;http://localhost:2333&#x27;</span>)</span><br></pre></td></tr></table></figure><p>重启Electron应用即可看到渲染的窗口加载了本地的React应用</p><p>但是这里会有一个问题，在打包时我们会将渲染进程的代码打包进去，窗口加载实际上是通过loadFile的方式进行的，如果本地开发的时候使用本地http地址开发，实际效果和打包出来的效果是会有出入的，因此我们再做一些修改，将开发时生成的文件输出到<code>output/renderer</code>目录下，然后通过loadFile的方式加载它。</p><p>那么我们就需要修改cra项目的webpack中对应的output配置和path中的appBuild配置来改变输出目录，然后修改devServer的配置让开发时也输出文件，并且修改socket配置保证热更新能正常使用。</p><p>因为cra项目本身没有将配置暴露出来，这里我们做的改动不多，因此选择使用<code>react-app-rewired</code>而非eject弹出配置。</p><p>首先安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D react-app-rewired react-dev-utils</span><br></pre></td></tr></table></figure><p>然后在renderer目录下新建<code>config-overrides.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> OUTPUT_PATH = path.resolve(__dirname, <span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;output&#x27;</span>, <span class="string">&#x27;renderer&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    webpack: <span class="function"><span class="keyword">function</span>(<span class="params">config, env</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 修改输出目录</span></span><br><span class="line">        config.output.path = OUTPUT_PATH</span><br><span class="line">        <span class="comment">// 修改publicPath，否则静态资源文件会引用失败</span></span><br><span class="line">        config.output.publicPath = <span class="string">&#x27;./&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;,</span><br><span class="line">    devServer: <span class="function"><span class="keyword">function</span>(<span class="params">configFunction</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">proxy, allowedHost</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">const</span> config = configFunction(proxy, allowedHost);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将文件输出到硬盘</span></span><br><span class="line">            config.writeToDisk = <span class="literal">true</span></span><br><span class="line">            <span class="comment">// 修改sock相关配置保证热更新功能正常</span></span><br><span class="line">            config.host = process.env.HOST || <span class="string">&#x27;0.0.0.0&#x27;</span>;</span><br><span class="line">            config.sockHost = process.env.WDS_SOCKET_HOST;</span><br><span class="line">            config.sockPath = process.env.WDS_SOCKET_PATH; <span class="comment">// default: &#x27;/sockjs-node&#x27;</span></span><br><span class="line">            config.sockPort = process.env.WDS_SOCKET_PORT;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> config;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    paths: <span class="function"><span class="keyword">function</span>(<span class="params">paths, env</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 修改build下的输出目录</span></span><br><span class="line">        paths.appBuild = OUTPUT_PATH</span><br><span class="line">        <span class="keyword">return</span> paths;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新启动react项目，发现<code>output/renderer</code>目录下输出了对应的静态文件</p><p>然后我们将<code>app/index.ts</code>中的<code>window.loadURL ...</code>注释，添加一行</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// window.loadURL(&#x27;http://localhost:2333&#x27;)</span></span><br><span class="line"><span class="built_in">window</span>.loadFile(path.resolve(__dirname, <span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;output&#x27;</span>, <span class="string">&#x27;renderer&#x27;</span>, <span class="string">&#x27;index.html&#x27;</span>))</span><br></pre></td></tr></table></figure><p>重新启动应用，发现加载成功。</p><h4 id="给devtools添加plugins"><a href="#给devtools添加plugins" class="headerlink" title="给devtools添加plugins"></a>给devtools添加plugins</h4><p>渲染进程使用了react进行开发，为了更方便的调试，我们来给devtools安装浏览器插件。</p><p>首先找到chrome插件的位置</p><ul><li><p>windows</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%LOCALAPPDATA%\Google\Chrome\User Data\Default\Extensions</span><br></pre></td></tr></table></figure></li><li><p>MacOS</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~&#x2F;Library&#x2F;Application Support&#x2F;Google&#x2F;Chrome&#x2F;Default&#x2F;Extensions</span><br></pre></td></tr></table></figure></li><li><p>Linux，有几个可能的路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~&#x2F;.config&#x2F;google-chrome&#x2F;Default&#x2F;Extensions&#x2F;</span><br><span class="line">~&#x2F;.config&#x2F;google-chrome-beta&#x2F;Default&#x2F;Extensions&#x2F;</span><br><span class="line">~&#x2F;.config&#x2F;google-chrome-canary&#x2F;Default&#x2F;Extensions&#x2F;</span><br><span class="line">~&#x2F;.config&#x2F;chromium&#x2F;Default&#x2F;Extensions&#x2F;</span><br></pre></td></tr></table></figure></li></ul><p>打开目录会发现下面都是根据以扩展id命名的文件夹，想要找到扩展对应的id，可以在chrome中打开<code>chrome://extensions/</code>，点击对应扩展的详细信息，即可从url参数上找到id。</p><p>以<code>React Developer Tools</code>在MacOS上的为例，在<code>app/index.ts</code>中添加：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EXTENSION_PATH_REACT_DEV_TOOLS = path.join(<span class="string">&#x27;/Users/wangshuwen/Library/Application Support/Google/Chrome/Default/Extensions/&#x27;</span>, <span class="string">&#x27;fmkadmapgofadopljbjfkapdkoienihi&#x27;</span>, <span class="string">&#x27;4.8.2_0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">&#x27;ready&#x27;</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> e = <span class="keyword">await</span> session.defaultSession.loadExtension(EXTENSION_PATH_REACT_DEV_TOOLS)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="built_in">window</span> = <span class="keyword">new</span> BrowserWindow(&#123;webPreferences: &#123;preload: PRELOAD&#125;&#125;)</span><br><span class="line">  <span class="built_in">window</span>.loadURL(<span class="string">&#x27;http://localhost:2333&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>由于Electron本身原因，通过<code>session.loadExtension</code>添加的插件目前React Dev Tools在file协议下无法访问文件，需要在http协议下进行调试。</p><p>备选方案：改为使用<code>BrowserWindow.addDevToolsExtension</code>方法添加插件，在Electron 9.0.0版本以下生效</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.on(<span class="string">&#x27;ready&#x27;</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  BrowserWindow.addDevToolsExtension(EXTENSION_PATH_REACT_DEV_TOOLS)</span><br><span class="line">  <span class="comment">// const e = await session.defaultSession.loadExtension(EXTENSION_PATH_REACT_DEV_TOOLS)</span></span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>但是注意这个方法即将被Electron废弃，待Electron修复<code>session.loadExtension</code>的问题后可以更换掉此方法。</p><p>如果觉得手动找插件添加的方式过于麻烦，也可以使用<a href="https://github.com/MarshallOfSound/electron-devtools-installer">electron-devtools-installer</a>这个库来进行扩展管理。</p><h3 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h3><ul><li><a href="https://www.electronjs.org/docs/tutorial/devtools-extension">devtools-extension</a></li><li><a href="https://www.electronjs.org/docs/api/session#sesloadextensionpath">session#load-extension</a></li><li><a href="https://github.com/electron/electron/issues/24011">Extensions don’t work with file:// protocol since 9.0.0</a></li></ul><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p>Electron常用的打包工具有这么几个：</p><ul><li><a href="https://github.com/electron/electron-packager">electron-packager</a></li><li><a href="https://github.com/electron-userland/electron-forge">electron-forge</a></li><li><a href="https://github.com/electron-userland/electron-builder">electron-builder</a></li></ul><p><code>electron-packager</code>和<code>electron-builder</code>是单纯的Electron打包工具，<code>electron-forge</code>类似于一个CLI工具，参与从创建项目到开发和打包的流程。</p><p><code>electron-packager</code>较为轻量，上手使用迅速，适合简单的项目打包。相对而言<code>electron-builder</code>配置更加复杂和全面一些，这里我们选择<code>electron-builder</code>作为打包工具。</p><h3 id="基本打包配置"><a href="#基本打包配置" class="headerlink" title="基本打包配置"></a>基本打包配置</h3><p>首先我们需要将主进程、preload、渲染进程的代码编译输出到output目录，假定output目录下文件结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── main</span><br><span class="line">│   ├── index.js                &#x2F;&#x2F; 主进程入口文件</span><br><span class="line">│   ├── index.js.map</span><br><span class="line">│   ├── preload.js              &#x2F;&#x2F; preload文件</span><br><span class="line">│   └── preload.js.map</span><br><span class="line">└── renderer                    &#x2F;&#x2F; 渲染进程的静态文件</span><br><span class="line">    ├── static </span><br><span class="line">    ├── favicon.ico</span><br><span class="line">    ├── index.html</span><br><span class="line">    ├── manifest.json</span><br><span class="line">    ├── precache-manifest.4afa4365236dd3705833cb35553e2f08.js</span><br><span class="line">    ├── robots.txt</span><br><span class="line">    ├── service-worker.js</span><br><span class="line">    └── asset-manifest.json</span><br></pre></td></tr></table></figure><h4 id="添加build命令"><a href="#添加build命令" class="headerlink" title="添加build命令"></a>添加build命令</h4><p>在<code>package.json</code>中添加build命令：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;build:main&quot;: &quot;webpack --config ./build/webpack.config.main.js&quot;,</span><br><span class="line">&quot;build:preload&quot;: &quot;webpack --config ./build/webpack.config.preload.js&quot;,</span><br><span class="line">&quot;build:renderer&quot;: &quot;cd ./renderer &amp;&amp; npm run build&quot;,</span><br><span class="line">&quot;build&quot;: &quot;cross-env NODE_ENV=production concurrently \&quot;npm run build:main\&quot; \&quot;npm run build:preload\&quot; \&quot;npm run build:renderer\&quot;&quot;</span><br></pre></td></tr></table></figure><p>启动 <code>npm run build</code>，可以发现output目录下生成了对应的文件目录。</p><h4 id="安装electron-builder"><a href="#安装electron-builder" class="headerlink" title="安装electron-builder"></a>安装electron-builder</h4><p>安装必需的依赖项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add electron-builder -D</span><br></pre></td></tr></table></figure><p>package.json中添加”postinstall”命令，在安装依赖项后可以自动安装electron-builder的依赖项</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;postinstall&quot;: &quot;electron-builder install-app-deps&quot;</span><br></pre></td></tr></table></figure><h4 id="添加配置文件"><a href="#添加配置文件" class="headerlink" title="添加配置文件"></a>添加配置文件</h4><p>在项目根目录添加<code>electron-builder.yml</code>，electron-builder会默认读取该文件作为配置文件。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">appId:</span> <span class="string">&#x27;com.my-app&#x27;</span></span><br><span class="line"><span class="attr">productName:</span> <span class="string">&#x27;My App&#x27;</span></span><br><span class="line"><span class="attr">copyright:</span> <span class="string">Copyright</span> <span class="string">©</span> <span class="number">2020</span> <span class="string">$&#123;author&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">directories:</span></span><br><span class="line">  <span class="attr">buildResources:</span> <span class="string">resources</span></span><br><span class="line">  <span class="attr">output:</span> <span class="string">release/$&#123;version&#125;</span></span><br><span class="line">  <span class="attr">app:</span> <span class="string">.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">buildVersion:</span> <span class="number">1.0</span><span class="number">.0</span> </span><br><span class="line"><span class="attr">artifactName:</span> <span class="string">$&#123;productName&#125;-$&#123;version&#125;-$&#123;channel&#125;.$&#123;ext&#125;</span></span><br><span class="line"><span class="attr">files:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="string">output</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">resources</span></span><br><span class="line"><span class="attr">asar:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">publish:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">provider:</span> <span class="string">generic</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://update.electron-builder.com</span></span><br><span class="line">    <span class="attr">channel:</span> <span class="string">latest</span></span><br><span class="line"><span class="attr">releaseInfo:</span></span><br><span class="line">  <span class="attr">releaseName:</span> <span class="string">&#x27;A New Playground for Electron!&#x27;</span></span><br><span class="line">  <span class="attr">releaseNotes:</span> <span class="string">&#x27;Some new features now is available.&#x27;</span></span><br></pre></td></tr></table></figure><p>简单分析一下上面的配置文件：</p><ul><li><strong>appId</strong>: 应用id，不同平台有不同的规则<ul><li><a href="https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070">MacOS</a></li><li><a href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c?redirectedfrom=MSDN">Windows</a></li></ul></li><li><strong>directories</strong><ul><li>buildResources: 构建资源文件目录，不会打包到app中，如果需要打包其中的一些文件比如托盘图标，需要在files字段中指定，比如 <code>&quot;files&quot;: [&quot;**/*&quot;, &quot;build/icon.*&quot;]</code></li><li>output: 打包输出目录</li><li>app: 包含package.json的应用目录，默认会读取 <code>app</code>, <code>www</code>, 或当前工作目录，通常不用指定 </li></ul></li><li><strong>files</strong>: 指定需要复制过去打包的文件，<a href="https://www.electron.build/configuration/contents#files">参考文档</a></li><li><strong>asar</strong>: 是否打包成asar档案文件, <a href="https://www.electronjs.org/docs/tutorial/application-packaging">参考文档</a></li><li><strong>publish</strong>: 发布选项，和更新服务器类型相关， <a href="https://www.electron.build/configuration/publish">参考文档</a></li></ul><h4 id="1-4-添加打包命令"><a href="#1-4-添加打包命令" class="headerlink" title="1.4 添加打包命令"></a>1.4 添加打包命令</h4><p>在package.json中添加打包命令:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;pack-mac&quot;: &quot;electron-builder build --mac&quot;,</span><br><span class="line">&quot;pack-win&quot;: &quot;electron-builder build --win&quot;,</span><br><span class="line">&quot;pack-all&quot;: &quot;electron-builder build -mw&quot;,</span><br></pre></td></tr></table></figure><p>接下来开始打包，首先运行<code>yarn run build</code>，编译文件到output目录，接下来运行<code>yarn pack-all</code>，开始打包Windows和MacOS的应用。</p><p>运行结束后可以发现在release目录下出现了对应的版本文件夹，里面有打包好的安装文件和更新入口文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">└── 1.0.0</span><br><span class="line">    ├── My App-1.0.0-latest.dmg</span><br><span class="line">    ├── My App-1.0.0-latest.dmg.blockmap</span><br><span class="line">    ├── My App-1.0.0-latest.exe</span><br><span class="line">    ├── My App-1.0.0-latest.exe.blockmap</span><br><span class="line">    ├── My App-1.0.0-latest.zip</span><br><span class="line">    ├── builder-effective-config.yaml</span><br><span class="line">    ├── latest-mac.yml</span><br><span class="line">    ├── latest.yml</span><br><span class="line">    ├── mac</span><br><span class="line">    └── win-unpacked</span><br></pre></td></tr></table></figure><h3 id="代码签名"><a href="#代码签名" class="headerlink" title="代码签名"></a>代码签名</h3><p>electron-builder支持MacOS和Windows的签名</p><p>但是由于MacOS应用的代码签名必须在MacOS机器上完成，而且MacOS可以进行Windows应用签名，因此建议使用MacOS机器进行打包签名。</p><h4 id="MacOS代码签名"><a href="#MacOS代码签名" class="headerlink" title="MacOS代码签名"></a>MacOS代码签名</h4><p>electron在进行代码签名的时候会自动检查环境变量中的对应字段，包括：</p><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td><strong>CSC_LINK</strong></td><td>.p12或.pfx证书文件的HTTPS链接（或base64编码数据，或file链接，或本地路径）。</td></tr><tr><td><strong>CSC_KEY_PASSWORD</strong></td><td>证书密码</td></tr><tr><td><strong>CSC_NAME</strong></td><td>(MacOS) login.keychain中的证书名称</td></tr><tr><td><strong>CSC_IDENTITY_AUTO_DISCOVERY</strong></td><td>(MacOS) MacOS上是否自动使用keychain中的身份</td></tr><tr><td><strong>CSC_KEYCHAIN</strong></td><td>(MacOS) keychain名称。如果未指定CSC_LINK则使用。默认为系统默认keychain。</td></tr><tr><td><strong>WIN_CSC_LINK</strong></td><td>(Windows) 类似<code>CSC_LINK</code>，在MacOS上签名Windows应用时使用</td></tr><tr><td><strong>WIN_CSC_KEY_PASSWORD</strong></td><td>(Windows) 类似<code>CSC_KEY_PASSWORD</code>，在MacOS上签名Windows应用时使用</td></tr></tbody></table><p>在MacOS上签名就可以有几种选择：</p><ol><li><p>安装对应的证书到keychain，然后<code>CSC_NAME</code>指定为证书在keychain中显示的名称，<code>CSC_KEY_PASSWORD</code>设置为证书密码，打包时就会自动进行签名。</p></li><li><p>将证书文件放在对应目录，<code>CSC_LINK</code>设置为对应的路径，<code>CSC_KEY_PASSWORD</code>设置为证书密码即可。若担心证书和密码都放在项目中不合适，可以去掉项目中的证书密码，修改打包脚本，每次运行打包命令时输入密码并设置到环境变量。</p></li></ol><h4 id="Windows代码签名"><a href="#Windows代码签名" class="headerlink" title="Windows代码签名"></a>Windows代码签名</h4><ol><li>在Windows机器上签名，同样的指定<code>CSC_LINK</code>和<code>CSC_KEY_PASSWORD</code>即可</li><li>在Mac机器上签名，需要将<code>CSC_LINK</code>和<code>CSC_KEY_PASSWORD</code>替换为<code>WIN_CSC_LINK</code>和<code>WIN_CSC_KEY_PASSWORD</code></li></ol><p>如果需要申请Windows代码签名证书，可以参考这篇<a href="https://docs.microsoft.com/zh-cn/windows-hardware/drivers/dashboard/get-a-code-signing-certificate">文档</a></p><h3 id="更详细的平台target配置"><a href="#更详细的平台target配置" class="headerlink" title="更详细的平台target配置"></a>更详细的平台target配置</h3><p>electron-builder支持多种类型的安装文件打包</p><ul><li>Mac平台支持.dmg和.pkg，</li><li>Windows平台支持nsis, nsisWeb, appx, squirrelWindows</li></ul><h4 id="MacOS配置"><a href="#MacOS配置" class="headerlink" title="MacOS配置"></a>MacOS配置</h4><p>以MacOS下打包.dmg文件为例:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">mac:</span></span><br><span class="line">  <span class="attr">target:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">dmg</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">resources/icon.icns</span></span><br><span class="line">  <span class="attr">category:</span> <span class="string">public.app-category.developer-tools</span></span><br><span class="line">  <span class="attr">hardenedRuntime:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">entitlements:</span> <span class="string">resources/entitlements.mac.plist</span></span><br><span class="line">  <span class="attr">extendInfo:</span> </span><br><span class="line">    <span class="attr">NSMicrophoneUsageDescription:</span> <span class="string">请允许访问您的麦克风</span></span><br><span class="line">    <span class="attr">NSCameraUsageDescription:</span> <span class="string">请允许访问您的摄像头</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dmg:</span></span><br><span class="line">  <span class="attr">background:</span> <span class="string">resources/background.png</span></span><br><span class="line">  <span class="attr">iconSize:</span> <span class="number">128</span></span><br><span class="line">  <span class="attr">iconTextSize:</span> <span class="number">13</span></span><br><span class="line">  <span class="attr">window:</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">300</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">200</span></span><br></pre></td></tr></table></figure><ul><li><strong>category</strong> 应用在Mac下的分类，分类<a href="https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/LaunchServicesKeys.html#//apple_ref/doc/uid/TP40009250-SW8">参考文档</a></li><li><strong>hardenedRuntime</strong> 应用是否使用hardenedRuntime进行签名。hardenedRuntime用于管理macOS应用程序的安全保护和资源访问。相关的<a href="">参考文档</a></li><li><strong>entitlements</strong> 对应的entitlements.mac.plist文件，该文件用于获取授权的定义。<a href="https://developer.apple.com/documentation/bundleresources/entitlements">参考文档</a></li><li><strong>extendInfo</strong> Info.plist的额外条目，主要用于配置一些应用属性。<a href="https://developer.apple.com/documentation/bundleresources/information_property_list">参考文档</a></li></ul><p>比如下面这个entitlements.mac.plist</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">plist</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//Apple//DTD PLIST 1.0//EN&quot;</span> <span class="meta-string">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.security.device.audio-input<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.security.device.camera<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure><p>声明了对录音和摄像头权限的申请</p><h4 id="Windows配置"><a href="#Windows配置" class="headerlink" title="Windows配置"></a>Windows配置</h4><p>以打包nsis文件为例</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">win:</span></span><br><span class="line">  <span class="attr">target:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">target:</span> <span class="string">nsis</span></span><br><span class="line">      <span class="attr">arch:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">x64</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">ia32</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">resources/icon.ico</span></span><br><span class="line"></span><br><span class="line"><span class="attr">nsis:</span></span><br><span class="line">  <span class="attr">oneClick:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">perMachine:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">allowToChangeInstallationDirectory:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">resources/eula.txt</span></span><br><span class="line">  <span class="attr">deleteAppDataOnUninstall:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">displayLanguageSelector:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li><strong>oneClick</strong> 是否创建一个<code>oneClick</code>安装程序，和通常的windows安装程序不一样，<code>oneClick</code>安装程序点击后会直接安装，不需要一步一步选择选项然后点击确定，但在用户体验来说可能用户觉得不能选择安装目录，用户等选项有些流氓，而且看不到安装进度不知道什么时候安装成功。</li><li><strong>perMachine</strong> 是否显示安装模式，即选择安装给所有用户或者安装给当前用户</li><li><strong>allowToChangeInstallationDirectory</strong> 允许改变安装目录</li><li><strong>license</strong> 最终用户许可协议，支持.txt, .rtf, .html</li><li><strong>deleteAppDataOnUninstall</strong> 卸载时清除数据</li><li><strong>displayLanguageSelector</strong> 是否显示语言选择器，选否则根据系统语言自动判断</li></ul><h3 id="多平台的插件打包"><a href="#多平台的插件打包" class="headerlink" title="多平台的插件打包"></a>多平台的插件打包</h3><h4 id="找到插件执行文件"><a href="#找到插件执行文件" class="headerlink" title="找到插件执行文件"></a>找到插件执行文件</h4><p>在MacOS下通常是*.plugin文件，Windows下为*.dll文件，这里以32.0.0.414版本的flash player为例子，到adobe flash官网下载并安装flash player后，其目录通常在</p><ul><li>MacOS： /Library/Internet Plug-Ins/PepperFlashPlayer/PepperFlashPlayer.plugin</li><li>Windows: C:\Windows\SysWOW64\Macromed\Flash\pepflashplayer32_0_0_414.dll 或 C:\Windows\System32\Macromed\Flash\pepflashplayer64_32_0_0_414.dll</li></ul><h4 id="添加编译配置"><a href="#添加编译配置" class="headerlink" title="添加编译配置"></a>添加编译配置</h4><p>将找到的插件复制到项目的plugins目录下，根据平台区分目录，假设目录如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plugins</span><br><span class="line">├── darwin</span><br><span class="line">│   └── PepperFlashPlayer.plugin</span><br><span class="line">└── win32</span><br><span class="line">    └── pepflashplayer.dll</span><br></pre></td></tr></table></figure><p>接下来在webpack配置中添加配置，启动编译时可以将plugins下对应平台的文件自动复制到output下的plugins目录</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CopyPlugin = <span class="built_in">require</span>(<span class="string">&#x27;copy-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据平台判断插件目录</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPluginSourceDir</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (process.platform === <span class="string">&quot;darwin&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> path.resolve(__dirname, <span class="string">&quot;..&quot;</span>, <span class="string">&quot;plugins&quot;</span>, <span class="string">&quot;darwin&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (process.platform === <span class="string">&quot;win32&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> path.resolve(__dirname, <span class="string">&quot;..&quot;</span>, <span class="string">&quot;plugins&quot;</span>, <span class="string">&quot;win32&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`can not find plugins directory for platform <span class="subst">$&#123;process.platform&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> CopyPlugin(&#123;</span><br><span class="line">      patterns: [</span><br><span class="line">        &#123; </span><br><span class="line">          <span class="keyword">from</span>: getPluginSourceDir(),</span><br><span class="line">          to: path.resolve(__dirname, <span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;output&#x27;</span>, <span class="string">&#x27;plugins&#x27;</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="加载插件"><a href="#加载插件" class="headerlink" title="加载插件"></a>加载插件</h4><p>加载插件需要在app中通过调用对应的api，并且在创建BrowserWindow时将webPreferences选项中的plugins设置为true</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pluginName</span><br><span class="line"><span class="keyword">switch</span> (process.platform) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;win32&#x27;</span>:</span><br><span class="line">    pluginName = <span class="string">&#x27;pepflashplayer.dll&#x27;</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;darwin&#x27;</span>:</span><br><span class="line">    pluginName = <span class="string">&#x27;PepperFlashPlayer.plugin&#x27;</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">app.commandLine.appendSwitch(<span class="string">&#x27;ppapi-flash-path&#x27;</span>, path.join(__dirname, <span class="string">&#x27;..&#x27;</span>,<span class="string">&#x27;plugins&#x27;</span>, pluginName <span class="keyword">as</span> <span class="built_in">string</span>))</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">window</span> = <span class="keyword">new</span> BrowserWindow(&#123;webPreferences: &#123;preload: PRELOAD, plugins: <span class="literal">true</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><p>加载一个包含flash的url</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.loadURL(EXAMPLE_FLASH_URL)</span><br></pre></td></tr></table></figure><p>重新启动应用，发现flash可以正常运行了</p><h4 id="加载系统安装的-Pepper-Flash-插件"><a href="#加载系统安装的-Pepper-Flash-插件" class="headerlink" title="加载系统安装的 Pepper Flash 插件"></a>加载系统安装的 Pepper Flash 插件</h4><p>这种方式只适用于flash插件，上面的根据平台获取插件，加载指定目录等操作都不需要了，而是直接加载系统已经安装的flash插件，这也意味着如果系统没有安装flash插件就无法使用</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.commandLine.appendSwitch(<span class="string">&#x27;ppapi-flash-path&#x27;</span>, app.getPath(<span class="string">&#x27;pepperFlashSystemPlugin&#x27;</span>))</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">window</span> = <span class="keyword">new</span> BrowserWindow(&#123;webPreferences: &#123;preload: PRELOAD, plugins: <span class="literal">true</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><h3 id="创建多平台多环境打包的命令行工具"><a href="#创建多平台多环境打包的命令行工具" class="headerlink" title="创建多平台多环境打包的命令行工具"></a>创建多平台多环境打包的命令行工具</h3><p>在实际业务中，打包往往不是单纯的<code>electron-builder build</code>就可以实现，可能会有许多类似区分环境和平台，定制打包产出，打包后上传等需求，在这种时候可能就需要做一些更复杂的工作了。</p><p>比如在一个常见的业务场景，需要实现以下功能：</p><ol><li>版本更新;</li><li>同步更新信息到CHANGELOG;</li><li>区分环境打包;</li><li>区分平台打包;</li><li>打包后自动上传;</li></ol><p>针对这些功能做一个流程设计：</p><ol><li>输入版本号(不输入则自动patch)后，校验版本号是否正确，更新package.json</li><li>输入更新的信息和更新的描述，并同步写入到CHANGELOG</li><li>读取用户选择的环境，可以多选，并在后续的打包流程中针对不同环境实现不同的操作(环境变量注入等);</li><li>读取用户选择的平台，可以多选，在后续打包中只打包对应的平台;</li><li>打包结束后自动上传到服务器(以ftp为例);</li></ol><p>接下来根据功能流程设计来划分功能模块：</p><ol><li>Inquirer: 读取用户输入项并提供校验;</li><li>CommandExecutor: 执行命令行命令的函数;</li><li>JsonUpdater: 提供读写操作更新package.json和package-lock.json;</li><li>ChangelogUpdater: 更新CHANGELOG</li><li>Builder: 使用electron-builder进行打包操作</li><li>FileUploader: 通过ftp进行文件上传</li></ol><p>接下来实现这些功能模块：</p><p><code>build/packaging-cli/inquirer.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> inquirer <span class="keyword">from</span> <span class="string">&quot;inquirer&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> envs = [<span class="string">&quot;test&quot;</span>, <span class="string">&quot;prod&quot;</span>] <span class="keyword">as</span> <span class="keyword">const</span>;</span><br><span class="line"><span class="keyword">const</span> platforms = [<span class="string">&quot;win&quot;</span>, <span class="string">&quot;mac&quot;</span>] <span class="keyword">as</span> <span class="keyword">const</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> envType = <span class="keyword">typeof</span> envs[<span class="built_in">number</span>]</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> platformType = <span class="keyword">typeof</span> platforms[<span class="built_in">number</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = [</span><br><span class="line">  &#123; <span class="keyword">type</span>: <span class="string">&quot;input&quot;</span>, name: <span class="string">&quot;version&quot;</span>, message: <span class="string">`版本号？`</span> &#125;,</span><br><span class="line">  &#123; <span class="keyword">type</span>: <span class="string">&quot;input&quot;</span>, name: <span class="string">&quot;releaseName&quot;</span>, message: <span class="string">`更新标题`</span>, <span class="keyword">default</span>: <span class="string">&quot;更新&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="keyword">type</span>: <span class="string">&quot;editor&quot;</span>, name: <span class="string">&quot;releaseNotes&quot;</span>, message: <span class="string">`更新描述:`</span> &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="string">&quot;list&quot;</span>,</span><br><span class="line">    name: <span class="string">&quot;env&quot;</span>,</span><br><span class="line">    message: <span class="string">&quot;环境？&quot;</span>,</span><br><span class="line">    choices: envs.map(<span class="function">(<span class="params">e</span>) =&gt;</span> (&#123; name: e, value: e &#125;)),</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="string">&quot;list&quot;</span>,</span><br><span class="line">    name: <span class="string">&quot;platforms&quot;</span>,</span><br><span class="line">    message: <span class="string">&quot;平台？&quot;</span>,</span><br><span class="line">    choices: [</span><br><span class="line">      &#123; name: <span class="string">&quot;all&quot;</span>, value: platforms &#125;,</span><br><span class="line">      ...platforms.map(<span class="function">(<span class="params">p</span>) =&gt;</span> (&#123; name: p, value: [p] &#125;)),</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> QueryResult &#123;</span><br><span class="line">  env: envType;</span><br><span class="line">  platforms: platformType[];</span><br><span class="line">  version: <span class="built_in">string</span>;</span><br><span class="line">  releaseName: <span class="built_in">string</span>;</span><br><span class="line">  releaseNotes: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> inquirer.prompt&lt;QueryResult&gt;(options);</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>build/packaging-cli/command-executor.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; spawn &#125; <span class="keyword">from</span> <span class="string">&#x27;child_process&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">execCommand</span>(<span class="params">command: <span class="built_in">string</span>, args: <span class="built_in">string</span>[]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> ls = spawn(command, args, &#123; stdio: <span class="string">&#x27;inherit&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line">    ls.on(<span class="string">&#x27;error&#x27;</span>, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(error.message)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    ls.on(<span class="string">&#x27;close&#x27;</span>, <span class="function"><span class="params">code</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`[<span class="subst">$&#123;command&#125;</span> <span class="subst">$&#123;args.join(<span class="string">&#x27; &#x27;</span>)&#125;</span>]`</span> + <span class="string">`exited with code <span class="subst">$&#123;code&#125;</span>`</span>)</span><br><span class="line">      code === <span class="number">0</span> ? resolve() : reject(code)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>build/packaging-cli/json-updater.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> path <span class="keyword">from</span> <span class="string">&quot;path&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; readJsonSync, writeJSONSync &#125; <span class="keyword">from</span> <span class="string">&quot;fs-extra&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> PACKAGE_JSON_PATH = path.resolve(__dirname, <span class="string">&quot;..&quot;</span>, <span class="string">&quot;..&quot;</span>, <span class="string">&quot;package.json&quot;</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> PACKAGE_JSON_LOCK_PATH = path.resolve(__dirname, <span class="string">&quot;..&quot;</span>, <span class="string">&quot;..&quot;</span>, <span class="string">&quot;package-lock.json&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取json内容</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> readJSON = <span class="function">(<span class="params">path: <span class="built_in">string</span></span>) =&gt;</span> () =&gt; readJsonSync(path);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 覆写json变量</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> writeJSON = <span class="function">(<span class="params">path: <span class="built_in">string</span></span>) =&gt;</span> (vars: <span class="built_in">any</span>) =&gt; writeJSONSync(path, vars);</span><br></pre></td></tr></table></figure><p><code>build/packaging-cli/changelog-updater.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> fs <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"><span class="keyword">import</span> dayjs <span class="keyword">from</span> <span class="string">&#x27;dayjs&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> ChangeLog &#123;</span><br><span class="line">  version: <span class="built_in">string</span></span><br><span class="line">  releaseName: <span class="built_in">string</span></span><br><span class="line">  releaseNotes: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> CHANGE_LOG_PATH = path.resolve(__dirname, <span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;CHANGELOG.md&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">updateChangeLog</span>(<span class="params">cl: ChangeLog</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; version, releaseName, releaseNotes &#125; = cl</span><br><span class="line">  <span class="keyword">const</span> content = <span class="string">`## 版本：<span class="subst">$&#123;version&#125;</span></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- <span class="subst">$&#123;dayjs().format(<span class="string">&#x27;YYYY-MM-DD hh:mm:ss&#x27;</span>)&#125;</span></span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string"><span class="subst">$&#123;releaseName&#125;</span></span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">\`\`\` </span></span><br><span class="line"><span class="string"><span class="subst">$&#123;releaseNotes&#125;</span></span></span><br><span class="line"><span class="string">\`\`\`</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line">  fs.appendFileSync(CHANGE_LOG_PATH, content)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>build/packaging-cli/builder.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; envType, platformType &#125; <span class="keyword">from</span> <span class="string">&quot;./inquirer&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; execCommand &#125; <span class="keyword">from</span> <span class="string">&quot;./command-executor&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">build</span>(<span class="params">env: envType, platforms: platformType[]</span>) </span>&#123;</span><br><span class="line">  process.env.ENV = env;</span><br><span class="line">  <span class="keyword">await</span> execCommand(<span class="string">`npm`</span>, [<span class="string">&quot;run&quot;</span>, <span class="string">&quot;build&quot;</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> buildArgs = [<span class="string">&quot;build&quot;</span>];</span><br><span class="line">  <span class="keyword">if</span> (platforms.includes(<span class="string">&quot;win&quot;</span>)) buildArgs.push(<span class="string">&quot;--win&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (platforms.includes(<span class="string">&quot;mac&quot;</span>)) buildArgs.push(<span class="string">&quot;--mac&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> execCommand(<span class="string">`electron-builder`</span>, buildArgs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> FTPClient <span class="keyword">from</span> <span class="string">&quot;ftp&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> path <span class="keyword">from</span> <span class="string">&quot;path&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> fs <span class="keyword">from</span> <span class="string">&quot;fs&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> clientConfig = &#123;</span><br><span class="line">  host: <span class="string">&quot;host.to.your.server&quot;</span>,</span><br><span class="line">  port: <span class="number">60021</span>,</span><br><span class="line">  user: <span class="string">&quot;username&quot;</span>,</span><br><span class="line">  password: <span class="string">&quot;password&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Client = <span class="keyword">new</span> FTPClient();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">connectClient</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    Client.on(<span class="string">&quot;ready&quot;</span>, resolve);</span><br><span class="line">    Client.on(<span class="string">&quot;error&quot;</span>, reject);</span><br><span class="line">    Client.connect(clientConfig);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">putFile</span>(<span class="params">file: <span class="built_in">string</span>, dest: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    Client.put(file, dest, <span class="function">(<span class="params">err</span>) =&gt;</span> (err ? reject(err) : resolve()));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">uploadDir</span>(<span class="params">dir: <span class="built_in">string</span>, dest: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> connectClient();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> task: [<span class="built_in">string</span>, <span class="built_in">string</span>][] = fs</span><br><span class="line">    .readdirSync(dir)</span><br><span class="line">    .map(<span class="function">(<span class="params">f</span>) =&gt;</span> path.resolve(dir, f))</span><br><span class="line">    .filter(<span class="function">(<span class="params">f</span>) =&gt;</span> fs.statSync(f).isFile())</span><br><span class="line">    .map(<span class="function">(<span class="params">f</span>) =&gt;</span> ([f, <span class="string">`<span class="subst">$&#123;dest&#125;</span>/<span class="subst">$&#123;path.basename(f)&#125;</span>`</span>]));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> <span class="built_in">Promise</span>.all(task.map(<span class="function">(<span class="params">[src, dest]</span>) =&gt;</span> putFile(src, dest)));</span><br><span class="line"></span><br><span class="line">  Client.end();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后是packaging-cli脚本的入口文件，统领整个打包流程;</p><p><code>build/packaging-cli/index.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; query &#125; <span class="keyword">from</span> <span class="string">&quot;./inquirer&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; readJSON, PACKAGE_JSON_PATH &#125; <span class="keyword">from</span> <span class="string">&quot;./json-updater&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; execCommand &#125; <span class="keyword">from</span> <span class="string">&quot;./command-executor&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; updateChangeLog &#125; <span class="keyword">from</span> <span class="string">&quot;./changelog-updater&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; build &#125; <span class="keyword">from</span> <span class="string">&quot;./builder&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> path <span class="keyword">from</span> <span class="string">&quot;path&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; uploadDir &#125; <span class="keyword">from</span> <span class="string">&quot;./file-uploader&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> RELEASE_DIR = path.resolve(__dirname, <span class="string">&quot;..&quot;</span>, <span class="string">&quot;..&quot;</span>, <span class="string">&quot;release&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">startPackaging</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; version, env, platforms, releaseName, releaseNotes &#125; = <span class="keyword">await</span> query();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更新版本号</span></span><br><span class="line">  <span class="keyword">await</span> execCommand(<span class="string">&quot;npm&quot;</span>, [<span class="string">&quot;version&quot;</span>, version ? version : <span class="string">&quot;patch&quot;</span>]);</span><br><span class="line">  version = readJSON(PACKAGE_JSON_PATH)().version;</span><br><span class="line">  <span class="comment">// 更新CHANGELOG</span></span><br><span class="line">  updateChangeLog(&#123; version, releaseName, releaseNotes &#125;);</span><br><span class="line">  <span class="comment">// 开始打包</span></span><br><span class="line">  <span class="keyword">await</span> build(env, platforms);</span><br><span class="line">  <span class="comment">// 上传文件</span></span><br><span class="line">  <span class="keyword">await</span> uploadDir(path.resolve(RELEASE_DIR, version), <span class="string">&quot;test-app-temp&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">startPackaging();</span><br></pre></td></tr></table></figure><p>在package.json中添加命令</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;pack&quot;: &quot;ts-node ./build/packaging-cli/index.ts&quot;,</span><br></pre></td></tr></table></figure><p>运行<code>yarn run pack</code>即可开始打包</p><h2 id="自动更新"><a href="#自动更新" class="headerlink" title="自动更新"></a>自动更新</h2><p>前面打包流程基于Electron-Builder，因此以下的更新讨论也是基于其提供的<a href="">electron-updater</a>。</p><h3 id="关于electron-updater"><a href="#关于electron-updater" class="headerlink" title="关于electron-updater"></a>关于electron-updater</h3><h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><p>electron-updater只适用于以下类型的应用包：</p><ul><li>MacOS: DMG</li><li>Windows: NSIS</li><li>Linux: AppImage</li></ul><h4 id="提供的API"><a href="#提供的API" class="headerlink" title="提供的API"></a>提供的API</h4><p><a href="https://www.electron.build/auto-update#api">文档</a></p><table><thead><tr><th>API方法</th><th>功能</th></tr></thead><tbody><tr><td><code>checkForUpdates()</code></td><td>检查更新</td></tr><tr><td><code>checkForUpdatesAndNotify()</code></td><td>检查更新，有更新则提示</td></tr><tr><td><code>downloadUpdate(cancellationToken)</code></td><td>下载更新</td></tr><tr><td><code>getFeedURL()</code></td><td>获取更新服务链接</td></tr><tr><td><code>setFeedURL(options)</code></td><td>设置更新服务链接</td></tr><tr><td><code>quitAndInstall(isSilent, isForceRunAfter)</code></td><td>退出应用并安装更新</td></tr></tbody></table><h4 id="提供的事件"><a href="#提供的事件" class="headerlink" title="提供的事件"></a>提供的事件</h4><p><a href="https://www.electron.build/auto-update#events">文档</a></p><table><thead><tr><th>事件</th><th>触发</th></tr></thead><tbody><tr><td>error</td><td>更新错误</td></tr><tr><td>checking-for-update</td><td>检查更新中</td></tr><tr><td>update-available</td><td>有可用更新</td></tr><tr><td>update-not-available</td><td>没有可用更新</td></tr><tr><td>download-progress</td><td>下载更新中</td></tr><tr><td>update-downloaded</td><td>更新下载完成</td></tr></tbody></table><h4 id="一个简单的更新示例"><a href="#一个简单的更新示例" class="headerlink" title="一个简单的更新示例"></a>一个简单的更新示例</h4><p>在主进程监听检查更新事件</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; autoUpdater &#125; <span class="keyword">from</span> <span class="string">&#x27;electron-updater&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ipcMain &#125; <span class="keyword">from</span> <span class="string">&#x27;electron&#x27;</span></span><br><span class="line"></span><br><span class="line">ipcMain.on(<span class="string">&#x27;CHECK_FOR_UPDATE&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  autoUpdater.checkForUpdatesAndNotify()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在渲染进程点击按钮发送ipc事件检查更新(以React为例)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import React from &#39;react&#39;;</span><br><span class="line">import &#123; ipcRenderer &#125; from &#39;electron&#39;</span><br><span class="line">import &#39;.&#x2F;App.css&#39;;</span><br><span class="line"></span><br><span class="line">function App() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div className&#x3D;&quot;App&quot;&gt;</span><br><span class="line">      &lt;button onClick&#x3D;&#123;ipcRenderer.send(&#39;CHECK_FOR_UPDATE&#39;)&#125;&gt;检查更新&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure><p>注意创建BrowserWindow时需要设置webPreferences属性</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">window</span> = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">  webPreferences: &#123;</span><br><span class="line">    webSecurity: <span class="literal">false</span>,</span><br><span class="line">    nodeIntegration: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="更新服务的设计"><a href="#更新服务的设计" class="headerlink" title="更新服务的设计"></a>更新服务的设计</h3><p>上面寥寥几行代码就实现了一个简单的更新功能，但是这个功能在复杂的业务场景中往往没有那么适合，因此我们在这里开始来设计一个贴合常见场景的更新方案。</p><h4 id="需要实现的功能"><a href="#需要实现的功能" class="headerlink" title="需要实现的功能"></a>需要实现的功能</h4><ol><li>查看更新信息</li><li>用户手动检查更新;</li><li>应用启动时静默检查更新;</li><li>应用在后台定时检查更新;</li><li>用户手动下载更新;</li><li>下载进度显示;</li><li>用户手动退出安装更新;</li><li>通过版本号控制强制更新; </li><li>日志;</li><li>开发时请求本地服务做测试;</li></ol><h4 id="更新流程"><a href="#更新流程" class="headerlink" title="更新流程"></a>更新流程</h4><p>更新过程的所有状态:</p><table><thead><tr><th>状态</th><th>描述</th></tr></thead><tbody><tr><td>Idle</td><td>空闲</td></tr><tr><td>Checking</td><td>检查中</td></tr><tr><td>Available</td><td>有可下载更新</td></tr><tr><td>Downloading</td><td>下载中</td></tr><tr><td>Downloaded</td><td>下载完成</td></tr></tbody></table><p>状态流程如图</p><p><img src= "/img/loading.gif" data-lazy-src="http://mei160.cn/images/auto_update_workflow.png" alt="auto update workflow"></p><h4 id="接口设计"><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h4><p>根据上述功能，对更新服务做一个初步的设计</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/updater.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; autoUpdater, UpdateInfo &#125; <span class="keyword">from</span> <span class="string">&#x27;electron-updater&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> CheckResult&#123;</span><br><span class="line">  <span class="comment">// 是否有更新</span></span><br><span class="line">  available: <span class="built_in">boolean</span></span><br><span class="line">  <span class="comment">// 更新内容</span></span><br><span class="line">  updateInfo: UpdateInfo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> ProgressInfo &#123;</span><br><span class="line">  total: <span class="built_in">number</span></span><br><span class="line">  delta: <span class="built_in">number</span></span><br><span class="line">  transferred: <span class="built_in">number</span></span><br><span class="line">  percent: <span class="built_in">number</span></span><br><span class="line">  bytesPerSecond: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下载进度回调</span></span><br><span class="line"><span class="keyword">type</span> DownloadProgressCallback = <span class="function">(<span class="params">p: ProgressInfo</span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line"><span class="comment">// 下载结束回调</span></span><br><span class="line"><span class="keyword">type</span> DownloadedCallback = <span class="function">() =&gt;</span> <span class="built_in">void</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> AppUpdateService &#123;</span><br><span class="line">  <span class="comment">// 检查更新</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> checkUpdate(): CheckResult</span><br><span class="line">  <span class="comment">// 下载更新</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> downloadUpdate(params: &#123;onDownloadProgress: DownloadProgressCallback, onDownloaded: DownloadedCallback &#125;): <span class="built_in">void</span></span><br><span class="line">  <span class="comment">// 应用更新</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> applyUpdate(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是由于ipc通信的限制，无法传递回调函数，因此我们在这里考虑将更新服务的业务功能封装都移到渲染进程，主进程只提供基本的初始化服务和接口方法的封装。</p><p><code>app/updater.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; autoUpdater &#125; <span class="keyword">from</span> <span class="string">&quot;electron-updater&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> logger <span class="keyword">from</span> <span class="string">&quot;electron-log&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserWindow, ipcMain, app &#125; <span class="keyword">from</span> <span class="string">&#x27;electron&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkUpdate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> autoUpdater.checkForUpdates();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">downloadUpdate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> autoUpdater.downloadUpdate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">applyUpdate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> autoUpdater.quitAndInstall();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendToAllBrowserWindows</span>(<span class="params">channel: <span class="built_in">string</span>, ...args: unknown[]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> browserWindows = BrowserWindow.getAllWindows()</span><br><span class="line">  browserWindows.forEach(<span class="function"><span class="params">bw</span>=&gt;</span>bw.webContents.send(channel, ...args))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 日志</span></span><br><span class="line">  logger.transports.file.level = <span class="string">&quot;info&quot;</span>;</span><br><span class="line">  autoUpdater.logger = logger;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 禁用自动下载</span></span><br><span class="line">  autoUpdater.autoDownload = <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// 启用退出app时自动安装更新</span></span><br><span class="line">  autoUpdater.autoInstallOnAppQuit = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 监听事件并发送到渲染进程</span></span><br><span class="line">  <span class="keyword">const</span> events = [</span><br><span class="line">    <span class="string">&quot;error&quot;</span>,</span><br><span class="line">    <span class="string">&quot;checking-for-update&quot;</span>,</span><br><span class="line">    <span class="string">&quot;update-available&quot;</span>,</span><br><span class="line">    <span class="string">&quot;update-not-available&quot;</span>,</span><br><span class="line">    <span class="string">&quot;download-progress&quot;</span>,</span><br><span class="line">    <span class="string">&quot;update-downloaded&quot;</span>,</span><br><span class="line">  ]</span><br><span class="line">  events.forEach(<span class="function">(<span class="params">eventName</span>) =&gt;</span> autoUpdater.on(eventName, sendToAllBrowserWindows.bind(<span class="literal">null</span>, <span class="string">&#x27;APP_UPDATER/STATUS_CHANGE&#x27;</span>)));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过接收渲染进程发送的ipc调用方法</span></span><br><span class="line">  ipcMain.on(<span class="string">&#x27;APP_UPDATER/CHECK_UPDATE&#x27;</span>, checkUpdate)</span><br><span class="line">  ipcMain.on(<span class="string">&#x27;APP_UPDATER/DOWNLOAD_UPDATE&#x27;</span>, downloadUpdate)</span><br><span class="line">  ipcMain.on(<span class="string">&#x27;APP_UPDATER/APPLY_UPDATE&#x27;</span>, applyUpdate)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.once(<span class="string">&#x27;will-finish-launching&#x27;</span>, init)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> AppUpdater = &#123;</span><br><span class="line">  checkUpdate,</span><br><span class="line">  downloadUpdate,</span><br><span class="line">  applyUpdate,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在渲染进程，我们首先创建一个自定义hooks来实现接收更新状态变更并通过<code>createContext</code>来实现组件状态共享。<br><code>renderer/src/Hooks/useAppUpdate.js</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect, useContext, createContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ipcRenderer &#125; <span class="keyword">from</span> <span class="string">&quot;electron&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useAppUpdate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [status, setStatus] = useState(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> [updateInfo, setUpdateInfo] = useState(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> [updateProgressInfo, setUpdateProgressInfo] = useState(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> [error, setError] = useState(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> checkUpdate = <span class="function">() =&gt;</span> ipcRenderer.send(<span class="string">&#x27;APP_UPDATER/CHECK_UPDATE&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> downloadUpdate = <span class="function">() =&gt;</span> ipcRenderer.send(<span class="string">&#x27;APP_UPDATER/DOWNLOAD_UPDATE&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> applyUpdate = <span class="function">() =&gt;</span> ipcRenderer.send(<span class="string">&#x27;APP_UPDATER/APPLY_UPDATE&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    ipcRenderer.on(<span class="string">&quot;APP_UPDATER/STATUS_CHANGE&quot;</span>, <span class="function">(<span class="params">event, updateEventName, ...args</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`updater#<span class="subst">$&#123;updateEventName&#125;</span>: `</span>, ...args);</span><br><span class="line"></span><br><span class="line">        setStatus(updateEventName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (updateEventName) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&quot;error&quot;</span>:</span><br><span class="line">            setError(args[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&quot;checking-for-update&quot;</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&quot;update-available&quot;</span>:</span><br><span class="line">            setUpdateInfo(args[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&quot;update-not-available&quot;</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&quot;download-progress&quot;</span>:</span><br><span class="line">            setUpdateProgressInfo(args[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&quot;update-downloaded&quot;</span>:</span><br><span class="line">            setUpdateInfo(args[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; </span><br><span class="line">    status, updateInfo, updateProgressInfo, error, </span><br><span class="line">    checkUpdate, downloadUpdate, applyUpdate,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> UpdaterContext = createContext();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> UpdaterProvider = <span class="function">(<span class="params">&#123; children &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> state = useAppUpdate();</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">UpdaterContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;state&#125;</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">UpdaterContext.Provider</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useUpdaterContext</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> store = useContext(UpdaterContext)</span><br><span class="line">  <span class="keyword">return</span> store</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建一个AboutPanel组件，在组件中显示更新信息下载进度，已经更新按钮等<br><code>renderer/src/Components/AboutPanel/index.jsx</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;useMemo&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useUpdaterContext &#125; <span class="keyword">from</span> <span class="string">&#x27;../../Hooks/useAppUpdate&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">AboutPanel</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; </span><br><span class="line">    status, updateInfo, updateProgressInfo, error, </span><br><span class="line">    checkUpdate, downloadUpdate, applyUpdate,</span><br><span class="line">   &#125; = useUpdaterContext()</span><br><span class="line"></span><br><span class="line">   <span class="keyword">const</span> Button = useMemo(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(status === <span class="string">&#x27;update-available&#x27;</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;downloadUpdate&#125;</span>&gt;</span>Download Updates<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(status === <span class="string">&#x27;download-progress&#x27;</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>Downloading...<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(status === <span class="string">&#x27;update-downloaded&#x27;</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;applyUpdate&#125;</span>&gt;</span>Apply Updates<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;checkUpdate&#125;</span>&gt;</span>Check for Updates<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">   &#125;, [status])</span><br><span class="line"></span><br><span class="line">   <span class="keyword">const</span> Info = useMemo(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(status === <span class="string">&#x27;error&#x27;</span>)&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&#x27;error&#x27;</span>,error)</span><br><span class="line">       <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;&gt;</span> </span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&#123;&#123;color:</span> &#x27;<span class="attr">lightpink</span>&#x27;&#125;&#125;&gt;</span>&#123;error?.name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&#123;&#123;color:</span> &#x27;<span class="attr">lightpink</span>&#x27;&#125;&#125;&gt;</span>&#123;error?.message&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&#123;&#123;color:</span> &#x27;<span class="attr">lightpink</span>&#x27;&#125;&#125;&gt;</span>&#123;error?.stack&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(status === <span class="string">&#x27;checking-for-update&#x27;</span>)&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Checking...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">     &#125;</span><br><span class="line">    <span class="keyword">if</span>(status ===<span class="string">&#x27;update-not-available&#x27;</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>No Updates Available<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(updateInfo)&#123;</span><br><span class="line">      <span class="keyword">const</span> &#123;version, releaseName, releaseNotes, releaseDate&#125; = updateInfo</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>version: &#123;version&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>date: &#123;releaseDate&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>name: &#123;releaseName&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>notes: &#123;releaseNotes&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">   &#125;, [status, updateInfo, error])</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;Info&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">      &#123;</span></span><br><span class="line"><span class="xml">        status === &#x27;download-progress&#x27; &amp;&amp; Boolean(updateProgressInfo) &amp;&amp; </span></span><br><span class="line">        &lt;div style=&#123;&#123;backgroundColor: &#x27;grey&#x27;, width: 300, height: 20, margin: &#x27;12px auto&#x27;&#125;&#125;&gt;</span><br><span class="line">          &lt;div style=&#123;&#123;backgroundColor: &#x27;cornflowerblue&#x27;, height: 20, width: 300 * updateProgressInfo.percent / 100&#125;&#125;&gt;&lt;/div&gt;</span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">      &#123;Button&#125;</span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建一个UpdateChecker组件，在这个组件中做静默检查、定时检查和更新提示<br><code>renderer/src/Components/UpdateChecker/index.jsx</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useAppUpdate &#125; <span class="keyword">from</span> <span class="string">&#x27;../../Hooks/useAppUpdate&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">UpdateChecker</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;checkUpdate, downloadUpdate, applyUpdate, updateInfo, status, updateProgressInfo&#125; = useAppUpdate()</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timeout</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">scheduleCheckUpdate</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(![<span class="string">&#x27;checking-for-update&#x27;</span>, <span class="string">&#x27;update-available&#x27;</span>, <span class="string">&#x27;download-progress&#x27;</span>, <span class="string">&#x27;update-downloaded&#x27;</span>].includes(status))&#123;</span><br><span class="line">        checkUpdate()</span><br><span class="line">      &#125;</span><br><span class="line">      timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        scheduleCheckUpdate()</span><br><span class="line">      &#125;, <span class="number">1000</span> * <span class="number">60</span> *<span class="number">60</span>);  </span><br><span class="line">    &#125;</span><br><span class="line">    scheduleCheckUpdate()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="built_in">clearTimeout</span>(timeout)</span><br><span class="line">  &#125;, [])</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(status === <span class="string">&#x27;update-available&#x27;</span>)&#123;</span><br><span class="line">  <span class="comment">// eslint-disable-next-line no-restricted-globals</span></span><br><span class="line">      <span class="keyword">const</span> result = confirm(<span class="string">&#x27;Updates available, download instantly?&#x27;</span>)</span><br><span class="line">      <span class="keyword">if</span>(result)&#123;</span><br><span class="line">        downloadUpdate()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(status === <span class="string">&#x27;update-downloaded&#x27;</span>)&#123;</span><br><span class="line">  <span class="comment">// eslint-disable-next-line no-restricted-globals</span></span><br><span class="line">      <span class="keyword">const</span> result = confirm(<span class="string">&#x27;Download completed, apply updates?&#x27;</span>)</span><br><span class="line">      <span class="keyword">if</span>(result)&#123;</span><br><span class="line">        applyUpdate()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [status])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个基本的自动更新服务就完成了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;工程化&quot;&gt;&lt;a href=&quot;#工程化&quot; class=&quot;headerlink&quot; title=&quot;工程化&quot;&gt;&lt;/a&gt;工程化&lt;/h1&gt;&lt;h2 id=&quot;安全性&quot;&gt;&lt;a href=&quot;#安全性&quot; class=&quot;headerlink&quot; title=&quot;安全性&quot;&gt;&lt;/a&gt;安全性&lt;/h</summary>
      
    
    
    
    <category term="electron" scheme="https://hard-workingrookie.github.io/categories/electron/"/>
    
    
    <category term="electron" scheme="https://hard-workingrookie.github.io/tags/electron/"/>
    
  </entry>
  
  <entry>
    <title>react+ts学习项目及笔记</title>
    <link href="https://hard-workingrookie.github.io/2020/12/29/react-ts%E5%AD%A6%E4%B9%A0%E9%A1%B9%E7%9B%AE%E5%8F%8A%E7%AC%94%E8%AE%B0/"/>
    <id>https://hard-workingrookie.github.io/2020/12/29/react-ts%E5%AD%A6%E4%B9%A0%E9%A1%B9%E7%9B%AE%E5%8F%8A%E7%AC%94%E8%AE%B0/</id>
    <published>2020-12-29T08:40:32.000Z</published>
    <updated>2020-12-29T08:56:55.832Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用-env文件配置全局环境变量"><a href="#使用-env文件配置全局环境变量" class="headerlink" title="使用.env文件配置全局环境变量"></a>使用.env文件配置全局环境变量</h1><p>.env 全局默认配置文件，不论什么环境都会加载合并</p><p>.env.development 开发环境下的配置文件</p><p>.env.production 生产环境下的配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className&#x3D;&quot;App&quot;&gt;</span><br><span class="line">       &#123;process.env.REACT_APP_info&#125;</span><br><span class="line"> &lt;&#x2F;div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REACT_APP_info&#x3D;hello</span><br></pre></td></tr></table></figure><ul><li>vue 以 **VUE_APP_ **开头</li><li>react 以**REACT_APP_ **开头</li></ul><p>在**.gitignore **里面要将环境变量配置文件忽略上传</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使用-env文件配置全局环境变量&quot;&gt;&lt;a href=&quot;#使用-env文件配置全局环境变量&quot; class=&quot;headerlink&quot; title=&quot;使用.env文件配置全局环境变量&quot;&gt;&lt;/a&gt;使用.env文件配置全局环境变量&lt;/h1&gt;&lt;p&gt;.env 全局默认配置文件，</summary>
      
    
    
    
    <category term="JS" scheme="https://hard-workingrookie.github.io/categories/JS/"/>
    
    
    <category term="JS" scheme="https://hard-workingrookie.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>跨域http-proxy-middleware</title>
    <link href="https://hard-workingrookie.github.io/2020/12/24/%E8%B7%A8%E5%9F%9Fhttp-proxy-middleware/"/>
    <id>https://hard-workingrookie.github.io/2020/12/24/%E8%B7%A8%E5%9F%9Fhttp-proxy-middleware/</id>
    <published>2020-12-24T06:22:09.000Z</published>
    <updated>2020-12-25T14:13:47.496Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue-config-js"><a href="#vue-config-js" class="headerlink" title="vue.config.js"></a>vue.config.js</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    open: <span class="literal">true</span>,</span><br><span class="line">    host: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    port: <span class="number">8080</span>,</span><br><span class="line">    https: <span class="literal">false</span>, <span class="comment">//以上的ip和端口是我们本机的;下面为需要跨域的</span></span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="comment">//配置跨域</span></span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        target: <span class="string">&#x27;https://chp.shadiao.app/api.php&#x27;</span>, <span class="comment">//这里后台的地址模拟的;应该填写你们真实的后台接口</span></span><br><span class="line">        ws: <span class="literal">true</span>,</span><br><span class="line">        changOrigin: <span class="literal">true</span>, <span class="comment">//允许跨域</span></span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span> <span class="comment">//请求的时候使用这个api就可以</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$http</span><br><span class="line">      .get(<span class="string">&quot;/api&quot;</span>)</span><br><span class="line">      .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.words=response.data</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(error);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import axios from &quot;axios&quot;;</span><br><span class="line">Vue.prototype.$http &#x3D; axios;</span><br></pre></td></tr></table></figure><h1 id="使用-远程数据接口代理服务"><a href="#使用-远程数据接口代理服务" class="headerlink" title="使用 远程数据接口代理服务"></a>使用 远程数据接口代理服务</h1><h2 id="config-index-js"><a href="#config-index-js" class="headerlink" title="config/index.js"></a>config/index.js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  build: &#123;</span><br><span class="line">    env: <span class="built_in">require</span>(<span class="string">&quot;./prod.env&quot;</span>),</span><br><span class="line">    index: path.resolve(__dirname, <span class="string">&quot;../dist/index.html&quot;</span>),</span><br><span class="line">    assetsRoot: path.resolve(__dirname, <span class="string">&quot;../dist&quot;</span>),</span><br><span class="line">    assetsSubDirectory: <span class="string">&quot;static&quot;</span>,</span><br><span class="line">    assetsPublicPath: <span class="string">&quot;./&quot;</span>,</span><br><span class="line">    productionSourceMap: <span class="literal">false</span>,</span><br><span class="line">    productionGzip: <span class="literal">false</span>,</span><br><span class="line">    productionGzipExtensions: [<span class="string">&quot;js&quot;</span>, <span class="string">&quot;css&quot;</span>],</span><br><span class="line">    bundleAnalyzerReport: process.env.npm_config_report,</span><br><span class="line">    autoOpenBrowser: <span class="literal">true</span>,</span><br><span class="line">    cssSourceMap: <span class="literal">false</span>,</span><br><span class="line">    proxyTable: &#123;</span><br><span class="line">      <span class="string">&quot;/api&quot;</span>: &#123;</span><br><span class="line">        target: <span class="string">&quot;https://chp.shadiao.app&quot;</span>,</span><br><span class="line">        changeOrigin: <span class="literal">true</span>,</span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          <span class="string">&quot;^/api&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  dev: &#123;</span><br><span class="line">    env: <span class="built_in">require</span>(<span class="string">&quot;./dev.env&quot;</span>),</span><br><span class="line">    port: <span class="number">8080</span>,</span><br><span class="line">    autoOpenBrowser: <span class="literal">true</span>,</span><br><span class="line">    assetsSubDirectory: <span class="string">&quot;static&quot;</span>,</span><br><span class="line">    assetsPublicPath: <span class="string">&quot;./&quot;</span>,</span><br><span class="line">    proxyTable: &#123;</span><br><span class="line">      <span class="string">&quot;/api&quot;</span>: &#123;</span><br><span class="line">        target: <span class="string">&quot;https://chp.shadiao.app&quot;</span>,</span><br><span class="line">        secure: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">// 开启代理，在本地创建一个虚拟服务端</span></span><br><span class="line">        changeOrigin: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 是否启用websockets</span></span><br><span class="line">        ws: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">//重写路径 比如&#x27;/api/a/b&#x27;重写为&#x27;/aaa/ccc&#x27;</span></span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          <span class="string">&quot;^/api&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    cssSourceMap: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="HoneyWords"><a href="#HoneyWords" class="headerlink" title="HoneyWords:"></a>HoneyWords:</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;words&quot;</span>&gt;&#123;&#123; words &#125;&#125;...&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">const</span> API_PROXY = <span class="string">&quot;https://bird.ioliu.cn/v1/?url=&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      words: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    <span class="built_in">this</span>.getHoneyWords();</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    getHoneyWords() &#123;</span><br><span class="line">      <span class="keyword">var</span> _this = <span class="built_in">this</span>;</span><br><span class="line">      <span class="built_in">this</span>.$axios</span><br><span class="line">        .get(API_PROXY + <span class="string">&quot;https://chp.shadiao.app/api.php&quot;</span>)</span><br><span class="line">        .then(</span><br><span class="line">          <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(res.data)</span><br><span class="line">            _this.words=res.data</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(error);</span><br><span class="line">          &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=<span class="string">&quot;scss&quot;</span> scope&gt;</span><br><span class="line">.words &#123;</span><br><span class="line">  line-height: <span class="number">40</span>px;</span><br><span class="line">  padding-top: <span class="number">10</span>px;</span><br><span class="line">  font-size: <span class="number">18</span>px;</span><br><span class="line">  color: #a685e2;</span><br><span class="line">  font-weight: <span class="number">300</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vue-config-js&quot;&gt;&lt;a href=&quot;#vue-config-js&quot; class=&quot;headerlink&quot; title=&quot;vue.config.js&quot;&gt;&lt;/a&gt;vue.config.js&lt;/h1&gt;&lt;figure class=&quot;highlight java</summary>
      
    
    
    
    <category term="跨域" scheme="https://hard-workingrookie.github.io/categories/%E8%B7%A8%E5%9F%9F/"/>
    
    
    <category term="跨域" scheme="https://hard-workingrookie.github.io/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>每天定时用js发送邮件</title>
    <link href="https://hard-workingrookie.github.io/2020/12/24/%E6%AF%8F%E5%A4%A9%E5%AE%9A%E6%97%B6%E7%94%A8js%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
    <id>https://hard-workingrookie.github.io/2020/12/24/%E6%AF%8F%E5%A4%A9%E5%AE%9A%E6%97%B6%E7%94%A8js%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</id>
    <published>2020-12-24T06:17:29.000Z</published>
    <updated>2020-12-24T06:18:41.478Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nodemailer = <span class="built_in">require</span>(<span class="string">&quot;nodemailer&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">default</span>: Axios &#125; = <span class="built_in">require</span>(<span class="string">&quot;axios&quot;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getHoneyedWords</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> url = <span class="string">&quot;https://chp.shadiao.app/api.php&quot;</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> Axios.get(url);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">sendMail</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> user = <span class="string">&quot;1494***9@qq.com&quot;</span>; </span><br><span class="line">  <span class="keyword">var</span> pass = <span class="string">&quot;**********&quot;</span>;<span class="comment">//授权码</span></span><br><span class="line">  <span class="keyword">var</span> to = <span class="string">&quot;59***4@qq.com&quot;</span>; </span><br><span class="line">  <span class="keyword">let</span> transporter = nodemailer.createTransport(&#123;</span><br><span class="line">    host: <span class="string">&quot;smtp.qq.com&quot;</span>,</span><br><span class="line">    port: <span class="number">587</span>,</span><br><span class="line">    secure: <span class="literal">false</span>,</span><br><span class="line">    auth: &#123;</span><br><span class="line">      user: user, </span><br><span class="line">      pass: pass,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">let</span> info = <span class="keyword">await</span> transporter.sendMail(&#123;</span><br><span class="line">    <span class="keyword">from</span>: <span class="string">`亲爱的老婆&lt;<span class="subst">$&#123;user&#125;</span>&gt;`</span>, </span><br><span class="line">    to: <span class="string">`亲爱的老公&lt;<span class="subst">$&#123;to&#125;</span>&gt;`</span>, </span><br><span class="line">    subject: <span class="string">&quot;亲爱的老公&quot;</span>,</span><br><span class="line">    text: text, </span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;发送成功&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> schedule = <span class="built_in">require</span>(<span class="string">&quot;node-schedule&quot;</span>);</span><br><span class="line">schedule.scheduleJob(&#123; <span class="attr">hour</span>: <span class="number">17</span>, <span class="attr">minute</span>: <span class="number">54</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;启动任务:&quot;</span> + <span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">  getHoneyedWords().then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res.data);</span><br><span class="line">    sendMail(res.data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">getHoneyedWords().then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res.data)</span><br><span class="line">  sendMail(res.data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    <category term="JS" scheme="https://hard-workingrookie.github.io/categories/JS/"/>
    
    
    <category term="JS" scheme="https://hard-workingrookie.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>js经典案例</title>
    <link href="https://hard-workingrookie.github.io/2020/12/24/js%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/"/>
    <id>https://hard-workingrookie.github.io/2020/12/24/js%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/</id>
    <published>2020-12-24T05:49:24.000Z</published>
    <updated>2020-12-28T10:22:57.114Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.yuque.com/u2417328/rlt5do/kguiwo">https://www.yuque.com/u2417328/rlt5do/kguiwo</a></p><h1 id="vue-过滤器-数值过万处理"><a href="#vue-过滤器-数值过万处理" class="headerlink" title="vue 过滤器 数值过万处理"></a>vue 过滤器 数值过万处理</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">      &lt;span&gt;&#123;&#123; num|million &#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  filters:&#123;</span><br><span class="line">   million: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">      <span class="comment">//过万处理</span></span><br><span class="line">      <span class="keyword">let</span> num;</span><br><span class="line">      <span class="keyword">if</span> (value &gt; <span class="number">9999</span>) &#123;</span><br><span class="line">        <span class="comment">//大于9999显示x.xx万</span></span><br><span class="line">        num = <span class="built_in">Math</span>.floor(value / <span class="number">1000</span>) / <span class="number">10</span> + <span class="string">&quot;W&quot;</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value &lt; <span class="number">9999</span> &amp;&amp; value &gt; <span class="number">-9999</span>) &#123;</span><br><span class="line">        num = value;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value &lt; <span class="number">-9999</span>) &#123;</span><br><span class="line">        <span class="comment">//小于-9999显示-x.xx万</span></span><br><span class="line">        num = -(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.abs(value) / <span class="number">1000</span>) / <span class="number">10</span>) + <span class="string">&quot;W&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> num;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.yuque.com/u2417328/rlt5do/kguiwo&quot;&gt;https://www.yuque.com/u2417328/rlt5do/kguiwo&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;vue-过滤器-数值过万处理&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="JS" scheme="https://hard-workingrookie.github.io/categories/JS/"/>
    
    
    <category term="JS" scheme="https://hard-workingrookie.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>浏览器插件入门例子</title>
    <link href="https://hard-workingrookie.github.io/2020/10/26/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6%E5%85%A5%E9%97%A8%E4%BE%8B%E5%AD%90/"/>
    <id>https://hard-workingrookie.github.io/2020/10/26/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6%E5%85%A5%E9%97%A8%E4%BE%8B%E5%AD%90/</id>
    <published>2020-10-26T14:04:23.000Z</published>
    <updated>2020-12-24T06:20:21.599Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一个解决B站文章不可复制插件"><a href="#一个解决B站文章不可复制插件" class="headerlink" title="一个解决B站文章不可复制插件"></a>一个解决B站文章不可复制插件</h1><h2 id="配置文件-manifest-json"><a href="#配置文件-manifest-json" class="headerlink" title="配置文件 manifest.json"></a>配置文件 manifest.json</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;allow copy&quot;</span>,</span><br><span class="line">    <span class="string">&quot;description&quot;</span>: <span class="string">&quot;解锁bi站复制限制&quot;</span>,</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;manifest_version&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;browser_action&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;default_icon&quot;</span>: <span class="string">&quot;icons/copy.jpg&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;content_scripts&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;matches&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;https://www.bilibili.com/read/*&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;js&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;js/copy.js&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;run_at&quot;</span>: <span class="string">&quot;document_start&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="js-copy-js-文件"><a href="#js-copy-js-文件" class="headerlink" title="js/copy.js 文件"></a>js/copy.js 文件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;load&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> elements = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;article-holder&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; elements.length; index++) &#123;</span><br><span class="line">        elements[index].style.userSelect = <span class="string">&quot;auto&quot;</span>;</span><br><span class="line">        elements[index].addEventListener(<span class="string">&quot;copy&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">            event.clipboardData.setData(<span class="string">&quot;text&quot;</span>, <span class="built_in">window</span>.getSelection().toString())</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在谷歌chrome浏览器里 打开<strong>管理扩展程序</strong>， 勾选 <strong>开发者模式</strong>  点击<strong>加载已解压的扩展程序</strong></p><p>打开我们的项目，固定到扩展程序</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一个解决B站文章不可复制插件&quot;&gt;&lt;a href=&quot;#一个解决B站文章不可复制插件&quot; class=&quot;headerlink&quot; title=&quot;一个解决B站文章不可复制插件&quot;&gt;&lt;/a&gt;一个解决B站文章不可复制插件&lt;/h1&gt;&lt;h2 id=&quot;配置文件-manifest-jso</summary>
      
    
    
    
    <category term="浏览器插件" scheme="https://hard-workingrookie.github.io/categories/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6/"/>
    
    
    <category term="浏览器插件" scheme="https://hard-workingrookie.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>websocket</title>
    <link href="https://hard-workingrookie.github.io/2020/10/25/websocket/"/>
    <id>https://hard-workingrookie.github.io/2020/10/25/websocket/</id>
    <published>2020-10-25T05:15:02.000Z</published>
    <updated>2020-12-24T06:20:21.607Z</updated>
    
    <content type="html"><![CDATA[<h1 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h1><h2 id="前端-示例代码"><a href="#前端-示例代码" class="headerlink" title="前端 示例代码"></a>前端 示例代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> input =<span class="built_in">document</span>.querySelector(<span class="string">&#x27;input&#x27;</span>)</span><br><span class="line">  <span class="keyword">var</span>  button =<span class="built_in">document</span>.querySelector(<span class="string">&#x27;button&#x27;</span>)</span><br><span class="line">  <span class="keyword">var</span> div =<span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1.创建websocket</span></span><br><span class="line">  <span class="keyword">var</span> socket =<span class="keyword">new</span> WebSocket(<span class="string">&#x27;ws://echo.websocket.org&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 2.open: 当和websocket服务连接成功的时候触发</span></span><br><span class="line">  socket.addEventListener(<span class="string">&#x27;open&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    div.innerHTML=<span class="string">&#x27;连接服务成功了&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3.主动给websocket服务器发送消息</span></span><br><span class="line">  button.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> val =input.value</span><br><span class="line">    socket.send(val) </span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4.接收websocket服务的数据</span></span><br><span class="line">  socket.addEventListener(<span class="string">&#x27;message&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.data)</span><br><span class="line">    div.innerHTML=e.data</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  socket.addEventListener(<span class="string">&#x27;close&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    div.innerHTML=<span class="string">&#x27;服务断开连接&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>点击调试工具 中的 NetWork 中的 WS 可以看到发送和接收情况</p><p>绿色是发送给服务器的<br>红色是服务器返回来的</p><h2 id="服务器端代码"><a href="#服务器端代码" class="headerlink" title="服务器端代码"></a>服务器端代码</h2><h3 id="1-安装-nodejs-websocket"><a href="#1-安装-nodejs-websocket" class="headerlink" title="1.安装 nodejs-websocket"></a>1.安装 nodejs-websocket</h3><p><code>yarn add nodejs-websocket</code></p><h3 id="2-示例代码"><a href="#2-示例代码" class="headerlink" title="2.示例代码"></a>2.示例代码</h3><p>const ws = require(‘nodejs-websocket’)</p><p>const PORT = 3000</p><p>// 创建一个server</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每次只要有用户连接，函数就会被执行，会给当前连接的用户创建一个 connect 对象</span></span><br><span class="line"><span class="keyword">const</span> server = ws.createServer(<span class="function">(<span class="params">connect</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;有用户连接上来了&#x27;</span>)</span><br><span class="line">  <span class="comment">// 每当接收到用户传递过来的数据，这个text事件会被触发</span></span><br><span class="line">  connect.on(<span class="string">&#x27;text&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;接收到了用户的数据&#x27;</span>, data)</span><br><span class="line">    <span class="comment">// 给用户一个响应的数据</span></span><br><span class="line">    <span class="comment">// 对用户发送的数据，把小写转换成大写，并拼接一点内容</span></span><br><span class="line">    connect.send(data.toUpperCase() + <span class="string">&#x27;!!!&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 只要websocket连接断开，close 事件会触发</span></span><br><span class="line">  connect.on(<span class="string">&#x27;close&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;连接断开了&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//   处理用户的错误信息</span></span><br><span class="line">  connect.on(<span class="string">&#x27;error&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;用户连接异常&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(PORT, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;websocktet服务启动成功了,监听了端口&#x27;</span> + PORT)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="一个简单的聊天室"><a href="#一个简单的聊天室" class="headerlink" title="一个简单的聊天室"></a>一个简单的聊天室</h2><p><a href="https://imgchr.com/i/Bm6xBt"><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/10/25/Bm6xBt.md.jpg" alt="Bm6xBt.md.jpg"></a></p><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> type_enter = <span class="number">0</span></span><br><span class="line">  <span class="keyword">const</span> type_leave = <span class="number">1</span></span><br><span class="line">  <span class="keyword">const</span> type_message = <span class="number">2</span></span><br><span class="line">  <span class="keyword">var</span> input = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;input&#x27;</span>)</span><br><span class="line">  <span class="keyword">var</span> button = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;button&#x27;</span>)</span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1.创建websocket</span></span><br><span class="line">  <span class="keyword">var</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">&#x27;ws://localhost:3000&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.open: 当和websocket服务连接成功的时候触发</span></span><br><span class="line">  socket.addEventListener(<span class="string">&#x27;open&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// div.innerHTML = &#x27;连接服务成功了&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3.主动给websocket服务器发送消息</span></span><br><span class="line">  button.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> val = input.value</span><br><span class="line">    socket.send(val)</span><br><span class="line">    input.value = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4.接收websocket服务的数据</span></span><br><span class="line">  socket.addEventListener(<span class="string">&#x27;message&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// console.log(JSON.parse(e.data))</span></span><br><span class="line">    <span class="keyword">let</span> data = <span class="built_in">JSON</span>.parse(e.data)</span><br><span class="line">    <span class="keyword">var</span> dv = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">    dv.innerText = data.msg + <span class="string">&#x27;---------&#x27;</span> + data.time</span><br><span class="line">    <span class="keyword">if</span> (data.type == type_enter) &#123;</span><br><span class="line">      dv.style.color = <span class="string">&#x27;green&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data.type == type_leave) &#123;</span><br><span class="line">      dv.style.color = <span class="string">&#x27;red&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      dv.style.color = <span class="string">&#x27;#333&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    div.appendChild(dv)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  socket.addEventListener(<span class="string">&#x27;close&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// div.innerHTML = &#x27;服务断开连接&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> ws = <span class="built_in">require</span>(<span class="string">&#x27;nodejs-websocket&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PORT = <span class="number">3000</span></span><br><span class="line"><span class="comment">// 用户数量</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line"><span class="keyword">const</span> type_enter = <span class="number">0</span></span><br><span class="line"><span class="keyword">const</span> type_leave = <span class="number">1</span></span><br><span class="line"><span class="keyword">const</span> type_message = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = ws.createServer(<span class="function">(<span class="params">connect</span>) =&gt;</span> &#123;</span><br><span class="line">  count++</span><br><span class="line">  connect.userName = <span class="string">`用户<span class="subst">$&#123;count&#125;</span>`</span></span><br><span class="line">  <span class="comment">//   告诉所有用户，有人加入了聊天室</span></span><br><span class="line">  broadcast(&#123;</span><br><span class="line">    type: type_enter,</span><br><span class="line">    msg: <span class="string">`<span class="subst">$&#123;connect.userName&#125;</span>进入了聊天室！`</span>,</span><br><span class="line">    time: <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleDateString()</span><br><span class="line">  &#125;)</span><br><span class="line">  connect.on(<span class="string">&#x27;text&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    broadcast(&#123;</span><br><span class="line">      type: type_message,</span><br><span class="line">      msg:data,</span><br><span class="line">      time: <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleDateString()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  connect.on(<span class="string">&#x27;close&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    count--</span><br><span class="line">    <span class="comment">//   告诉所有用户，有人离开了聊天室</span></span><br><span class="line">    broadcast(&#123;</span><br><span class="line">      type: type_leave,</span><br><span class="line">      msg: <span class="string">`<span class="subst">$&#123;connect.userName&#125;</span>离开了聊天室！`</span>,</span><br><span class="line">      time: <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleDateString()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  connect.on(<span class="string">&#x27;error&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;用户连接异常&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//广播，给所有的用户发送消息</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">broadcast</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">  server.connections.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    item.send(<span class="built_in">JSON</span>.stringify(msg))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server.listen(PORT, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;websocktet服务启动成功了,监听了端口&#x27;</span> + PORT)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;websocket&quot;&gt;&lt;a href=&quot;#websocket&quot; class=&quot;headerlink&quot; title=&quot;websocket&quot;&gt;&lt;/a&gt;websocket&lt;/h1&gt;&lt;h2 id=&quot;前端-示例代码&quot;&gt;&lt;a href=&quot;#前端-示例代码&quot; class=&quot;he</summary>
      
    
    
    
    <category term="websocket" scheme="https://hard-workingrookie.github.io/categories/websocket/"/>
    
    
    <category term="websocket" scheme="https://hard-workingrookie.github.io/tags/websocket/"/>
    
  </entry>
  
  <entry>
    <title>sass学习</title>
    <link href="https://hard-workingrookie.github.io/2020/09/28/sass%E5%AD%A6%E4%B9%A0/"/>
    <id>https://hard-workingrookie.github.io/2020/09/28/sass%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-09-28T13:40:34.000Z</published>
    <updated>2020-12-24T06:20:21.607Z</updated>
    
    <content type="html"><![CDATA[<h1 id="css-变量"><a href="#css-变量" class="headerlink" title="css 变量"></a>css 变量</h1><p><strong>$</strong></p><p><code>$Primary-color : #333;</code></p><h1 id="Modules-模块"><a href="#Modules-模块" class="headerlink" title="Modules 模块"></a>Modules 模块</h1><p><strong>@use</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// _base.scss</span></span><br><span class="line">$font-stack :Helvetica,sans-serif;</span><br><span class="line">$primary-color:#333;</span><br><span class="line"></span><br><span class="line">body&#123;</span><br><span class="line">    font: <span class="number">100</span>% $font-stack;</span><br><span class="line">    color: $primary-color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@use <span class="string">&#x27;base&#x27;</span>;</span><br><span class="line"></span><br><span class="line">.inverse&#123;</span><br><span class="line">    background-color: base.$primary-color;</span><br><span class="line">    color: #fff;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Mixins-amp-Functions"><a href="#Mixins-amp-Functions" class="headerlink" title="Mixins &amp; Functions"></a>Mixins &amp; Functions</h1><p><strong>@mixin</strong></p><h2 id="Sass"><a href="#Sass" class="headerlink" title="Sass"></a>Sass</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@mixin transform ($property) &#123;</span><br><span class="line">    -webkit-transform: $property;</span><br><span class="line">    -ms-transform: $property;</span><br><span class="line">    transform: $property;</span><br><span class="line">&#125;</span><br><span class="line">.box &#123;</span><br><span class="line">    @include transform(rotate(<span class="number">30</span>deg))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="css"><a href="#css" class="headerlink" title="css"></a>css</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">    -webkit-transform: rotate(<span class="number">30</span>deg);</span><br><span class="line">    -ms-transform: rotate(<span class="number">30</span>deg);</span><br><span class="line">    transform: rotate(<span class="number">30</span>deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Inheritance-继承"><a href="#Inheritance-继承" class="headerlink" title="Inheritance 继承"></a>Inheritance 继承</h1><p>**@extend **</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">%message-shared&#123;</span><br><span class="line">    border: 1px solid #ccc;</span><br><span class="line">    padding: <span class="number">10</span>px;</span><br><span class="line">    color: #333;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.message&#123;</span><br><span class="line">    @extend %message-shared;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.success&#123;</span><br><span class="line">    @extend %message-shared;</span><br><span class="line">    border-color: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="逻辑判断"><a href="#逻辑判断" class="headerlink" title="逻辑判断"></a>逻辑判断</h1><p>**@if …. @else if …. @else **</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">@mixin triangle($size,$color,$direction) &#123;</span><br><span class="line">    height: <span class="number">0</span>;</span><br><span class="line">    width: <span class="number">0</span>;</span><br><span class="line">    border-color: transparent;</span><br><span class="line">    border-style: solid;</span><br><span class="line">    border-width: $size/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">if</span> $direction == up &#123;</span><br><span class="line">    border-bottom-color: $color;</span><br><span class="line">&#125;@<span class="keyword">else</span> <span class="keyword">if</span> $direction == right &#123;</span><br><span class="line">    border-left-color: $color;</span><br><span class="line">&#125;@<span class="keyword">else</span> &#123;</span><br><span class="line">    @error <span class="string">&quot;Unknown direction #&#123; $direction&#125;.&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.next&#123;</span><br><span class="line">    @include triangle(<span class="number">5</span>px, black,right )</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><p>VsCode 里面 插件 ：Live Sass Compiler</p><p>在 setting 设置里面搜索 live sass compiler</p><p>设置 format 里面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;format&quot;</span>: <span class="string">&quot;compressed&quot;</span>, <span class="comment">//压缩css</span></span><br><span class="line"><span class="string">&quot;extensionName&quot;</span>: <span class="string">&quot;.css&quot;</span>, <span class="comment">//编译扩展名</span></span><br><span class="line"><span class="string">&quot;savePath&quot;</span>: <span class="string">&quot;/css&quot;</span> <span class="comment">//编译后存放路径</span></span><br></pre></td></tr></table></figure><p>在需要转换为css的sass 的文件里面点击Vscode 下面的<strong>Watching..</strong>.  即可转换成/css/文件夹下的css文件 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;css-变量&quot;&gt;&lt;a href=&quot;#css-变量&quot; class=&quot;headerlink&quot; title=&quot;css 变量&quot;&gt;&lt;/a&gt;css 变量&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;$&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$Primary-color : #333;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>RXJS学习</title>
    <link href="https://hard-workingrookie.github.io/2020/09/28/RXJS%E5%AD%A6%E4%B9%A0/"/>
    <id>https://hard-workingrookie.github.io/2020/09/28/RXJS%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-09-28T07:58:40.000Z</published>
    <updated>2020-09-28T11:03:09.532Z</updated>
    
    <content type="html"><![CDATA[<p><strong>The ReactiveX library fro JavaScript</strong></p><p>Reactive-Extensions (RX)</p><p>RxJS 是使用 Observables 的响应式编程的库，它使编写异步或基于回调的代码更容易。</p><h1 id="RXJS-介绍"><a href="#RXJS-介绍" class="headerlink" title="RXJS 介绍"></a>RXJS 介绍</h1><p>一组可用来处理 <strong>非同步 或事件</strong> 的JavaScript 函数库。</p><h2 id="非同步"><a href="#非同步" class="headerlink" title="非同步"></a>非同步</h2><ul><li>AJAX / XHR (XMLHttpRequest) / fetch API</li><li>Service Worker / Node Stream </li><li>setTimeout / setInterval</li><li>Promise</li></ul><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>各式 DOM 事件 (click ,dbclick ,keyup ,mousemove … )<br>css 动画事件 (css3 transitionEnd event)<br>HTML5 Geolocation (地理地位)/ WebSockets (在单个 TCP 连接上进行全双工通讯的协议) / server Send Event(SSE)</p><h1 id="RXJS-的核心概念"><a href="#RXJS-的核心概念" class="headerlink" title="RXJS 的核心概念"></a>RXJS 的核心概念</h1><h2 id="Observable-可观察的物件"><a href="#Observable-可观察的物件" class="headerlink" title="Observable   可观察的物件"></a>Observable   可观察的物件</h2><ul><li>代表一组<strong>未来</strong>即将发生的<strong>事件资料</strong>（被观察的物件）</li></ul><h2 id="Observer-观察者物件"><a href="#Observer-观察者物件" class="headerlink" title="Observer     观察者物件"></a>Observer     观察者物件</h2><ul><li>代表一个用来接收 <strong>观察结果</strong> 的物件 （收到的就是<strong>事件资料</strong>）</li><li>观察者物件就是一个物件包含3个包含回呼函式的属性 （next,error,complete)</li></ul><h2 id="Subsciption-订阅物件"><a href="#Subsciption-订阅物件" class="headerlink" title="Subsciption  订阅物件"></a>Subsciption  订阅物件</h2><ul><li>代表正在执行 Observable / Observer 的执行个数 （可用来<strong>取消订阅</strong>）</li></ul><h2 id="Operators-运算子"><a href="#Operators-运算子" class="headerlink" title="Operators    运算子"></a>Operators    运算子</h2><ul><li>必须拥有<strong>函数编程</strong>中所定义的纯函数特性（<strong>没有副作用的函式</strong>）</li><li>主要用来处理一系列的<strong>事件资料集合</strong></li><li>常见的运算在包含map，filter，concat，flatMap，switchMap，…</li></ul><h2 id="Subject-主体物件"><a href="#Subject-主体物件" class="headerlink" title="Subject      主体物件"></a>Subject      主体物件</h2><p>如同 EventEmitter 一样，主要用来<strong>广播</strong>收到的事件资料给多个Observer（观察者）</p><h2 id="Schedulers-排程控制器"><a href="#Schedulers-排程控制器" class="headerlink" title="Schedulers   排程控制器"></a>Schedulers   排程控制器</h2><p>用来集中管理和调度多重事件之间的资料，以控制<strong>事件并发</strong>的情况</p><h1 id="Rxjs的运作方式"><a href="#Rxjs的运作方式" class="headerlink" title="Rxjs的运作方式"></a>Rxjs的运作方式</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rxjs.interval(500) &#x2F;&#x2F;建立运算子（creation）</span><br><span class="line">    .pipe(rxjs.operators.take(4)) &#x2F;&#x2F; 过滤运算子 （Filtering)</span><br><span class="line">    .subscribe(console.log) &#x2F;&#x2F; 回复订阅物件（Subscription)  观察者（observer）</span><br></pre></td></tr></table></figure><p>const { interval } =rxjs;<br>const { take } =rxjs.operators</p><p>interval(5000)<br>    .pipe(take(4))<br>    .subscribe(console.log)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;The ReactiveX library fro JavaScript&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Reactive-Extensions (RX)&lt;/p&gt;
&lt;p&gt;RxJS 是使用 Observables 的响应式编程的库，它使编写异步或基于回调的代码</summary>
      
    
    
    
    <category term="RXJS学习" scheme="https://hard-workingrookie.github.io/categories/RXJS%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="RXJS" scheme="https://hard-workingrookie.github.io/tags/RXJS/"/>
    
  </entry>
  
  <entry>
    <title>前端学习路线</title>
    <link href="https://hard-workingrookie.github.io/2020/09/27/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
    <id>https://hard-workingrookie.github.io/2020/09/27/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</id>
    <published>2020-09-27T14:45:45.000Z</published>
    <updated>2020-12-24T06:20:21.600Z</updated>
    
    <content type="html"><![CDATA[<p>如果有说错了，请见谅。<br>此文章链接在知乎上：</p><p> 前端学习路线（很长，建议收藏） - 有一天wm的文章 - 知乎<br><a href="https://zhuanlan.zhihu.com/p/164701269">https://zhuanlan.zhihu.com/p/164701269</a></p><h1 id="一、编辑器："><a href="#一、编辑器：" class="headerlink" title="一、编辑器："></a>一、编辑器：</h1><h2 id="VSCode-推荐使用"><a href="#VSCode-推荐使用" class="headerlink" title="VSCode (推荐使用)"></a>VSCode (推荐使用)</h2><p>​</p><ol><li>WebStorm</li><li>Atom</li><li>Sublime</li></ol><h1 id="二、HTML"><a href="#二、HTML" class="headerlink" title="二、HTML"></a>二、HTML</h1><ul><li>常用标签</li><li>表单</li><li>HTML </li></ul><h1 id="三、CSS"><a href="#三、CSS" class="headerlink" title="三、CSS"></a>三、CSS</h1><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h2 id="布局（浮动float、定位position、盒模型、flex、grid-layout"><a href="#布局（浮动float、定位position、盒模型、flex、grid-layout" class="headerlink" title="布局（浮动float、定位position、盒模型、flex、grid/layout)"></a>布局（浮动float、定位position、盒模型、flex、grid/layout)</h2><h2 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h2><ol><li>viewport（用户网页的可视区域）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>流动布局（fluid grid）</li><li>媒体监听@media</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@media only screen and (max-width: <span class="number">500</span>px) &#123;</span><br><span class="line">    .gridmenu &#123;</span><br><span class="line">         width:<span class="number">100</span>%;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、JS"><a href="#四、JS" class="headerlink" title="四、JS"></a>四、JS</h1><h2 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h2><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ol><li>函数定义和调用</li><li>变量作用域与解构赋值</li><li>方法</li><li>高阶函数</li><li>闭包</li><li>箭头函数</li><li>generator</li></ol><h2 id="标准对象"><a href="#标准对象" class="headerlink" title="标准对象"></a>标准对象</h2><h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><ol><li>创建对象</li><li>原型继承</li><li>class继承</li></ol><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6+"></a>ES6+</h2><h2 id="接口请求Ajax（XMLHTTPRequest的一个实例）-Fetch（基于promise实现的，也可以结合async-await）"><a href="#接口请求Ajax（XMLHTTPRequest的一个实例）-Fetch（基于promise实现的，也可以结合async-await）" class="headerlink" title="接口请求Ajax（XMLHTTPRequest的一个实例）/Fetch（基于promise实现的，也可以结合async/await）"></a>接口请求Ajax（XMLHTTPRequest的一个实例）/Fetch（基于promise实现的，也可以结合async/await）</h2><h1 id="五、版本管理工具Git"><a href="#五、版本管理工具Git" class="headerlink" title="五、版本管理工具Git"></a>五、版本管理工具Git</h1><p><strong>推荐使用软件（Tower)</strong></p><p>快捷方便，commit push pull checkout merge restore rename等等，一键搞定 </p><p>工作流程</p><p>​<a href="https://pic1.zhimg.com/80/v2-4da51a165e7fbeba06f782eed69dd94b_720w.jpg">https://pic1.zhimg.com/80/v2-4da51a165e7fbeba06f782eed69dd94b_720w.jpg</a></p><ul><li>创建仓库</li></ul><p>git init</p><ul><li><p>基本操作</p><p>  git clone<br>  git add<br>  git diff<br>  git commit<br>  git rm<br>  git reset HEAD</p></li><li><p>分支管理</p><p>  git branch (branchname)<br>  git branch (branchname)<br>  git merge </p></li><li><p>使用github搭建个人博客，可用以下</p><p>  hexo<br>  gatsby<br>  vuePress</p></li></ul><h1 id="六、Node-不用学太深"><a href="#六、Node-不用学太深" class="headerlink" title="六、Node(不用学太深)"></a>六、Node(不用学太深)</h1><p><strong>包管理</strong></p><ul><li><p>npm<br>  npm install <package-name>  (安装单个软件包)<br>  npm update <package-name>  (更新软件包)<br>  npm run <task-name> (运行任务)<br>  npm uninstall <package-name>(卸载 npm 软件包)<br>  -g标志可以执行全局安装<br>  -S就是–save的简写<br>  -D就是–save-dev 这样安装的包的名称及版本号就会存在package.json的devDependencies这个里面，而–save会将包的名称及版本号放在dependencies里面。</p></li><li><p>yarn</p></li><li><p>npx </p></li></ul><p>常用包</p><ul><li>文件读写fs</li><li>路径查找path</li><li>网络http</li></ul><h1 id="七、构建工具"><a href="#七、构建工具" class="headerlink" title="七、构建工具"></a>七、构建工具</h1><h2 id="自动化构建"><a href="#自动化构建" class="headerlink" title="自动化构建"></a>自动化构建</h2><ul><li><p>npm script</p><p>  npm 允许在 package.json 文件里面，使用 scripts 字段定义脚本命令</p></li><li><p>gulp</p></li><li><p>模块化打包</p></li><li><p>webpack(推荐)</p></li><li><p>Rollup</p></li><li><p>Snowpack</p></li><li><p>Parcel</p></li></ul><h1 id="八、CSS预处理"><a href="#八、CSS预处理" class="headerlink" title="八、CSS预处理"></a>八、CSS预处理</h1><p>Sass(推荐）<br>​<br>PostCss<br>Stylus<br>Less</p><p>转载<br>CSS 预处理器 sass,less,stylus优缺点</p><h1 id="九、JS框架-没有好与不好，只有适不适合"><a href="#九、JS框架-没有好与不好，只有适不适合" class="headerlink" title="九、JS框架(没有好与不好，只有适不适合)"></a>九、JS框架(没有好与不好，只有适不适合)</h1><h2 id="React-推荐）"><a href="#React-推荐）" class="headerlink" title="React(推荐）"></a>React(推荐）</h2><ul><li>Redux</li><li>Mobx</li><li>React-router</li></ul><h2 id="Vue（推荐）"><a href="#Vue（推荐）" class="headerlink" title="Vue（推荐）"></a>Vue（推荐）</h2><ul><li>Vuex</li><li>Vue-router</li></ul><h2 id="Angular"><a href="#Angular" class="headerlink" title="Angular"></a>Angular</h2><ul><li>RxJS</li><li>NgRx</li></ul><h1 id="十、CSS框架"><a href="#十、CSS框架" class="headerlink" title="十、CSS框架"></a>十、CSS框架</h1><h2 id="Antd-推荐"><a href="#Antd-推荐" class="headerlink" title="Antd(推荐)"></a>Antd(推荐)</h2><p>Ant Design - 一套企业级 UI 设计语言和 React 组件库<br>​</p><h2 id="Element-UI（推荐）"><a href="#Element-UI（推荐）" class="headerlink" title="Element UI（推荐）"></a>Element UI（推荐）</h2><p>​</p><h2 id="Material-UI"><a href="#Material-UI" class="headerlink" title="Material UI"></a>Material UI</h2><p>​</p><h2 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h2><p>​</p><h2 id="semantic-UI"><a href="#semantic-UI" class="headerlink" title="semantic UI"></a>semantic UI</h2><p>​</p><h1 id="十一、CSS优化方案"><a href="#十一、CSS优化方案" class="headerlink" title="十一、CSS优化方案"></a>十一、CSS优化方案</h1><ul><li><p>Styled Component(推荐)</p></li><li><p>​</p></li><li><p>CSS Modules（推荐）</p></li><li><p>Styled JSX</p></li></ul><h1 id="十二、性能"><a href="#十二、性能" class="headerlink" title="十二、性能"></a>十二、性能</h1><p>白屏、卡顿、页面加载失败、页面跳转慢、图片空窗、崩溃、耗电等问题一直都是用户频繁舆情反馈的痛点。</p><p><strong>性能指标</strong><br>    白屏时间<br>    首屏时间<br>    用户可操作时间<br>    页面总下载时间<br>    请求数量</p><p><strong>RAIL模型</strong></p><p><strong>LightHouse指标</strong></p><p><strong>DevTools</strong><br><strong>PWA</strong><br>​<br><strong>Service Worker</strong><br><strong>骨架屏</strong>（骨架屏(Skeleton Screen)是指在页面数据加载完成前，先给用户展示出页面的大致结构（灰色占位图），在拿到接口数据后渲染出实际页面内容然后替换掉。）</p><h1 id="十三、数据可视化"><a href="#十三、数据可视化" class="headerlink" title="十三、数据可视化"></a>十三、数据可视化</h1><ul><li>ECharts(推荐)</li><li>AntV</li><li>HighChat</li></ul><h1 id="十四、移动端应用"><a href="#十四、移动端应用" class="headerlink" title="十四、移动端应用"></a>十四、移动端应用</h1><h2 id="React-Native-推荐"><a href="#React-Native-推荐" class="headerlink" title="React Native(推荐)"></a>React Native(推荐)</h2><p>​</p><ul><li>React Native 插件汇总：</li><li>react-native-linear-gradient 颜色渐变处理</li><li>react-native-login  视频界面登录</li><li>react-native-keyboard-aware-scroll-view 键盘显示处理</li><li>react-native-popup-dialog 弹窗</li><li>react-native-dropdownalert 一种非常漂亮的alert弹窗方式，从状态栏往下弹窗；</li><li>react-native-simple-radio-button 单选按钮；</li><li>react-native-swiper</li><li>react-native-macos macos桌面应用</li><li>react-native-wechat 集成微信相关SDK</li><li>react-native-modalbox  模态弹窗</li><li>react-native-touch-id 指纹登录</li><li>react-native-prompt 可输入文字的弹窗</li><li>react-native-sqlite-storage sqlite数据库存储</li><li>react-native-permissions 权限检查</li><li>react-native-progress-hud loading圈</li><li>react-native-snackbar 类似toast的弹窗模式</li><li>react-native-qrcode-svg 二维码生产工具</li><li>native-base UI组件</li><li>react-native-busy-indicator loading圈</li><li>react-native-fit-image 图片展示优化</li><li>react-native-timer 定时器管理</li><li>react-native-scrollable-tab-view 可以左右滑动的tab</li><li>react-native-zip-archive 解压工具</li><li>react-native-xml2js</li><li>react-native-spinkit 好看的loading圈</li><li>react-native-interactable 有很强交互效果的table视图</li><li>react-native-pull-to-refresh 下拉刷新效果</li><li>react-native-deck-swiper 不错的swiper效果</li><li>react-native-prefix-picker select效果</li><li>react-native-gesture-helper 手势 向上还是向下 还是向左</li><li>react-native-drawer-layout 抽屉效果</li><li>react-native-sortable-listview 可拖拽排序的列表视图</li><li>react-native-progress 进度条 长方形 圆形</li><li>react-native-splash-screen 启动屏处理</li><li>react-native-masked-text 指定格式的输入框</li><li>react-native-keyboard-manager 针对IOS 键盘遮挡的问题 俺可以这么用android:windowSoftInputMode=”adjustResize”</li><li>react-native-beacons-manager 蓝牙处理</li><li>react-native-fetch-blob  文件获取</li><li>react-native-popup-menu 弹出菜单</li><li>react-native-pathjs-charts 图表</li><li>react-native-dates 日历日期选择工具</li><li>react-native-calendar-strip 一种简单的日历处理</li><li>react-native-simple-markdown 简单的markdown文本编辑器</li><li>react-native-image-progress 进度条</li><li>react-native-img-cache 图片缓存技术</li><li>rn-placeholder 在展示具体的文字和图片之前有个加载样式处理</li><li>react-native-pie-chart 饼状图</li><li>react-native-maps 地图</li><li>react-native-loading-overlay loading圈加载遮罩</li><li>react-native-progress 圆形进度条 react-native 圆形进度条</li><li>react-native-modal  弹窗插件 react-native-modal</li><li>react-native-extra-dimensions-android 安卓水滴屏获取屏幕高度 Sunhat/react-native-extra-dimensions-android</li></ul><h2 id="Weex-阿里巴巴旗下的跨平台移动开发解决方案"><a href="#Weex-阿里巴巴旗下的跨平台移动开发解决方案" class="headerlink" title="Weex(阿里巴巴旗下的跨平台移动开发解决方案)"></a>Weex(阿里巴巴旗下的跨平台移动开发解决方案)</h2><h2 id="Flutter"><a href="#Flutter" class="headerlink" title="Flutter"></a>Flutter</h2><h1 id="十五、小程序"><a href="#十五、小程序" class="headerlink" title="十五、小程序"></a>十五、小程序</h1><h2 id="原生"><a href="#原生" class="headerlink" title="原生"></a>原生</h2><ul><li>微信</li><li>支付宝</li><li>头条</li></ul><h2 id="跨端"><a href="#跨端" class="headerlink" title="跨端"></a>跨端</h2><ul><li>Taro</li><li>uni-app<br>​</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;如果有说错了，请见谅。&lt;br&gt;此文章链接在知乎上：&lt;/p&gt;
&lt;p&gt; 前端学习路线（很长，建议收藏） - 有一天wm的文章 - 知乎&lt;br&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/164701269&quot;&gt;https://zhuanlan.zh</summary>
      
    
    
    
    <category term="前端" scheme="https://hard-workingrookie.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://hard-workingrookie.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习总结</title>
    <link href="https://hard-workingrookie.github.io/2020/09/23/Vue%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>https://hard-workingrookie.github.io/2020/09/23/Vue%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</id>
    <published>2020-09-23T01:26:20.000Z</published>
    <updated>2020-12-24T06:20:21.606Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实例vue-3步-："><a href="#实例vue-3步-：" class="headerlink" title="实例vue(3步)："></a>实例vue(3步)：</h1><h2 id="1-创建根实例"><a href="#1-创建根实例" class="headerlink" title="1.创建根实例:"></a>1.创建根实例:</h2><p>let app =new Vue({})</p><h2 id="2-挂载根实例："><a href="#2-挂载根实例：" class="headerlink" title="2.挂载根实例："></a>2.挂载根实例：</h2><p>let app = new Vue({<br>    el:’#app’<br>})</p><h2 id="3-绑定数据："><a href="#3-绑定数据：" class="headerlink" title="3.绑定数据："></a>3.绑定数据：</h2><p>let app =new Vue({<br>    el:’#app’,<br>    data: {age:24}<br>})</p><h1 id="vue核心"><a href="#vue核心" class="headerlink" title="vue核心"></a>vue核心</h1><p>数据的双向绑定、组件化</p><h1 id="el"><a href="#el" class="headerlink" title="$el"></a>$el</h1><p>表示在vue实例上挂载的DOM对象属性<br>app.$el ===document.getElementById(“app”)</p><h1 id="data"><a href="#data" class="headerlink" title="$data"></a>$data</h1><p>表示在vue实例上挂载的数据属性<br>app.$data.apge === app.age //true</p><h1 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h1><h2 id="v-html-原始html"><a href="#v-html-原始html" class="headerlink" title="v-html: 原始html"></a>v-html: 原始html</h2><h2 id="v-once-单项绑定"><a href="#v-once-单项绑定" class="headerlink" title="v-once:单项绑定"></a>v-once:单项绑定</h2><h2 id="v-pre-跳跃编译，显示原始标签"><a href="#v-pre-跳跃编译，显示原始标签" class="headerlink" title="v-pre:跳跃编译，显示原始标签"></a>v-pre:跳跃编译，显示原始标签</h2><h2 id="v-bind-属性绑定-（-：）"><a href="#v-bind-属性绑定-（-：）" class="headerlink" title="v-bind:属性绑定 （ ：）"></a>v-bind:属性绑定 （ ：）</h2><h3 id="绑定-class"><a href="#绑定-class" class="headerlink" title="绑定 class"></a>绑定 class</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div</span><br><span class="line">  <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;static&quot;</span></span><br><span class="line">  v-bind:<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;&#123; active: isActive, &#x27;text-danger&#x27;: hasError &#125;&quot;</span></span><br><span class="line">&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>和如下 data：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  isActive: <span class="literal">true</span>,</span><br><span class="line">  hasError: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果渲染为：</p><p><code>&lt;div class=&quot;static active&quot;&gt;&lt;/div&gt;</code></p><h3 id="绑定-style"><a href="#绑定-style" class="headerlink" title="绑定 style"></a>绑定 style</h3><p><code>&lt;div v-bind:style=&quot;styleObject&quot;&gt;&lt;/div&gt;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  styleObject: &#123;</span><br><span class="line">    color: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">    fontSize: <span class="string">&#x27;13px&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="v-show-和-v-if"><a href="#v-show-和-v-if" class="headerlink" title="v-show 和 v-if"></a>v-show 和 v-if</h2><p>v-show 本质是标签display:none  ,元素隐藏， 控制CSS， 只编译一次，后面一直控制css,故性能更好</p><p>v-if 是动态的向DOM 树内 添加或删除DOM元素，不停的销毁和创建</p><h2 id="v-cloak-遮罩指令-（防止屏幕闪动，需要配合-v-cloak-display-none"><a href="#v-cloak-遮罩指令-（防止屏幕闪动，需要配合-v-cloak-display-none" class="headerlink" title="v-cloak : 遮罩指令 （防止屏幕闪动，需要配合[v-cloak]{display:none})"></a>v-cloak : 遮罩指令 （防止屏幕闪动，需要配合[v-cloak]{display:none})</h2><h2 id="v-else-v-else-if-v-if-加key"><a href="#v-else-v-else-if-v-if-加key" class="headerlink" title="v-else / v-else-if / v-if :  加key"></a>v-else / v-else-if / v-if :  加key</h2><h2 id="v-for-列表渲染-（加key）"><a href="#v-for-列表渲染-（加key）" class="headerlink" title="v-for :  列表渲染 （加key）"></a>v-for :  列表渲染 （加key）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;ul id=<span class="string">&quot;example-1&quot;</span>&gt;</span><br><span class="line">  &lt;li v-<span class="keyword">for</span>=<span class="string">&quot;item in items&quot;</span> :key=<span class="string">&quot;item.message&quot;</span>&gt;</span><br><span class="line">    &#123;&#123; item.message &#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>遍历数组</strong> 可以接收三个参数 ： element ,index ,self<br><strong>遍历对象</strong> 可以接收三个参数 ： value , key, index</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div v-<span class="keyword">for</span>=<span class="string">&quot;(value, name, index) in object&quot;</span>&gt;</span><br><span class="line">  &#123;&#123; index &#125;&#125;. &#123;&#123; name &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="控制循环次数的两次方法："><a href="#控制循环次数的两次方法：" class="headerlink" title="控制循环次数的两次方法："></a>控制循环次数的两次方法：</h3><ul><li>item of items.slice(0,2)</li><li>通过 v-if 控制</li></ul><h2 id="v-on：事件绑定-（-）"><a href="#v-on：事件绑定-（-）" class="headerlink" title="v-on：事件绑定   （ @ ）"></a>v-on：事件绑定   （ @ ）</h2><h3 id="v-on-绑定修饰符"><a href="#v-on-绑定修饰符" class="headerlink" title="v-on 绑定修饰符"></a>v-on 绑定修饰符</h3><ul><li>.stop: 阻止事件的传递，即阻止事件向上冒泡 （写在子元素里）</li><li>.prevent: 阻止对象的默认行为</li><li>.capture: 使用事件捕获机制 （写给父元素）</li><li>.self: 自身事件修饰符</li><li>.once: 绑定的事件只能触发一次</li><li>.keyup .keyCode 键值修饰符</li></ul><h2 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h2><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><ul><li>.lazy   取代 input 监听 change 事件</li><li>.number 输入字符串转为有效的数字</li><li>.trim   输入首尾空格过滤</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;input v-model=<span class="string">&quot;message&quot;</span> placeholder=<span class="string">&quot;edit me&quot;</span>&gt;</span><br><span class="line">&lt;p&gt;Message is: &#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在文本区域插值 (<textarea></textarea>) 并不会生效，应用 v-model 来代替。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;span&gt;Multiline message is:&lt;/span&gt;</span><br><span class="line">&lt;p style=<span class="string">&quot;white-space: pre-line;&quot;</span>&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;textarea v-model=<span class="string">&quot;message&quot;</span> placeholder=<span class="string">&quot;add multiple lines&quot;</span>&gt;&lt;/textarea&gt;</span><br></pre></td></tr></table></figure><p>使用v-modle时，如果是中文输入法下，在拼音阶段，不会随时更新，可以用<code>@input</code>来代替</p><ol><li>单选框/按钮：组合使用可使v-model相同，即可实现互斥，配合value使用</li><li>复选框/多选按钮：b-model会绑定到同数组类型的数据，配合value使用</li><li>下拉列表：想多选就加一个multiple</li></ol><h1 id="updated，watch，nextTick"><a href="#updated，watch，nextTick" class="headerlink" title="updated，watch，nextTick"></a>updated，watch，nextTick</h1><h2 id="updated"><a href="#updated" class="headerlink" title="updated"></a>updated</h2><p>对数据的某一次更新</p><h2 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h2><p>对某个数据的统一变化</p><h2 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h2><p>对所有数据变化统一的处理</p><h1 id="console"><a href="#console" class="headerlink" title="console"></a>console</h1><ul><li>console.log()     日志信息</li><li>console.info()    一般信息</li><li>console.debug()   除错信息 （ 谷歌 ，Opera 不支持）</li><li>console..warn()   警告提示</li><li>console.error()   错误提示</li><li>console.group()和 console.groupEnd()      分组显示</li><li>console.dir()     输出属性和方法</li><li>console.dirxml()  输出节点代码</li><li>console.clear()   清空控制台内容</li><li>console.time() , console.timeEnd()    计时器</li><li>console.count()   计数器</li><li>console.table()   表格化</li></ul><h1 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h1><h2 id="创建阶段"><a href="#创建阶段" class="headerlink" title="创建阶段"></a>创建阶段</h2><p>beforeCreate : el 和 data 并未初始化<br>created : data 已经初始化 ，但 el 并未初始化</p><h2 id="挂载阶段"><a href="#挂载阶段" class="headerlink" title="挂载阶段"></a>挂载阶段</h2><p>beforeMount : el 和 data  均已初始化 ，用了 虚拟DOM 技术<br>mounted ： 数据被渲染出来</p><h2 id="更新阶段"><a href="#更新阶段" class="headerlink" title="更新阶段"></a>更新阶段</h2><p>beforeUpdate ： 无法访问DOM<br>updated : 可以访问DOM</p><h2 id="销毁阶段"><a href="#销毁阶段" class="headerlink" title="销毁阶段"></a>销毁阶段</h2><p>beforeDestroy： 实例销毁前调用，在这一步，实例仍然完全可用<br>destoryed:  实例销毁后被调用 。 该钩子被调用后， 对应Vue 实例的所有指令都被解绑，所有的事件监听器都被移除，所有的子实例 也都被销毁 。</p><h2 id="数据挂载方式"><a href="#数据挂载方式" class="headerlink" title="数据挂载方式"></a>数据挂载方式</h2><ol><li>实例化时用el 挂载</li><li>$mount</li></ol><h1 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h1><p>包含 getter  和 setter  ，采用 getter 读取 ，用 setter 设置 ，默认 用 getter 读取就可</p><p> getter  和 setter  的 this 上下文 自动绑定为 vue 实例 。 </p><h1 id="数组更新检测"><a href="#数组更新检测" class="headerlink" title="数组更新检测"></a>数组更新检测</h1><h2 id="变更方法"><a href="#变更方法" class="headerlink" title="变更方法"></a>变更方法</h2><ul><li>push()    末尾添加</li><li>pop()     末尾删除</li><li>shift()   开头删除</li><li>unshift() 开头添加</li><li>splice()  添加、删除、替换</li><li>sort()    排序</li><li>reverse() 颠倒数组中元素的顺序</li></ul><h2 id="替换数组"><a href="#替换数组" class="headerlink" title="替换数组"></a>替换数组</h2><p>变更方法，顾名思义，会变更调用了这些方法的原始数组。相比之下，也有非变更方法，例如 filter()、concat() 和 slice()。它们不会变更原始数组，而总是返回一个新数组。当使用非变更方法时，可以用新数组替换旧数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">example1.items = example1.items.filter(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item.message.match(<span class="regexp">/Foo/</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="显示过滤-排序后的结果"><a href="#显示过滤-排序后的结果" class="headerlink" title="显示过滤/排序后的结果"></a>显示过滤/排序后的结果</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;ul v-<span class="keyword">for</span>=<span class="string">&quot;set in sets&quot;</span>&gt;</span><br><span class="line">  &lt;li v-<span class="keyword">for</span>=<span class="string">&quot;n in even(set)&quot;</span>&gt;&#123;&#123; n &#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">data: &#123;</span><br><span class="line">  sets: [[ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]]</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  even: <span class="function"><span class="keyword">function</span> (<span class="params">numbers</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> numbers.filter(<span class="function"><span class="keyword">function</span> (<span class="params">number</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> number % <span class="number">2</span> === <span class="number">0</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h2><p>for … in<br>遍历对象键 object.keys()<br>遍历对象键 object.values()<br>for … of</p><h2 id="数组非变异方法"><a href="#数组非变异方法" class="headerlink" title="数组非变异方法"></a>数组非变异方法</h2><ol><li>筛选-filter</li><li>拼接-concat</li><li>截取-slice</li></ol><h2 id="js-限制-数组操作"><a href="#js-限制-数组操作" class="headerlink" title="js 限制 - 数组操作"></a>js 限制 - 数组操作</h2><ol><li>直接设置/修改一项内容<br> vue.set(app.items,0,’p’)<br> app.items.splice(0,1,’p’)</li><li>修改长度<br> app.items.splice(0,0)<br> app.items.length = 8;</li></ol><h2 id="JS限制-对象操作："><a href="#JS限制-对象操作：" class="headerlink" title="JS限制-对象操作："></a>JS限制-对象操作：</h2><pre><code>  vue.set(app.obj,&#39;height&#39;,&#39;180&#39;)</code></pre><h1 id="全局组件和局部组件"><a href="#全局组件和局部组件" class="headerlink" title="全局组件和局部组件"></a>全局组件和局部组件</h1><h2 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h2><ul><li>注册步骤</li></ul><ol><li>注册组件 component 并命名</li><li>添加 template 内容</li><li>通过自定义组件名调用组件</li></ol><ul><li>作用域</li></ul><p>全局都可以直接用</p><ul><li>注册位置</li></ul><p>在创建实例前注册</p><h2 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h2><ul><li>作用域</li></ul><p>在当前实例作用域下有效</p><ul><li>注册位置</li></ul><p>在component选项内注册</p><p>组件当中除了可以用template，还可以用 computed ，methods，data 必须是函数， 且必须将数据return 出去</p><h1 id="路由跳转"><a href="#路由跳转" class="headerlink" title="路由跳转"></a>路由跳转</h1><ol><li><router-link to=""></router-link></li><li>this.$router.push()</li></ol><p>$once(钩子，函数)</p><h1 id="混入-mixin"><a href="#混入-mixin" class="headerlink" title="混入 mixin"></a>混入 mixin</h1><p>混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 定义一个混入对象</span></span><br><span class="line"><span class="keyword">var</span> myMixin = &#123;</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.hello()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    hello: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;hello from mixin!&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个使用混入对象的组件</span></span><br><span class="line"><span class="keyword">var</span> Component = Vue.extend(&#123;</span><br><span class="line">  mixins: [myMixin]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> component = <span class="keyword">new</span> Component() <span class="comment">// =&gt; &quot;hello from mixin!&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="选项合并"><a href="#选项合并" class="headerlink" title="选项合并"></a>选项合并</h2><p>当组件和混入对象含有同名选项时，这些选项将以恰当的方式进行“合并”。</p><p>比如，数据对象在内部会进行递归合并，并在发生冲突时以组件数据优先。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> mixin = &#123;</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      message: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">      foo: <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  mixins: [mixin],</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      message: <span class="string">&#x27;goodbye&#x27;</span>,</span><br><span class="line">      bar: <span class="string">&#x27;def&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.$data)</span><br><span class="line">    <span class="comment">// =&gt; &#123; message: &quot;goodbye&quot;, foo: &quot;abc&quot;, bar: &quot;def&quot; &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>值为对象的选项，例如 methods、components 和 directives，将被合并为同一个对象。两个对象键名冲突时，取组件对象的键值对。</p><h2 id="全局混入"><a href="#全局混入" class="headerlink" title="全局混入"></a>全局混入</h2><p>混入也可以进行全局注册。使用时格外小心！一旦使用全局混入，它将影响每一个之后创建的 Vue 实例。使用恰当时，这可以用来为自定义选项注入处理逻辑。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为自定义的选项 &#x27;myOption&#x27; 注入一个处理器。</span></span><br><span class="line">Vue.mixin(&#123;</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> myOption = <span class="built_in">this</span>.$options.myOption</span><br><span class="line">    <span class="keyword">if</span> (myOption) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(myOption)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  myOption: <span class="string">&#x27;hello!&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// =&gt; &quot;hello!&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="对象的赋值"><a href="#对象的赋值" class="headerlink" title="对象的赋值"></a>对象的赋值</h1><h2 id="（1）在-store-中定义一个对象："><a href="#（1）在-store-中定义一个对象：" class="headerlink" title="（1）在 store 中定义一个对象："></a>（1）在 store 中定义一个对象：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">userInfo: &#123;</span><br><span class="line">        pin: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        nickName: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        avatarUrl: DEFAULT_AVATAR,</span><br><span class="line">        definePin: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        isbind: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h2 id="（2）从接口拿到数据后，给这个对象赋值："><a href="#（2）从接口拿到数据后，给这个对象赋值：" class="headerlink" title="（2）从接口拿到数据后，给这个对象赋值："></a>（2）从接口拿到数据后，给这个对象赋值：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.userInfo = &#123;</span><br><span class="line">        ...this.userInfo,</span><br><span class="line">        pin: res.base.curPin,</span><br><span class="line">        nickName: res.base.nickname,</span><br><span class="line">        avatarUrl: res.base.headImageUrl ? res.base.headImageUrl : DEFAULT_AVATAR,</span><br><span class="line">        definePin: res.definePin</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;ie=edge&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;vue2.5.16.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">        &lt;!-- 通过 过滤器 msgFormat 对 msg 进行过滤--&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; msg | msgFormat &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">// 定义一个 Vue 全局的过滤器，名字叫做  msgFormat</span></span><br><span class="line">        Vue.filter(<span class="string">&#x27;msgFormat&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">myMsg</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 字符串的  replace 方法，第一个参数，除了可写一个 字符串之外，还可以定义一个正则</span></span><br><span class="line">            <span class="comment">//将 myMsg 中的所有`美`字样，修改为`丑`</span></span><br><span class="line">            <span class="keyword">return</span> myMsg.replace(<span class="regexp">/美/g</span>, <span class="string">&#x27;丑&#x27;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="line">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line">                msg: <span class="string">&#x27;没有美的女人&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;vue2.5.16.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">        <span class="number">2018</span><span class="number">-05</span><span class="number">-25</span>T14:<span class="number">06</span>:<span class="number">51.618</span>Z</span><br><span class="line">        &lt;br /&gt; &#123;&#123; <span class="string">&#x27;2018-05-25T14:06:51.618Z&#x27;</span> | dateFormat &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.filter(<span class="string">&#x27;dateFormat&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">dateStr, pattern = <span class="string">&#x27;&#x27;</span></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 根据给定的时间字符串，得到特定的时间</span></span><br><span class="line">        <span class="keyword">var</span> dt = <span class="keyword">new</span> <span class="built_in">Date</span>(dateStr)</span><br><span class="line">        <span class="comment">//   yyyy-mm-dd</span></span><br><span class="line">        <span class="keyword">var</span> y = dt.getFullYear()</span><br><span class="line">        <span class="keyword">var</span> m = (dt.getMonth() + <span class="number">1</span>).toString().padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        <span class="keyword">var</span> d = dt.getDate().toString().padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> (pattern.toLowerCase() === <span class="string">&#x27;yyyy-mm-dd&#x27;</span>) &#123; <span class="comment">//如果调用过滤器的参数写的是 yyyy-mm-dd，那就按照这种  yyyy-mm-dd 的格式写</span></span><br><span class="line">            <span class="comment">//这里用的是字符串模板</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span>`</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">//否则（比如说调用过滤器时不写参数），后面就补上 时-分-秒</span></span><br><span class="line">            <span class="keyword">var</span> hh = dt.getHours().toString().padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            <span class="keyword">var</span> mm = dt.getMinutes().toString().padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            <span class="keyword">var</span> ss = dt.getSeconds().toString().padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span> <span class="subst">$&#123;hh&#125;</span>:<span class="subst">$&#123;mm&#125;</span>:<span class="subst">$&#123;ss&#125;</span> ~~~~~~~`</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            time: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="自定义私有过滤器"><a href="#自定义私有过滤器" class="headerlink" title="自定义私有过滤器"></a>自定义私有过滤器</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;vue2.5.16.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">        &#123;&#123; time &#125;&#125;</span><br><span class="line">        &lt;br /&gt;</span><br><span class="line">        &#123;&#123; time | datefmt &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            time: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//在某一个vue对象内部定义的过滤器称之为私有过滤器，</span></span><br><span class="line">        <span class="comment">//这种过滤器只有在当前vue对象el指定的监管的区域有用</span></span><br><span class="line">        filters: &#123;</span><br><span class="line">            <span class="comment">// input是自定义过滤器的默认参数，input的值永远都是取自于 | 左边的内容</span></span><br><span class="line">            datefmt: <span class="function"><span class="keyword">function</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 定义过滤器的内容：将input的值格式化成 yyyy-MM-dd 字符串输出</span></span><br><span class="line">                <span class="keyword">var</span> res = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                <span class="keyword">var</span> year = input.getFullYear();</span><br><span class="line">                <span class="keyword">var</span> month = input.getMonth() + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">var</span> day = input.getDate();</span><br><span class="line">                res = year + <span class="string">&#x27;-&#x27;</span> + month + <span class="string">&#x27;-&#x27;</span> + day;</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>• padStart：返回新的字符串，表示用参数字符串<strong>从头部（左侧）</strong>补全原字符串。<br>• padEnd：返回新的字符串，表示用参数字符串从<strong>尾部（右侧）</strong>补全原字符串。<br>以上两个方法接受两个参数，第一个参数是指定生成的字符串的最小长度，第二个参数是用来补全的字符串。如果没有指定第二个参数，默认用空格填充。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;h&quot;</span>.padStart(<span class="number">5</span>,<span class="string">&quot;o&quot;</span>));  <span class="comment">// &quot;ooooh&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;h&quot;</span>.padEnd(<span class="number">5</span>,<span class="string">&quot;o&quot;</span>));    <span class="comment">// &quot;hoooo&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;h&quot;</span>.padStart(<span class="number">5</span>));      <span class="comment">// &quot;    h&quot;</span></span><br></pre></td></tr></table></figure><h1 id="Vue-动画"><a href="#Vue-动画" class="headerlink" title="Vue 动画"></a>Vue 动画</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;ie=edge&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        li &#123;</span><br><span class="line">            border: 1px dashed #999;</span><br><span class="line">            margin: <span class="number">5</span>px;</span><br><span class="line">            line-height: <span class="number">35</span>px;</span><br><span class="line">            padding-left: <span class="number">5</span>px;</span><br><span class="line">            font-size: <span class="number">12</span>px;</span><br><span class="line">            width: <span class="number">100</span>%;</span><br><span class="line">        &#125;</span><br><span class="line">        li:hover &#123;</span><br><span class="line">            background-color: hotpink;</span><br><span class="line">            transition: all <span class="number">0.8</span>s ease;</span><br><span class="line">        &#125;</span><br><span class="line">        .v-enter,</span><br><span class="line">        .v-leave-to &#123;</span><br><span class="line">            opacity: <span class="number">0</span>;</span><br><span class="line">            transform: translateY(<span class="number">80</span>px);</span><br><span class="line">        &#125;</span><br><span class="line">        .v-enter-active,</span><br><span class="line">        .v-leave-active &#123;</span><br><span class="line">            transition: all <span class="number">0.6</span>s ease;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 下面的 .v-move 和 .v-leave-active 配合使用，能够实现列表后续的元素，渐渐地漂上来的效果 */</span></span><br><span class="line">        .v-move &#123;</span><br><span class="line">            transition: all <span class="number">0.6</span>s ease;</span><br><span class="line">        &#125;</span><br><span class="line">        .v-leave-active &#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;label&gt;</span><br><span class="line">                Id:</span><br><span class="line">                &lt;input type=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;id&quot;</span>&gt;</span><br><span class="line">            &lt;/label&gt;</span><br><span class="line">            &lt;label&gt;</span><br><span class="line">                Name:</span><br><span class="line">                &lt;input type=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;name&quot;</span>&gt;</span><br><span class="line">            &lt;/label&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;添加&quot;</span> @click=<span class="string">&quot;add&quot;</span>&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span> --&gt;</span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 在实现列表过渡的时候，如果需要过渡的元素，是通过 v-for 循环渲染出来的，不能使用 transition 包裹，需要使用 transitionGroup --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 如果要为 v-for 循环创建的元素设置动画，必须为每一个 元素 设置 :key 属性 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 给 ransition-group 添加 appear 属性，实现页面刚展示出来时候，入场时候的效果 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 通过 为 transition-group 元素，设置 tag 属性，指定 transition-group 渲染为指定的元素，如果不指定 tag 属性，默认，渲染为 span 标签 --&gt;</span></span></span><br><span class="line">        &lt;transition-group appear tag=&quot;ul&quot;&gt;</span><br><span class="line">            &lt;li v-for=&quot;(item, i) in list&quot; :key=&quot;item.id&quot; @click=&quot;del(i)&quot;&gt;</span><br><span class="line">                &#123;&#123;item.id&#125;&#125; --- &#123;&#123;item.name&#125;&#125;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- &lt;/ul&gt;</span></span> --&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="line">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line">                id: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                name: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                list: [</span><br><span class="line">                    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;赵高&#x27;</span> &#125;,</span><br><span class="line">                    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;秦桧&#x27;</span> &#125;,</span><br><span class="line">                    &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;严嵩&#x27;</span> &#125;,</span><br><span class="line">                    &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&#x27;魏忠贤&#x27;</span> &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                add() &#123;</span><br><span class="line">                    <span class="built_in">this</span>.list.push(&#123; <span class="attr">id</span>: <span class="built_in">this</span>.id, <span class="attr">name</span>: <span class="built_in">this</span>.name &#125;)</span><br><span class="line">                    <span class="built_in">this</span>.id = <span class="built_in">this</span>.name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                del(i) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.list.splice(i, <span class="number">1</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;实例vue-3步-：&quot;&gt;&lt;a href=&quot;#实例vue-3步-：&quot; class=&quot;headerlink&quot; title=&quot;实例vue(3步)：&quot;&gt;&lt;/a&gt;实例vue(3步)：&lt;/h1&gt;&lt;h2 id=&quot;1-创建根实例&quot;&gt;&lt;a href=&quot;#1-创建根实例&quot; class</summary>
      
    
    
    
    <category term="Vue学习" scheme="https://hard-workingrookie.github.io/categories/Vue%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="vue" scheme="https://hard-workingrookie.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>es678</title>
    <link href="https://hard-workingrookie.github.io/2020/09/21/es678/"/>
    <id>https://hard-workingrookie.github.io/2020/09/21/es678/</id>
    <published>2020-09-21T02:26:55.000Z</published>
    <updated>2020-12-24T06:20:21.600Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES6-常用新特性"><a href="#ES6-常用新特性" class="headerlink" title="ES6 常用新特性"></a>ES6 常用新特性</h1><h2 id="let-amp-amp-const"><a href="#let-amp-amp-const" class="headerlink" title="let &amp;&amp; const"></a>let &amp;&amp; const</h2><p>let 命令也用于变量声明，但是作用域为<strong>局部</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> a =<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">var</span> b =<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在函数外部可以获取到 b，获取不到 a,因此例如<code>for</code>循环计数器就适合使用 let。</p><p>const 用于声明一个常量，设定后<strong>值不会再改变</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> PI =<span class="number">3.1415</span>;</span><br><span class="line">PI  <span class="comment">//3.1415</span></span><br><span class="line">PI=<span class="number">3</span>;  <span class="comment">//TypeError: Assignment to constant variable.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="iterable-类型"><a href="#iterable-类型" class="headerlink" title="iterable 类型"></a>iterable 类型</h2><p>为了统一集合类型，ES6 标准引入了新的<code>iterable</code>类型，Array、Map 和 Set 都属于<code>iterable</code>类型，具有<br><code>iterable</code>类型的集合可以通过新的 <code> for ...of</code> 循环来遍历</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> a=[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> s=<span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>]);</span><br><span class="line"><span class="keyword">var</span> m=<span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="number">1</span>,<span class="string">&#x27;x&#x27;</span>],[<span class="number">2</span>,<span class="string">&#x27;y&#x27;</span>],[<span class="number">3</span>,<span class="string">&#x27;z&#x27;</span>]]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">of</span> a)&#123;   <span class="comment">//遍历Array</span></span><br><span class="line">    alert(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">of</span> s)&#123;  <span class="comment">//遍历Set</span></span><br><span class="line">    alert(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">of</span> m)&#123;  <span class="comment">//遍历Map</span></span><br><span class="line">    alert(x[<span class="number">0</span>]+<span class="string">&#x27;=&#x27;</span>+x[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Map 相关操作如下，Set 同理：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>(); <span class="comment">// 空Map</span></span><br><span class="line">m.set(<span class="string">&#x27;Adam&#x27;</span>, <span class="number">67</span>); <span class="comment">// 添加新的key-value</span></span><br><span class="line">m.set(<span class="string">&#x27;Bob&#x27;</span>, <span class="number">59</span>);</span><br><span class="line">m.has(<span class="string">&#x27;Adam&#x27;</span>); <span class="comment">// 是否存在key &#x27;Adam&#x27;: true</span></span><br><span class="line">m.get(<span class="string">&#x27;Adam&#x27;</span>); <span class="comment">// 67</span></span><br><span class="line">m.delete(<span class="string">&#x27;Adam&#x27;</span>); <span class="comment">// 删除key &#x27;Adam&#x27;</span></span><br><span class="line">m.get(<span class="string">&#x27;Adam&#x27;</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构。</p><p>例如数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> [a,b,c]=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">等同于</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> c=<span class="number">3</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>对象的解构赋值：获取对象的多个属性并且使用一条语句将它们赋给多个变量</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123;</span><br><span class="line">  StyleSheet,</span><br><span class="line">  Text,</span><br><span class="line">  View</span><br><span class="line">&#125; = React;</span><br><span class="line"></span><br><span class="line">等同于</span><br><span class="line"><span class="keyword">var</span> StyleSheet = React.StyleSheet;</span><br><span class="line"><span class="keyword">var</span> Text = React.Text;</span><br><span class="line"><span class="keyword">var</span> View = React.Text;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="gt-函数-箭头函数"><a href="#gt-函数-箭头函数" class="headerlink" title="=&gt;函数(箭头函数)"></a>=&gt;函数(箭头函数)</h2><p><code>var sum =(num1,num2)=&gt;&#123;return num1+num2;&#125;</code></p><p>等同于</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum =<span class="function"><span class="keyword">function</span>(<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1+num2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>箭头函数还修复了 this 的指向，使其永远指向词法作用域：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="keyword">var</span> obj = &#123;</span><br><span class="line">   birth: <span class="number">1999</span>,</span><br><span class="line">   getAge: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> b = <span class="built_in">this</span>.birth</span><br><span class="line">     <span class="keyword">var</span> fn = <span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear() - <span class="built_in">this</span>.birth <span class="comment">//this指向obj对象</span></span><br><span class="line">     <span class="keyword">return</span> fn()</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="built_in">console</span>.log( obj.getAge()) <span class="comment">//21</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="…操作符"><a href="#…操作符" class="headerlink" title="…操作符"></a>…操作符</h2><p>这个的引入几乎不会用到 extend 这个函数来。通过它可以将数组作为参数直接传入函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> people = [<span class="string">&#x27;jack&#x27;</span>, <span class="string">&#x27;Mary&#x27;</span>, <span class="string">&#x27;Candy&#x27;</span>]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params">...people</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Hello <span class="subst">$&#123;people&#125;</span>!`</span>)</span><br><span class="line">&#125;</span><br><span class="line">sayHello(people) <span class="comment">// Hello jack,Mary,Candy!</span></span><br></pre></td></tr></table></figure><p>在函数定义时可以通过…rest 获取定义 参数外 的所有参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, b, ...rest</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;a=&#x27;</span> + a)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;b=&#x27;</span> + b)</span><br><span class="line">  <span class="built_in">console</span>.log(rest)</span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment">//  a=1</span></span><br><span class="line"><span class="comment">//  b=2</span></span><br><span class="line"><span class="comment">//  (3) [3, 4, 5]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>ES6 提供了更接近 传统语言的写法，引入了 Class （类） 这个概念，作为对象的模板。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义类</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line">    <span class="built_in">this</span>.x = x</span><br><span class="line">    <span class="built_in">this</span>.y = y</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;(&#x27;</span> + <span class="built_in">this</span>.x + <span class="string">&#x27;,&#x27;</span> + <span class="built_in">this</span>.y + <span class="string">&#x27;)&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="ES7-常用新特性"><a href="#ES7-常用新特性" class="headerlink" title="ES7 常用新特性"></a>ES7 常用新特性</h1><h2 id="Array-prototype-includes-includes"><a href="#Array-prototype-includes-includes" class="headerlink" title="Array.prototype.includes (includes)"></a>Array.prototype.includes (<strong>includes</strong>)</h2><p><code>Array.prototype.includes</code>是替代<code>indexOf</code>，开发人员用来检查数组中是否存在值，<code>indexOf</code>是一种尴尬的使用，因为它返回一个元素在数组的位置或者-1(当这样的元素不能被找到的情况下)。<br>所以它返回的是一个数字 ，而不是一个 布尔值。<br>开发人员需要实施额外的检查。在 ES6，要检查是否存在值需要做如下图所示小技巧，因为他们没有匹配到值，<code>Array.prototype.includes</code>返回-1 变成 true，但是当匹配的元素为 0 位置的时候，该数组包含元素，却变成 false。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;react&#x27;</span>, <span class="string">&#x27;angular&#x27;</span>, <span class="string">&#x27;vue&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="string">&#x27;react&#x27;</span>)) <span class="comment">// 0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或者使用一点点 hack 位运算符 ~ 使代码更加紧凑一些 ，因为 ~（位异或）对任何数字相当于 -(a+1)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;react&#x27;</span>, <span class="string">&#x27;angular&#x27;</span>, <span class="string">&#x27;vue&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(~arr.indexOf(<span class="string">&#x27;react&#x27;</span>)) <span class="comment">// -1      -(0+1)=-1</span></span><br></pre></td></tr></table></figure><p>在 ES7 中使用 includes 代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;react&#x27;</span>, <span class="string">&#x27;angular&#x27;</span>, <span class="string">&#x27;vue&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="string">&#x27;react&#x27;</span>)) <span class="comment">//  true</span></span><br></pre></td></tr></table></figure><p>还能在字符串中使用 includes：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> str =<span class="string">&#x27;React Quickly&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(str.toLowerCase().includes(<span class="string">&#x27;react&#x27;</span>))&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Found &quot;react&quot;&#x27;</span>)  <span class="comment">// Found &quot;react&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>includes 也可以在 NAN（非数字） 使用。<br>最后 includes 第二可选参数 fromIndex，这对于优化 是有好处的 ，因为 它允许从特定位置开始寻找匹配。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>)) <span class="comment">// === true)</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">4</span>)) <span class="comment">// === false)</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, <span class="number">2</span>, <span class="literal">NaN</span>].includes(<span class="literal">NaN</span>)) <span class="comment">// === true)</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, <span class="number">2</span>, <span class="number">-0</span>].includes(+<span class="number">0</span>)) <span class="comment">// === true)</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, <span class="number">2</span>, +<span class="number">0</span>].includes(<span class="number">-0</span>)) <span class="comment">// === true)</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>].includes(<span class="string">&#x27;a&#x27;</span>)) <span class="comment">// === true)</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>].includes(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>)) <span class="comment">// === false)</span></span><br></pre></td></tr></table></figure><p><code>includes</code> 在一个数组或者列表中检查是否存在一个值。</p><h2 id="Exponentiation-Operator-求幂运算"><a href="#Exponentiation-Operator-求幂运算" class="headerlink" title="Exponentiation Operator(求幂运算)"></a>Exponentiation Operator(求幂运算)</h2><p>求幂运算大多数是做些数学计算，对于 3D,VR ,SVG 还有数据可视化非常有用。</p><p>在 ES6/2015ES，你能使用 Math.pow 创建一个短的递归箭头函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">calculateExponent = <span class="function">(<span class="params">base, exponent</span>) =&gt;</span></span><br><span class="line">  base * (--exponent &gt; <span class="number">1</span> ? calculateExponent(base, exponent) : base)</span><br><span class="line"><span class="built_in">console</span>.log(calculateExponent(<span class="number">7</span>, <span class="number">12</span>) === <span class="built_in">Math</span>.pow(<span class="number">7</span>, <span class="number">12</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(calculateExponent(<span class="number">2</span>, <span class="number">7</span>) === <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">7</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>在 ES7/ES2016 ，以数学向导 的开发者 可以使用更短的语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">7</span> ** <span class="number">12</span></span><br><span class="line"><span class="built_in">console</span>.log(a == <span class="built_in">Math</span>.pow(<span class="number">7</span>, <span class="number">12</span>)) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>还可以这样子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">7</span></span><br><span class="line">a **= <span class="number">12</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span></span><br><span class="line">b **= <span class="number">7</span></span><br><span class="line"><span class="built_in">console</span>.log(a === <span class="built_in">Math</span>.pow(<span class="number">7</span>, <span class="number">12</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(b === <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">7</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h1 id="ES8-常用新特性"><a href="#ES8-常用新特性" class="headerlink" title="ES8 常用新特性"></a>ES8 常用新特性</h1><h2 id="Object-values-Object-entries"><a href="#Object-values-Object-entries" class="headerlink" title="Object.values/Object.entries"></a>Object.values/Object.entries</h2><p>Object.values 和 Object.entries 是在 ES2017 规格中，它与 Object.keys 类似，返回数组类型，其序号和 Object.key 序号对应。类似 Python 中的 dict.iteritems()</p><p>Object.values 和 Object.entries 和 Object.keys 各自项返回是数组，相对应包括 key,value 或者可美剧对象 property/attribute</p><p>在 ES8/ES2017 之前，JavaScript 开发者迭代一个对象的自身属性时候不得不使用 Object.keys，通过迭代且使用 obj[key]获取 value 返回一个数组，很挫的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;</span><br><span class="line">    <span class="built_in">Object</span>.keys(obj).forEach(<span class="function">(<span class="params">key,index</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(key,obj[key]);</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// a 1</span></span><br><span class="line">    <span class="comment">// b 2</span></span><br><span class="line">    <span class="comment">// c 3</span></span><br></pre></td></tr></table></figure><p>而使用ES6/ES2015 中for/of稍微好点：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(obj))&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(key,obj[key]);</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>Object.values 返回对象自身可以迭代属性值（values)为数组类型。我们最好Array.prototype.forEach迭代它，结合ES6的箭头函数隐形返回值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;</span><br><span class="line"><span class="built_in">Object</span>.values(obj).forEach(<span class="function">(<span class="params">value</span>) =&gt;</span> <span class="built_in">console</span>.log(value)) <span class="comment">// 1, 2, 3</span></span><br></pre></td></tr></table></figure><p>使用for/of</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> <span class="built_in">Object</span>.values(obj)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1, 2, 3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Object.entries</code>，在另一方面，将会返回对象自身可迭代属性key-value对数组（作为一个数组），他们（key-value）分别以数组存放数组中:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>&#125;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(<span class="built_in">Object</span>.entries(obj)));  </span><br><span class="line">  <span class="comment">// &quot;[[&quot;a&quot;,1],[&quot;b&quot;,2],[&quot;c&quot;,3]]&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以使用ES6/ES2015解构，从这嵌套数组中分别声明key和value</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;</span><br><span class="line">   <span class="built_in">Object</span>.entries(obj).forEach(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span> is <span class="subst">$&#123;value&#125;</span>`</span>)</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// a is 1</span></span><br><span class="line"><span class="comment">// b is 2</span></span><br><span class="line"><span class="comment">// c is 3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同样使用ES6 for/of（毕竟全部都是数组）遍历Object.entries返回来的结果值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(obj)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span> is <span class="subst">$&#123;value&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// a is 1, b is 2, c is 3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="String-padding-字符串填充"><a href="#String-padding-字符串填充" class="headerlink" title="String padding(字符串填充)"></a>String padding(字符串填充)</h2><p>String.prototype.padStart 和 String.prototype.padEnd在javascript字符操作是一个不错的体验，帮助避免依赖而外的库。<br>padStart()在开始部位填充，返回一个给出长度的字符串，填充物给定字符串，把字符串填充到期望的长度。从字符串的左边开始（至少大部分西方语言），一个经典例子是使用空格创建列：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;react&#x27;</span>.padStart(<span class="number">10</span>))</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;backbone&#x27;</span>.padStart(<span class="number">10</span>))</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;0.00&#x27;</span>.padStart(<span class="number">20</span>))</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;10,000.00&#x27;</span>.padStart(<span class="number">20</span>))</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;250,000.00&#x27;</span>.padStart(<span class="number">20</span>))</span><br><span class="line"><span class="comment">//     react</span></span><br><span class="line"><span class="comment">//   backbone</span></span><br><span class="line"><span class="comment">//                 0.00</span></span><br><span class="line"><span class="comment">//            10,000.00</span></span><br><span class="line"><span class="comment">//           250,000.00</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第二个参数，让我们放一些其他的填充字符替代空字符串，一个字符串填充</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;react&#x27;</span>.padStart(<span class="number">10</span>,<span class="string">&#x27;#&#x27;</span>))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;backbone&#x27;</span>.padStart(<span class="number">10</span>,<span class="string">&#x27;#&#x27;</span>))</span><br><span class="line"><span class="comment">// #####react</span></span><br><span class="line"><span class="comment">// ##backbone</span></span><br></pre></td></tr></table></figure><h2 id="Object-getOwnPropertyDescriptors"><a href="#Object-getOwnPropertyDescriptors" class="headerlink" title="Object.getOwnPropertyDescriptors"></a>Object.getOwnPropertyDescriptors</h2><h2 id="函数参数列表和调用中的尾逗号（Trailing-commas）"><a href="#函数参数列表和调用中的尾逗号（Trailing-commas）" class="headerlink" title="函数参数列表和调用中的尾逗号（Trailing commas）"></a>函数参数列表和调用中的尾逗号（Trailing commas）</h2><h2 id="异步函数（Async-Functions）"><a href="#异步函数（Async-Functions）" class="headerlink" title="异步函数（Async Functions）"></a>异步函数（Async Functions）</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ES6-常用新特性&quot;&gt;&lt;a href=&quot;#ES6-常用新特性&quot; class=&quot;headerlink&quot; title=&quot;ES6 常用新特性&quot;&gt;&lt;/a&gt;ES6 常用新特性&lt;/h1&gt;&lt;h2 id=&quot;let-amp-amp-const&quot;&gt;&lt;a href=&quot;#let-amp-</summary>
      
    
    
    
    <category term="笔记" scheme="https://hard-workingrookie.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="ES6" scheme="https://hard-workingrookie.github.io/tags/ES6/"/>
    
    <category term="javaScript" scheme="https://hard-workingrookie.github.io/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>Vuex学习笔记</title>
    <link href="https://hard-workingrookie.github.io/2020/09/04/vuex%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://hard-workingrookie.github.io/2020/09/04/vuex%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-09-04T06:41:39.000Z</published>
    <updated>2020-12-24T06:20:21.607Z</updated>
    
    <content type="html"><![CDATA[<p>项目地址在 <a href="https://github.com/Hard-workingrookie/todoList_vuex">https://github.com/Hard-workingrookie/todoList_vuex</a></p><h1 id="组件之间共享数据的方式"><a href="#组件之间共享数据的方式" class="headerlink" title="组件之间共享数据的方式"></a>组件之间共享数据的方式</h1><p><strong>父向子传值</strong>： v-bind 属性绑定<br><strong>子向父传值</strong>： v-on 属性绑定<br><strong>兄弟组件之间共享数据</strong> ：EventBus</p><ul><li>$on 接收数据的那个组件</li><li>$emit 发送数据的那个组件</li></ul><h1 id="Vuex-是什么"><a href="#Vuex-是什么" class="headerlink" title="Vuex 是什么"></a>Vuex 是什么</h1><p><code>Vuex</code>是实现正在组件全局<strong>状态</strong>（数据）管理的一种机制，可以方便的实现组件之间的数据共享。</p><h1 id="Vuex-的基本使用"><a href="#Vuex-的基本使用" class="headerlink" title="Vuex 的基本使用"></a>Vuex 的基本使用</h1><h2 id="安装-Vuex-依赖包"><a href="#安装-Vuex-依赖包" class="headerlink" title="安装 Vuex 依赖包"></a>安装 Vuex 依赖包</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vuex --save</span><br></pre></td></tr></table></figure><h2 id="导入-Vuex-包"><a href="#导入-Vuex-包" class="headerlink" title="导入 Vuex 包"></a>导入 Vuex 包</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line">Vue.use(Vuex)</span><br></pre></td></tr></table></figure><h2 id="创建-store-对象"><a href="#创建-store-对象" class="headerlink" title="创建 store 对象"></a>创建 store 对象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store =<span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state:&#123;count：<span class="number">0</span>&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="将-store-对象挂载到-vue-实例中"><a href="#将-store-对象挂载到-vue-实例中" class="headerlink" title="将 store 对象挂载到 vue 实例中"></a>将 store 对象挂载到 vue 实例中</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    render:<span class="function"><span class="params">h</span>=&gt;</span>h(app),</span><br><span class="line">    router,</span><br><span class="line">    store</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="使用-Mutation-变更-store-中的数据"><a href="#使用-Mutation-变更-store-中的数据" class="headerlink" title="使用 Mutation 变更 store 中的数据"></a>使用 Mutation 变更 store 中的数据</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mutations: &#123;</span><br><span class="line">  add (state) &#123;</span><br><span class="line">    state.count++</span><br><span class="line">  &#125;,</span><br><span class="line">  sub (state) &#123;</span><br><span class="line">    <span class="keyword">if</span> (state.count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      state.count--</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>在页面使用</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">addCount () &#123;</span><br><span class="line">     <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;add&#x27;</span>)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">subCount () &#123;</span><br><span class="line">     <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;sub&#x27;</span>)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="mutations-带参传送"><a href="#mutations-带参传送" class="headerlink" title="mutations 带参传送"></a>mutations 带参传送</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> addN (state, step) &#123;</span><br><span class="line">      state.count += step</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">addCount () &#123;</span><br><span class="line"><span class="built_in">this</span>.$store.commit(<span class="string">&#x27;addN&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Mutation-触发"><a href="#Mutation-触发" class="headerlink" title="Mutation 触发"></a>Mutation 触发</h1><p><code>this.$store.commit() </code>是触发 mutation 第一种方式</p><p><strong>第二种：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapMutations &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...mapMutations([<span class="string">&#x27;add&#x27;</span>])</span><br></pre></td></tr></table></figure><p><strong>带参：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">   ...mapMutations([<span class="string">&#x27;add&#x27;</span>, <span class="string">&#x27;addN&#x27;</span>]),</span><br><span class="line">   addCount () &#123;</span><br><span class="line">     <span class="built_in">this</span>.addN(<span class="number">3</span>)</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>不要在 mutations 中执行异步操作。action 用于执行异步操作</strong></p><h1 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h1><p>action 用于执行异步操作</p><h2 id="触发-action"><a href="#触发-action" class="headerlink" title="触发 action"></a>触发 action</h2><h3 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h3><h4 id="不带参"><a href="#不带参" class="headerlink" title="不带参"></a>不带参</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">    addAsync (context) &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        context.commit(<span class="string">&#x27;add&#x27;</span>)</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$store.dispath(<span class="string">&#x27;addAsync&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="带参"><a href="#带参" class="headerlink" title="带参"></a>带参</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">    addAsync (context,step) &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        context.commit(<span class="string">&#x27;addN&#x27;</span>,step)</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$store.dispath(<span class="string">&#x27;addAsync&#x27;</span>,<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h3 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h3><p>1.导入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; mapAction &#125; from &#39;vuex&#39;</span><br></pre></td></tr></table></figure><p>2.映射到当前组件的 methods 函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">  ...mapAction([<span class="string">&#x27;addAsync&#x27;</span>,<span class="string">&#x27;addNAsync&#x27;</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h1><p>Getter 用于对 store 中的数据进行加工处理形成新的数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store=<span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state:&#123;</span><br><span class="line">    count:<span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  getters:&#123;</span><br><span class="line">    showNum:<span class="function"><span class="params">state</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;当前最新的数量是【&#x27;</span>+state.count+<span class="string">&#x27;】&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="使用-Getter-的第一种方式"><a href="#使用-Getter-的第一种方式" class="headerlink" title="使用 Getter 的第一种方式"></a>使用 Getter 的第一种方式</h2><p><code>this.$store.getters.名称</code></p><h2 id="使用-Getter-的第二种方式"><a href="#使用-Getter-的第二种方式" class="headerlink" title="使用 Getter 的第二种方式"></a>使用 Getter 的第二种方式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  ...mapGetters([<span class="string">&#x27;showNum&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;&#123;&#123;showNum&#125;&#125;&lt;/h1&gt;</span><br></pre></td></tr></table></figure><h1 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h1><p>Vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  state: <span class="function">() =&gt;</span> (&#123; ... &#125;),</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;,</span><br><span class="line">  getters: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> moduleB = &#123;</span><br><span class="line">  state: <span class="function">() =&gt;</span> (&#123; ... &#125;),</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    a: moduleA,</span><br><span class="line">    b: moduleB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.state.a <span class="comment">// -&gt; moduleA 的状态</span></span><br><span class="line">store.state.b <span class="comment">// -&gt; moduleB 的状态</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="模块的局部状态"><a href="#模块的局部状态" class="headerlink" title="模块的局部状态"></a>模块的局部状态</h2><p>对于模块内部的 mutation 和 getter，接收的第一个参数是模块的局部状态对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  state: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;),</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      <span class="comment">// 这里的 `state` 对象是模块的局部状态</span></span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  getters: &#123;</span><br><span class="line">    doubleCount (state) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.count * <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于模块内部的 action，局部状态通过 context.state 暴露出来，根节点状态则为 context.rootState</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  actions: &#123;</span><br><span class="line">    incrementIfOddOnRootSum (&#123; state, commit, rootState &#125;) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((state.count + rootState.count) % <span class="number">2</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        commit(<span class="string">&#x27;increment&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于模块内部的 getter，根节点状态会作为第三个参数暴露出来：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  getters: &#123;</span><br><span class="line">    sumWithRootCount (state, getters, rootState) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.count + rootState.count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在带命名空间的模块内访问全局内容"><a href="#在带命名空间的模块内访问全局内容" class="headerlink" title="在带命名空间的模块内访问全局内容"></a>在带命名空间的模块内访问全局内容</h2><p>如果你希望使用全局 state 和 getter，rootState 和 rootGetters 会作为第三和第四参数传入 getter，也会通过 context 对象的属性传入 action。</p><p>若需要在全局命名空间内分发 action 或提交 mutation，将 { root: true } 作为第三参数传给 dispatch 或 commit 即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">modules: &#123;</span><br><span class="line">  foo: &#123;</span><br><span class="line">    namespaced: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    getters: &#123;</span><br><span class="line">      <span class="comment">// 在这个模块的 getter 中，`getters` 被局部化了</span></span><br><span class="line">      <span class="comment">// 你可以使用 getter 的第四个参数来调用 `rootGetters`</span></span><br><span class="line">      someGetter (state, getters, rootState, rootGetters) &#123;</span><br><span class="line">        getters.someOtherGetter <span class="comment">// -&gt; &#x27;foo/someOtherGetter&#x27;</span></span><br><span class="line">        rootGetters.someOtherGetter <span class="comment">// -&gt; &#x27;someOtherGetter&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      someOtherGetter: <span class="function"><span class="params">state</span> =&gt;</span> &#123; ... &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    actions: &#123;</span><br><span class="line">      <span class="comment">// 在这个模块中， dispatch 和 commit 也被局部化了</span></span><br><span class="line">      <span class="comment">// 他们可以接受 `root` 属性以访问根 dispatch 或 commit</span></span><br><span class="line">      someAction (&#123; dispatch, commit, getters, rootGetters &#125;) &#123;</span><br><span class="line">        getters.someGetter <span class="comment">// -&gt; &#x27;foo/someGetter&#x27;</span></span><br><span class="line">        rootGetters.someGetter <span class="comment">// -&gt; &#x27;someGetter&#x27;</span></span><br><span class="line"></span><br><span class="line">        dispatch(<span class="string">&#x27;someOtherAction&#x27;</span>) <span class="comment">// -&gt; &#x27;foo/someOtherAction&#x27;</span></span><br><span class="line">        dispatch(<span class="string">&#x27;someOtherAction&#x27;</span>, <span class="literal">null</span>, &#123; <span class="attr">root</span>: <span class="literal">true</span> &#125;) <span class="comment">// -&gt; &#x27;someOtherAction&#x27;</span></span><br><span class="line"></span><br><span class="line">        commit(<span class="string">&#x27;someMutation&#x27;</span>) <span class="comment">// -&gt; &#x27;foo/someMutation&#x27;</span></span><br><span class="line">        commit(<span class="string">&#x27;someMutation&#x27;</span>, <span class="literal">null</span>, &#123; <span class="attr">root</span>: <span class="literal">true</span> &#125;) <span class="comment">// -&gt; &#x27;someMutation&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      someOtherAction (ctx, payload) &#123; ... &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="在带命名空间的模块注册全局-action"><a href="#在带命名空间的模块注册全局-action" class="headerlink" title="在带命名空间的模块注册全局 action"></a>在带命名空间的模块注册全局 action</h2><p>若需要在带命名空间的模块注册全局 action，你可添加 root: true，并将这个 action 的定义放在函数 handler 中。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  actions: &#123;</span><br><span class="line">    someOtherAction (&#123;dispatch&#125;) &#123;</span><br><span class="line">      dispatch(<span class="string">&#x27;someAction&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  modules: &#123;</span><br><span class="line">    foo: &#123;</span><br><span class="line">      namespaced: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">      actions: &#123;</span><br><span class="line">        someAction: &#123;</span><br><span class="line">          root: <span class="literal">true</span>,</span><br><span class="line">          handler (namespacedContext, payload) &#123; ... &#125; <span class="comment">// -&gt; &#x27;someAction&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="模块动态注册"><a href="#模块动态注册" class="headerlink" title="模块动态注册"></a>模块动态注册</h2><p>在 store 创建之后，你可以使用 store.registerModule 方法注册模块：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123; <span class="comment">/* 选项 */</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册模块 `myModule`</span></span><br><span class="line">store.registerModule(<span class="string">&#x27;myModule&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 注册嵌套模块 `nested/myModule`</span></span><br><span class="line">store.registerModule([<span class="string">&#x27;nested&#x27;</span>, <span class="string">&#x27;myModule&#x27;</span>], &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>之后就可以通过 <code>store.state.myModule </code>和 <code>store.state.nested.myModule</code> 访问模块的状态。</p><p>模块动态注册功能使得其他 Vue 插件可以通过在 store 中附加新模块的方式来使用 Vuex 管理状态。例如，vuex-router-sync 插件就是通过动态注册模块将 vue-router 和 vuex 结合在一起，实现应用的路由状态管理。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;项目地址在 &lt;a href=&quot;https://github.com/Hard-workingrookie/todoList_vuex&quot;&gt;https://github.com/Hard-workingrookie/todoList_vuex&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;组</summary>
      
    
    
    
    <category term="Vue学习" scheme="https://hard-workingrookie.github.io/categories/Vue%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Vue" scheme="https://hard-workingrookie.github.io/tags/Vue/"/>
    
    <category term="Vuex" scheme="https://hard-workingrookie.github.io/tags/Vuex/"/>
    
  </entry>
  
  <entry>
    <title>next.js入门</title>
    <link href="https://hard-workingrookie.github.io/2020/08/27/next-js%E5%85%A5%E9%97%A8/"/>
    <id>https://hard-workingrookie.github.io/2020/08/27/next-js%E5%85%A5%E9%97%A8/</id>
    <published>2020-08-27T12:02:21.000Z</published>
    <updated>2020-12-24T06:20:21.606Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Next-js简介"><a href="#Next-js简介" class="headerlink" title="Next.js简介"></a>Next.js简介</h1><div class="note default"><p>Next.js 是一个轻量级的 React 服务端渲染应用框架。</p></div><p>目前Next.js是React服务端渲染的最佳解决方案，所以如果想使用React来开发需要SEO的应用，基本上就要使用Next.js。</p><h1 id="创建next-js项目"><a href="#创建next-js项目" class="headerlink" title="创建next.js项目"></a>创建next.js项目</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g create-next-app</span><br></pre></td></tr></table></figure><p>目前可以支持三种方式的创建，分别是用npx,yarn和create-next-app命令来进行安装，安装的结构都是完全一样的，以npx为例。</p><div class="note default"><p>npx 是Node自带的npm模块，所以你只要安装了Node都是可以直接使用npx命令的。</p></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-next-app next-create</span><br></pre></td></tr></table></figure><p>安装完成之后进入项目目录</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn dev</span><br></pre></td></tr></table></figure><p>在浏览器中输入<code>http://localhost:3000/</code>看运行效果。</p><h1 id="Next-js的Page和Component的使用"><a href="#Next-js的Page和Component的使用" class="headerlink" title="Next.js的Page和Component的使用"></a>Next.js的Page和Component的使用</h1><h2 id="新建页面和访问路径"><a href="#新建页面和访问路径" class="headerlink" title="新建页面和访问路径"></a>新建页面和访问路径</h2><p>直接在根目录下的pages文件夹下，新建一个litterWang.js页面。然后写入下面的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">litterWang</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>litterWang<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>  litterWang;</span><br></pre></td></tr></table></figure><p>只要写完上面的代码，Next框架就自动作好了路由，这个也算是Next的一个重要优点，给我们节省了大量的时间。</p><p>现在要作一个更深的页面，比如把有关博客的界面都放在这样的路径下<a href="http://localhost:3000/blog/nextBlog,%E5%85%B6%E5%AE%9E%E5%8F%AA%E8%A6%81%E5%9C%A8pages%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E5%86%8D%E5%BB%BA%E7%AB%8B%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9blog%EF%BC%8C%E7%84%B6%E5%90%8E%E8%BF%9B%E5%85%A5blog%E6%96%87%E4%BB%B6%E5%A4%B9%EF%BC%8C%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AAnextBlog.js%E6%96%87%E4%BB%B6%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%AE%9E%E7%8E%B0%E4%BA%86%E3%80%82">http://localhost:3000/blog/nextBlog,其实只要在pages文件夹下再建立一个新的文件夹blog，然后进入blog文件夹，新建一个nextBlog.js文件，就可以实现了。</a></p><p>nextBlog.js文件内容,我们这里就用最简单的写法了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ()=&gt;<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>nextBlog page<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>写完后，就可以直接在浏览器中访问了，是不是发现Next框架真的减轻了我们大量的工作。</p><h2 id="Component组件的制作"><a href="#Component组件的制作" class="headerlink" title="Component组件的制作"></a>Component组件的制作</h2><p>制作组件也同样方便，比如要建立一个litterWang组件，直接在components目录下建立一个文件litterWang.js,然后写入下面代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123;children&#125;)=&gt;<span class="xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>组件写完后需要先引入，比如我们在Index页面里进行引入：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> litterWang <span class="keyword">from</span> <span class="string">&#x27;../components/litterWang&#x27;</span></span><br></pre></td></tr></table></figure><p>使用就非常简单了，直接写入标签就可以。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;litterWang&gt;按钮&lt;/litterWang&gt;</span><br></pre></td></tr></table></figure><h1 id="路由-基础和基本跳转"><a href="#路由-基础和基本跳转" class="headerlink" title="路由-基础和基本跳转"></a>路由-基础和基本跳转</h1><p>学会编写组件和页面后，下一步应该了解的就是路由体系，每个框架都有着不同的路由体系，这节先学习最基础的页面如何跳转。页面跳转一般有两种形式，第一种是利用标签<code>&lt;Link&gt;</code>,第二种是用js编程的方式进行跳转，也就是利用<code>Router</code>组件。先来看一下标签的形式如何跳转。</p><h2 id="标签式导航"><a href="#标签式导航" class="headerlink" title="标签式导航"></a>标签式导航<Link></h2><p>在编写代码之前，先删除index.js中的代码，保证代码的最小化。使用标签式导航需要先进行引入，代码如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">&#x27;next/link&#x27;</span></span><br></pre></td></tr></table></figure><p>然后新建两个页面litterWangA.js和litterWangB.js，新建后写个最简单的页面，能标识出来A、B两个页面就好。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//litterWangA.js</span></span><br><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">&#x27;next/link&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ()=&gt;(</span><br><span class="line">    &lt;&gt;</span><br><span class="line">        &lt;div&gt;litterWang-A page .  &lt;/div&gt;</span><br><span class="line">        &lt;Link href=<span class="string">&quot;/&quot;</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span>&gt;</span>返回首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;/Link&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>写完A页面后，可以直接复制A页面的内容，然后修改一下就是B页面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//litterWangB.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">&#x27;next/link&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ()=&gt;(</span><br><span class="line">    &lt;&gt;</span><br><span class="line">        &lt;div&gt;litterWang-B page .  &lt;/div&gt;</span><br><span class="line">        &lt;Link href=<span class="string">&quot;/&quot;</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span>&gt;</span>返回首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;/Link&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>有了两个页面后，可以编写首页的代码，实现跳转了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">&#x27;next/link&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Home = <span class="function">() =&gt;</span> (</span><br><span class="line">  &lt;&gt;</span><br><span class="line">    &lt;div&gt;我是首页&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">href</span>=<span class="string">&quot;/litterWangA&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>去litterWangA页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span>&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">href</span>=<span class="string">&quot;/litterWangB&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>去litterWangB页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span>&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Home</span><br></pre></td></tr></table></figure><p>用<code>&lt;Link&gt;</code>标签进行跳转是非常容易的，但是又一个小坑需要注意一下，就是他不支持兄弟标签并列的情况。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div&gt;</span><br><span class="line">  &lt;Link href=<span class="string">&quot;/litterWangA&quot;</span>&gt;</span><br><span class="line">    &lt;span&gt;去litterWangA页面&lt;/span&gt;</span><br><span class="line">    &lt;span&gt;前端博客&lt;/span&gt;</span><br><span class="line">  &lt;/Link&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>如果这样写会直接报错，报错信息如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">client pings, but there&#39;s no entry for page: &#x2F;_error</span><br><span class="line">Warning: You&#39;re using a string directly inside &lt;Link&gt;. This usage has been deprecated. Please add an &lt;a&gt; tag as child of &lt;Link&gt;</span><br></pre></td></tr></table></figure><p>但是你可以把这两个标签外边套一个父标签，就可以了，比如下面的代码就没有错误。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Link href=<span class="string">&quot;/litterWangA&quot;</span>&gt;</span><br><span class="line">  &lt;a&gt;</span><br><span class="line">    &lt;span&gt;去litterWangA页面&lt;/span&gt;</span><br><span class="line">    &lt;span&gt;前端博客&lt;/span&gt;</span><br><span class="line">  &lt;/a&gt;</span><br><span class="line">&lt;/Link&gt;</span><br></pre></td></tr></table></figure><p>通过标签跳转非常的简单，跟使用<code>&lt;a&gt;</code>标签几乎一样。那再来看看如何用编程的方式进行跳转。</p><h2 id="Router模块进行跳转"><a href="#Router模块进行跳转" class="headerlink" title="Router模块进行跳转"></a>Router模块进行跳转</h2><p>在Next框架中还可以使用Router模块进行编程式的跳转，使用前也需要我们引入Router，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&#x27;next/router&#x27;</span></span><br></pre></td></tr></table></figure><p>然后在<code>Index.js</code>页面中加入，直接使用<code>Router</code>进行跳转就可以了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">   &lt;button onClick=&#123;<span class="function">()=&gt;</span>&#123;Router.push(<span class="string">&#x27;/litterWangA&#x27;</span>)&#125;&#125;&gt;去litterWangA页面&lt;/button&gt;</span><br><span class="line"> &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>这样写只是简单，但是还是耦合性太高，跟<code>Link</code>标签没什么区别，你可以修改一下代码，把跳转放到一个方法里，然后调用方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">&#x27;next/link&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&#x27;next/router&#x27;</span></span><br><span class="line"><span class="keyword">const</span> Home = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">gotoA</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Router.push(<span class="string">&#x27;/litterWangA&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>(</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;div&gt;我是首页&lt;/div&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Link href=<span class="string">&quot;/litterWangA&quot;</span>&gt;</span><br><span class="line">          &lt;a&gt;</span><br><span class="line">            &lt;span&gt;去litterWangA页面&lt;/span&gt;</span><br><span class="line">            &lt;span&gt;前端博客&lt;/span&gt;</span><br><span class="line">          &lt;/a&gt;</span><br><span class="line">        &lt;/Link&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">href</span>=<span class="string">&quot;/litterWangB&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>去litterWangB页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span>&lt;/div&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button onClick=&#123;gotoA&#125;&gt;去litterWangA页面&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Home</span><br></pre></td></tr></table></figure><p>这样也是可以实现跳转的，而且耦合性也降低了,所以个人更喜欢这种跳转方式。Next的两种跳转方式，第一种是标签式跳转，第二种是编程式跳转。</p><h1 id="路由-跳转时用query传递和接受参数"><a href="#路由-跳转时用query传递和接受参数" class="headerlink" title="路由-跳转时用query传递和接受参数"></a>路由-跳转时用query传递和接受参数</h1><p>项目开发中一般都不是简单的静态跳转，而是需要动态跳转的。动态跳转就是跳转时需要带一个参数或几个参数过去，然后在到达的页面接受这个传递的参数，并根据参数不同显示不同的内容。比如新闻列表，然后点击一个要看的新闻就会跳转到具体内容。这些类似这样的需求都都是通过传递参数实现的。</p><h1 id="只能用query传递参数"><a href="#只能用query传递参数" class="headerlink" title="只能用query传递参数"></a>只能用query传递参数</h1><p>作一个“找小哥哥”的例子，通过这个例子来通俗易懂的讲解一下路由带参数的知识。在Next.js中只能通过通过<code>query（?id=1）</code>来传递参数，而不能通过<code>(path:id)</code>的形式传递参数。</p><p>现在我们改写一下pages文件夹下的index.js文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">&#x27;next/link&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&#x27;next/router&#x27;</span></span><br><span class="line"><span class="keyword">const</span> Home = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span>(</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;div&gt;我是首页&lt;/div&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Link href=<span class="string">&quot;/xiaogege?name=吴彦祖&quot;</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span>&gt;</span>选吴彦祖<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;<span class="regexp">/Link&gt;&lt;br/</span>&gt;</span><br><span class="line">        &lt;Link href=<span class="string">&quot;/xiaogege?name=彭于晏&quot;</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span>&gt;</span>选彭于晏<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;/Link&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Home</span><br></pre></td></tr></table></figure><p>这样编写query参数就可以进行传递过去了，接下来就是要接受参数了。</p><h2 id="接收传递过来的参数"><a href="#接收传递过来的参数" class="headerlink" title="接收传递过来的参数"></a>接收传递过来的参数</h2><p>现在还没有小哥哥对应的页面，所以我们要创建xiaogege.js页面，并写下下面的代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; withRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;next/router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">&#x27;next/link&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> xiaogege = <span class="function">(<span class="params">&#123;router&#125;</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &lt;div&gt;&#123;router.query.name&#125;,来为我们服务了 .&lt;/div&gt;</span><br><span class="line">            &lt;Link href=<span class="string">&quot;/&quot;</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span>&gt;</span>返回首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;/Link&gt;</span><br><span class="line">        &lt;/&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withRouter(xiaogege)</span><br></pre></td></tr></table></figure><p><code>withRouter</code>是Next.js框架的高级组件，用来处理路由用的。通过这种方式就获得了参数，并显示在页面上了。</p><h1 id="编程式跳转传递参数"><a href="#编程式跳转传递参数" class="headerlink" title="编程式跳转传递参数"></a>编程式跳转传递参数</h1><p>回了<code>&lt;Link&gt;</code>这种标签式跳转传递参数的形式，那编程式跳转如何传递那，其实也可以简单使用?加参数的形式，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div&gt;</span><br><span class="line">  &lt;button onClick=&#123;gotoxiaogege&#125;&gt;选吴彦祖&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="comment">// gotoxiaogege</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gotoxiaogege</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Router.push(<span class="string">&#x27;/xiaogege?name=吴彦祖&#x27;</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这种形式跳转和传递参数是完全没有问题的，但是不太优雅，所以也可以写成Object的形式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gotoxiaogege</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   Router.push(&#123;</span><br><span class="line">     pathname:<span class="string">&#x27;/xiaogege&#x27;</span>,</span><br><span class="line">     query:&#123;</span><br><span class="line">       name:<span class="string">&#x27;吴彦祖&#x27;</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>其实<code>&lt;Link&gt;</code>标签也可以写成这种形式，比如我们把第一个修改成这种形式.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Link href=&#123;&#123;<span class="attr">pathname</span>:<span class="string">&#x27;/xiaogege&#x27;</span>,<span class="attr">query</span>:&#123;<span class="attr">name</span>:<span class="string">&#x27;彭于晏&#x27;</span>&#125;&#125;&#125;&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span>&gt;</span>选彭于晏<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;<span class="regexp">/Link&gt;&lt;br/</span>&gt;</span><br></pre></td></tr></table></figure><p>在浏览器中预览一下，如果一切正常是可以顺利进行跳转，并接收到传递的值。</p><h1 id="路由-六个钩子事件的讲解"><a href="#路由-六个钩子事件的讲解" class="headerlink" title="路由-六个钩子事件的讲解"></a>路由-六个钩子事件的讲解</h1><p>路由的钩子事件，也就是当路由发生变化时，可以监听到这些变化事件，执行对应的函数。它一共有六个钩子事件，这节课就学习一下。</p><h2 id="routerChangeStart路由发生变化时"><a href="#routerChangeStart路由发生变化时" class="headerlink" title="routerChangeStart路由发生变化时"></a>routerChangeStart路由发生变化时</h2><p>在监听路由发生变化时，我们需要用Router组件，然后用on方法来进行监听,在pages文件夹下的index.js，然后写入下面的监听事件，这里我们只打印一句话，就不作其他的事情了。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> Router.events.on(<span class="string">&#x27;routeChangeStart&#x27;</span>,<span class="function">(<span class="params">...args</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;1.routeChangeStart-&gt;路由开始变化,参数为:&#x27;</span>,...args)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这个时路由发生变化时，时间第一时间被监听到，并执行了里边的方法。</p><h2 id="routerChangeComplete路由结束变化时"><a href="#routerChangeComplete路由结束变化时" class="headerlink" title="routerChangeComplete路由结束变化时"></a>routerChangeComplete路由结束变化时</h2><p>路由变化开始时可以监听到，那结束时也时可以监听到的，这时候监听的事件是routerChangeComplete。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Router.events.on(<span class="string">&#x27;routeChangeComplete&#x27;</span>,<span class="function">(<span class="params">...args</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;routeChangeComplete-&gt;路由结束变化,参数为:&#x27;</span>,...args)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="beforeHistoryChange浏览器history触发前"><a href="#beforeHistoryChange浏览器history触发前" class="headerlink" title="beforeHistoryChange浏览器history触发前"></a>beforeHistoryChange浏览器history触发前</h2><p>history就是HTML中的API，如果这个不了解可以百度了解一下，Next.js路由变化默认都是通过history进行的，所以每次都会调用。 不适用history的话，也可以通过hash</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  Router.events.on(<span class="string">&#x27;beforeHistoryChange&#x27;</span>,<span class="function">(<span class="params">...args</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;3,beforeHistoryChange-&gt;在改变浏览器 history之前触发,参数为:&#x27;</span>,...args)</span><br><span class="line">  &#125;)</span><br><span class="line">routeChangeError路由跳转发生错误时</span><br><span class="line"> Router.events.on(<span class="string">&#x27;routeChangeError&#x27;</span>,<span class="function">(<span class="params">...args</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;4,routeChangeError-&gt;跳转发生错误,参数为:&#x27;</span>,...args)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>需要注意的是404找不到路由页面不算错误，这个我们就不演示了。</p><h2 id="转变成hash路由模式"><a href="#转变成hash路由模式" class="headerlink" title="转变成hash路由模式"></a>转变成hash路由模式</h2><p>还有两种事件，都是针对hash的，所以现在要转变成hash模式。hash模式下的两个事件<code>hashChangeStart</code>和<code>hashChangeComplete</code>,就都在这里进行编写了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Router.events.on(<span class="string">&#x27;hashChangeStart&#x27;</span>,<span class="function">(<span class="params">...args</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;5,hashChangeStart-&gt;hash跳转开始时执行,参数为:&#x27;</span>,...args)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Router.events.on(<span class="string">&#x27;hashChangeComplete&#x27;</span>,<span class="function">(<span class="params">...args</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;6,hashChangeComplete-&gt;hash跳转完成时,参数为:&#x27;</span>,...args)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在下面的jsx语法部分，再增加一个链接,使用hash来进行跳转，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;Link href=<span class="string">&quot;#litterWang&quot;</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span>&gt;</span>选litterWang<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;/Link&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>为了方便你学习，我这里给出index.js的全部代码，你可以在练习时进行参考。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">&#x27;next/link&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&#x27;next/router&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Home = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">gotoxiaogege</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Router.push(&#123;</span><br><span class="line">      pathname:<span class="string">&#x27;/xiaogege&#x27;</span>,</span><br><span class="line">      query:&#123;</span><br><span class="line">        name:<span class="string">&#x27;吴彦祖&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Router.events.on(<span class="string">&#x27;routeChangeStart&#x27;</span>,<span class="function">(<span class="params">...args</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;1.routeChangeStart-&gt;路由开始变化,参数为:&#x27;</span>,...args)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  Router.events.on(<span class="string">&#x27;routeChangeComplete&#x27;</span>,<span class="function">(<span class="params">...args</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;2.routeChangeComplete-&gt;路由结束变化,参数为:&#x27;</span>,...args)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  Router.events.on(<span class="string">&#x27;beforeHistoryChange&#x27;</span>,<span class="function">(<span class="params">...args</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;3,beforeHistoryChange-&gt;在改变浏览器 history之前触发,参数为:&#x27;</span>,...args)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  Router.events.on(<span class="string">&#x27;routeChangeError&#x27;</span>,<span class="function">(<span class="params">...args</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;4,routeChangeError-&gt;跳转发生错误,参数为:&#x27;</span>,...args)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  Router.events.on(<span class="string">&#x27;hashChangeStart&#x27;</span>,<span class="function">(<span class="params">...args</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;5,hashChangeStart-&gt;hash跳转开始时执行,参数为:&#x27;</span>,...args)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  Router.events.on(<span class="string">&#x27;hashChangeComplete&#x27;</span>,<span class="function">(<span class="params">...args</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;6,hashChangeComplete-&gt;hash跳转完成时,参数为:&#x27;</span>,...args)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span>(</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;div&gt;我是首页&lt;/div&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Link href=&#123;&#123;<span class="attr">pathname</span>:<span class="string">&#x27;/xiaogege&#x27;</span>,<span class="attr">query</span>:&#123;<span class="attr">name</span>:<span class="string">&#x27;彭于晏&#x27;</span>&#125;&#125;&#125;&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span>&gt;</span>选彭于晏<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;<span class="regexp">/Link&gt;&lt;br/</span>&gt;</span><br><span class="line">        &lt;Link href=<span class="string">&quot;/xiaogege?name=吴彦祖&quot;</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span>&gt;</span>选吴彦祖<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;/Link&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button onClick=&#123;gotoxiaogege&#125;&gt;选吴彦祖&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">         &lt;Link href=<span class="string">&quot;#litterWang&quot;</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span>&gt;</span>选litterWang<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;/Link&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Home</span><br></pre></td></tr></table></figure><p>这节主要学习了路由的钩子事件，利用钩子事件是可以作很多事情的，比如转换时的加载动画，关掉页面的一些资源计数器…..。</p><h1 id="在getInitialProps中用Axios获取远端数据"><a href="#在getInitialProps中用Axios获取远端数据" class="headerlink" title="在getInitialProps中用Axios获取远端数据"></a>在getInitialProps中用Axios获取远端数据</h1><p>在Next.js框架中提供了<code>getInitialProps</code>静态方法用来获取远端数据，这个是框架的约定，所以你也只能在这个方法里获取远端数据。不要再试图在声明周期里获得，虽然也可以在<code>ComponentDidMount</code>中获得，但是用了别人的框架，就要遵守别人的约定。</p><h2 id="安装和引入Axios插件"><a href="#安装和引入Axios插件" class="headerlink" title="安装和引入Axios插件"></a>安装和引入Axios插件</h2><p>Axios是目前最或的前端获取数据的插件了，也是由大神首推的数据接口请求插件.在请求前需要先安装Axios插件。</p><p>打开终端，直接使用yarn命令进行安装。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add axios</span><br></pre></td></tr></table></figure><p>安装完成后，在需要的页面中用import引入axios，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br></pre></td></tr></table></figure><p>引入后，就可以使用getInitialProps进行获取后端接口数据了。</p><h2 id="getInitialProps中获取数据"><a href="#getInitialProps中获取数据" class="headerlink" title="getInitialProps中获取数据"></a>getInitialProps中获取数据</h2><p>在<code>xiaogege.js</code>页面中使用<code>getInitialProps</code>，因为是远程获取数据，所以我们采用异步请求的方式。数据存在了Easy Mock中，地址如下：</p><p><a href="https://www.easy-mock.com/mock/5cfcce489dc7c36bd6da2c99/xiaogege/getList">https://www.easy-mock.com/mock/5cfcce489dc7c36bd6da2c99/xiaogege/getList</a><br>(你可以自己作一个数据源，因为这个可能也不稳定，不过半年内应该是可以的)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">xiaogege.getInitialProps = <span class="keyword">async</span> ()=&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> promise =<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>)=&gt;</span>&#123;</span><br><span class="line">            axios(<span class="string">&#x27;https://www.easy-mock.com/mock/5cfcce489dc7c36bd6da2c99/xiaogege/getList&#x27;</span>).then(</span><br><span class="line">                (res)=&gt;&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&#x27;远程数据结果：&#x27;</span>,res)</span><br><span class="line">                    resolve(res.data.data)</span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> promise</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获得数据后，我们需要把得到的数据传递给页面组件，用{}显示出来就可以了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xiaogege = <span class="function">(<span class="params">&#123;router,list&#125;</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &lt;div&gt;&#123;router.query.name&#125;,来为我们服务了 .&lt;br/&gt;&#123;list&#125;&lt;/div&gt;</span><br><span class="line">            &lt;Link href=<span class="string">&quot;/&quot;</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span>&gt;</span>返回首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;/Link&gt;</span><br><span class="line">        &lt;/&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就利用Axios从远端获取了数据，xiaogege.js的所有代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import &#123; withRouter&#125; from &#39;next&#x2F;router&#39;</span><br><span class="line">import Link from &#39;next&#x2F;link&#39;</span><br><span class="line">import axios from &#39;axios&#39;</span><br><span class="line"></span><br><span class="line">const xiaogege &#x3D; (&#123;router,list&#125;)&#x3D;&gt;&#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &lt;div&gt;&#123;router.query.name&#125;,来为我们服务了 .&lt;br&#x2F;&gt;&#123;list&#125;&lt;&#x2F;div&gt;</span><br><span class="line">            &lt;Link href&#x3D;&quot;&#x2F;&quot;&gt;&lt;a&gt;返回首页&lt;&#x2F;a&gt;&lt;&#x2F;Link&gt;</span><br><span class="line">        &lt;&#x2F;&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">xiaogege.getInitialProps &#x3D; async ()&#x3D;&gt;&#123;</span><br><span class="line">    const promise &#x3D;new Promise((resolve)&#x3D;&gt;&#123;</span><br><span class="line">            axios(&#39;https:&#x2F;&#x2F;www.easy-mock.com&#x2F;mock&#x2F;5cfcce489dc7c36bd6da2c99&#x2F;xiaogege&#x2F;getList&#39;).then(</span><br><span class="line">                (res)&#x3D;&gt;&#123;</span><br><span class="line">                    console.log(&#39;远程数据结果：&#39;,res)</span><br><span class="line">                    resolve(res.data.data)</span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line">    &#125;)</span><br><span class="line">    return await promise</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default withRouter(xiaogege)</span><br></pre></td></tr></table></figure><p>这节课主要学习了在Next.js框架下在getInitialProps方法中利用Axios来获取远端数据的的操作，这个在实际项目中是必备技能，所以需要多练习几遍。</p><h1 id="使用Style-JSX编写页面的CSS样式"><a href="#使用Style-JSX编写页面的CSS样式" class="headerlink" title="使用Style JSX编写页面的CSS样式"></a>使用Style JSX编写页面的CSS样式</h1><p>在Next.js中引入一个CSS样式是不可以用的，如果想用，需要作额外的配置。因为框架为我们提供了一个style jsx特性，也就是把CSS用JSX的语法写出来。如果你以前学过Vue，那这种写法你是非常熟悉的。</p><h2 id="初识Style-JSX语法-把字体设成蓝色"><a href="#初识Style-JSX语法-把字体设成蓝色" class="headerlink" title="初识Style JSX语法 把字体设成蓝色"></a>初识Style JSX语法 把字体设成蓝色</h2><p>在pages文件夹下，新建一个litterWang.js文件。然后写入下面的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//litterWang.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">litterWang</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &lt;div&gt;litterWang免费前端教程&lt;/div&gt;</span><br><span class="line">        &lt;/&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> litterWang</span><br></pre></td></tr></table></figure><p>这个是一个最简单的页面，只在层中写了一句话。这时候我们想把页面中字的颜色变成蓝色，就可以使用Style JSX语法。直接在&lt;&gt;&lt;/&gt;之间写下如下的代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style jsx&gt;</span><br><span class="line">    &#123;&#96;</span><br><span class="line">        div&#123;color:blue;&#125;</span><br><span class="line">    &#96;&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>主要所有的css样式需要用{}进行包裹，否则就会报错。这时候你打开浏览器进行预览，字体的颜色就变成了蓝色。</p><h2 id="自动加随机类名-不会污染全局CSS"><a href="#自动加随机类名-不会污染全局CSS" class="headerlink" title="自动加随机类名 不会污染全局CSS"></a>自动加随机类名 不会污染全局CSS</h2><p>加入了Style jsx代码后，Next.js会自动加入一个随机类名，这样就防止了CSS的全局污染。比如我们把代码写成下面这样，然后在浏览器的控制台中进行查看，你会发现自动给我们加入了类名，类似jsx-xxxxxxxx。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">litterWang</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &lt;div&gt;litterWang免费前端教程&lt;/div&gt;</span><br><span class="line">            &lt;div className=<span class="string">&quot;litterWang&quot;</span>&gt;litterWang免费前端教程&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;style jsx&gt;</span><br><span class="line">                &#123;<span class="string">`</span></span><br><span class="line"><span class="string">                    div &#123; color:blue;&#125;</span></span><br><span class="line"><span class="string">                    .litterWang &#123;color:red;&#125;</span></span><br><span class="line"><span class="string">                `</span>&#125;</span><br><span class="line">            &lt;/style&gt;</span><br><span class="line">        &lt;/&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> litterWang</span><br></pre></td></tr></table></figure><h2 id="动态显示样式"><a href="#动态显示样式" class="headerlink" title="动态显示样式"></a>动态显示样式</h2><p>Next.js使用了Style jsx,所以定义动态的CSS样式就非常简单，比如现在要作一个按钮，点击一下，字体颜色就由蓝色变成了红色。下面是实现代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">litterWang</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//关键代码----------start-------</span></span><br><span class="line">    <span class="keyword">const</span> [color,setColor] = useState(<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> changeColor=<span class="function">()=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">        setColor(color==<span class="string">&#x27;blue&#x27;</span>?<span class="string">&#x27;red&#x27;</span>:<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">//关键代码----------end-------</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &lt;div&gt;litterWang免费前端教程&lt;/div&gt;</span><br><span class="line">            &lt;div&gt;<span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;changeColor&#125;</span>&gt;</span>改变颜色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>&lt;/div&gt;</span><br><span class="line">            &lt;style jsx&gt;</span><br><span class="line">                &#123;<span class="string">`</span></span><br><span class="line"><span class="string">                    div &#123; color:<span class="subst">$&#123;color&#125;</span>;&#125;</span></span><br><span class="line"><span class="string">                `</span>&#125;</span><br><span class="line">            &lt;/style&gt;</span><br><span class="line">        &lt;/&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> litterWang</span><br></pre></td></tr></table></figure><h1 id="Lazy-Loading实现模块懒加载"><a href="#Lazy-Loading实现模块懒加载" class="headerlink" title="Lazy Loading实现模块懒加载"></a>Lazy Loading实现模块懒加载</h1><p>当项目越来越大的时候，模块的加载是需要管理的，如果不管理会出现首次打开过慢，页面长时间没有反应一系列问题。这时候可用Next.js提供的LazyLoading来解决这类问题。让模块和组件只有在用到的时候在进行加载，一般我把这种东西叫做“懒加载”.它一般分为两种情况，一种是懒加载（或者说是异步加载）模块，另一种是异步加载组件。</p><h2 id="懒加载模块"><a href="#懒加载模块" class="headerlink" title="懒加载模块"></a>懒加载模块</h2><p>这里使用一个在开发中常用的模块<code>Moment.js</code>，它是一个JavaScript日期处理类库，使用前需要先进行安装，这里使用<code>yarn</code>来进行安装。</p><p><code>yarn add momnet</code></p><p>然后在pages文件夹下，新建立一个time.js文件，并使用刚才的moment库来格式化时间，代码如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">&#x27;moment&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Time</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> [nowTime,setTime] = useState(<span class="built_in">Date</span>.now())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> changeTime=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        setTime(moment(<span class="built_in">Date</span>.now()).format())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &lt;div&gt;显示时间为:&#123;nowTime&#125;&lt;/div&gt;</span><br><span class="line">            &lt;div&gt;<span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;changeTime&#125;</span>&gt;</span>改变时间格式<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>&lt;/div&gt;</span><br><span class="line">        &lt;/&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Time</span><br></pre></td></tr></table></figure><p>这个看起来很简单和清晰的案例，缺存在着一个潜在的风险，就是如何有半数以上页面使用了这个momnet的库，那它就会以公共库的形式进行打包发布，就算项目第一个页面不使用moment也会进行加载，这就是资源浪费，对于我这样有代码洁癖的良好程序员是绝对不允许的。下面我们就通过Lazy Loading来进行改造代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">//删除import moment</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Time</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> [nowTime,setTime] = useState(<span class="built_in">Date</span>.now())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> changeTime= <span class="keyword">async</span> ()=&gt;&#123; <span class="comment">//把方法变成异步模式</span></span><br><span class="line">        <span class="keyword">const</span> moment = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">&#x27;moment&#x27;</span>) <span class="comment">//等待moment加载完成</span></span><br><span class="line">        setTime(moment.default(<span class="built_in">Date</span>.now()).format()) <span class="comment">//注意使用defalut</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &lt;div&gt;显示时间为:&#123;nowTime&#125;&lt;/div&gt;</span><br><span class="line">            &lt;div&gt;<span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;changeTime&#125;</span>&gt;</span>改变时间格式<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>&lt;/div&gt;</span><br><span class="line">        &lt;/&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Time</span><br></pre></td></tr></table></figure><p>这时候就就是懒加载了，可以在浏览器中按F12，看一下Network标签，当我们点击按钮时，才会加载1.js,它就是momnet.js的内容。</p><h2 id="懒加载自定义组件"><a href="#懒加载自定义组件" class="headerlink" title="懒加载自定义组件"></a>懒加载自定义组件</h2><p>懒加载组件也是非常容易的，我们先来写一个最简单的组件，在components文件夹下建立一个one.js文件，然后编写如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ()=&gt;<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Lazy Loading Component<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>有了自定义组件后，先要在懒加载这个组件的文件中引入dynamic,我们这个就在上边新建的time.js文件中编写了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> dynamic <span class="keyword">from</span> <span class="string">&#x27;next/dynamic&#x27;</span></span><br></pre></td></tr></table></figure><p>引入后就可以懒加载自定义模块了，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> dynamic <span class="keyword">from</span> <span class="string">&#x27;next/dynamic&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> One = dynamic(<span class="keyword">import</span>(<span class="string">&#x27;../components/one&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Time</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> [nowTime,setTime] = useState(<span class="built_in">Date</span>.now())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> changeTime= <span class="keyword">async</span> ()=&gt;&#123;</span><br><span class="line">        <span class="keyword">const</span> moment = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">&#x27;moment&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        setTime(moment.default(<span class="built_in">Date</span>.now()).format())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &lt;div&gt;显示时间为:&#123;nowTime&#125;&lt;/div&gt;</span><br><span class="line">            &lt;One/&gt;</span><br><span class="line">            &lt;div&gt;<span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;changeTime&#125;</span>&gt;</span>改变时间格式<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>&lt;/div&gt;</span><br><span class="line">        &lt;/&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Time</span><br></pre></td></tr></table></figure><p>写完代码后，可以看到自定义组件是懒加载的，只有在jsx里用到<code>&lt;One/&gt;</code>时，才会被加载进来，如果不使用就不会被加载。</p><p>当我们作的应用存在首页打开过慢和某个页面加载过慢时，就可以采用Lazy Loading的形式，用懒加载解决这些问题。</p><h1 id="自定义Head-更加友好的SEO操作"><a href="#自定义Head-更加友好的SEO操作" class="headerlink" title="自定义Head 更加友好的SEO操作"></a>自定义Head 更加友好的SEO操作</h1><p>既然用了Next.js框架，你就是希望服务端渲染，进行SEO操作。那为了更好的进行SEO优化，可以自己定制<code>&lt;Head&gt;</code>标签，定义<code>&lt;Head&gt;</code>一般有两种方式，这节课都学习一下。</p><h2 id="方法1：在各个页面加上-lt-Head-gt-标签"><a href="#方法1：在各个页面加上-lt-Head-gt-标签" class="headerlink" title="方法1：在各个页面加上&lt;Head&gt;标签"></a>方法1：在各个页面加上<code>&lt;Head&gt;</code>标签</h2><p>先在/pages文件夹下面建立一个header.js文件，然后写一个最简单的Hooks页面，代码如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Header</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>litterWang.com<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Header</span><br></pre></td></tr></table></figure><p>写完后到浏览器中预览一下，可以发现title部分并没有任何内容，显示的是<code>localhost:3000/header</code>,接下来就自定义下<code>&lt;Head&gt;</code>。自定义需要先进行引入next/head。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Head <span class="keyword">from</span> <span class="string">&#x27;next/head&#x27;</span></span><br><span class="line">引入后你就可以写一些列的头部标签了，全部代码如下:</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Head <span class="keyword">from</span> <span class="string">&#x27;next/head&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Header</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &lt;Head&gt;</span><br><span class="line">                &lt;title&gt;litterWang是最胖的！&lt;/title&gt;</span><br><span class="line">                &lt;meta charSet=<span class="string">&#x27;utf-8&#x27;</span> /&gt;</span><br><span class="line">            &lt;/Head&gt;</span><br><span class="line">            &lt;div&gt;litterWang.com&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/&gt; </span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Header</span><br></pre></td></tr></table></figure><p>这时候再打开浏览器预览，你发现已经有了title。</p><h2 id="方法2：定义全局的"><a href="#方法2：定义全局的" class="headerlink" title="方法2：定义全局的"></a>方法2：定义全局的<Head></h2><p>这种方法相当于自定义了一个组件，然后把<Head>在组件里定义好，以后每个页面都使用这个组件,其实这种方法用处不大，也不灵活。因为Next.js已经把<code>&lt;Head&gt;</code>封装好了，本身就是一个组件，我们再次封装的意义不大。</p><p>比如在components文件夹下面新建立一个myheader.js,然后写入下面的代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Head <span class="keyword">from</span> <span class="string">&#x27;next/head&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MyHeader = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &lt;Head&gt;</span><br><span class="line">                &lt;title&gt; litterWang.com &lt;/title&gt;   </span><br><span class="line">            &lt;/Head&gt;</span><br><span class="line">        &lt;/&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> MyHeader</span><br></pre></td></tr></table></figure><p>这时候把刚才编写的header.js页面改写一下，引入自定义的myheader，在页面里进行使用，最后在浏览器中预览，也是可以得到title的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Myheader <span class="keyword">from</span> <span class="string">&#x27;../components/myheader&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Header</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &lt;Myheader /&gt;</span><br><span class="line">            &lt;div&gt;litterWang.com&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/&gt; </span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Header</span><br></pre></td></tr></table></figure><p>这节课讲解了一下Next.js的<code>&lt;Head&gt;</code>标签如何使用和自定义，这个在工作中的每个页面都会用到，所以你一定要学会哦。</p><h1 id="p11：Next-js框架下使用Ant-Design-UI"><a href="#p11：Next-js框架下使用Ant-Design-UI" class="headerlink" title="p11：Next.js框架下使用Ant Design UI"></a>p11：Next.js框架下使用Ant Design UI</h1><p>在Next.js框架下使用 Ant Design，是最近小伙伴们问我最多的一个问题，所以决定单独拿出一节课来讲一下。Ant Design是一款阿里开源的前端组件库，我在工作中也一直在使用，我觉的它是目前阿里开源的前端项目是最成功的,使用人数也是最多的一个。不过它的初心是用来搭建项目的中后台系统，比如后台的管理系统。从React的角度来讲，它就是一个组件库，里边封装了开发中最常用的一些组件，让我们可以通过简单的配置就可以使用他们。</p><h2 id="让Next-js支持CSS文件"><a href="#让Next-js支持CSS文件" class="headerlink" title="让Next.js支持CSS文件"></a>让Next.js支持CSS文件</h2><p>Next.js默认是不支持CSS文件的，它用的是style jsx，也就是说它是不支持直接用import进行引入css的。</p><p>比如在根目录下新建一个文件夹static（其实正常情况下你应该已经有这个文件了），然后在文件夹下建立一个test.css文件，写入一些CSS Style。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">body&#123;</span><br><span class="line">    color:green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后用import在header.js里引入。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;../static/test.css&#x27;</span></span><br></pre></td></tr></table></figure><p>写完这些后到浏览器中进行预览，没有任何输出结果而且报错了。这说明Next.js默认是不支持CSS样式引入的，要进行一些必要的设置，才可以完成。</p><p>开始进行配置，让Next.js支持CSS文件</p><p>先用yarn命令来安装@zeit/next-css包，它的主要功能就是让Next.js可以加载CSS文件，有了这个包才可以进行配置。</p><p><code>yarn add @zeit/next-css</code></p><p>包安装好以后就可以进行配置文件的编写了，建立一个next.config.js.这个就是Next.js的总配置文件（如果感兴趣可以自学一下）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> withCss = <span class="built_in">require</span>(<span class="string">&#x27;@zeit/next-css&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">require</span> !== <span class="string">&#x27;undefined&#x27;</span>)&#123;</span><br><span class="line">    <span class="built_in">require</span>.extensions[<span class="string">&#x27;.css&#x27;</span>]=<span class="function"><span class="params">file</span>=&gt;</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = withCss(&#123;&#125;)</span><br></pre></td></tr></table></figure><p>修改配置文件需要重新启一下服务，重启服务可以让配置生效，这时候你到浏览器中可以发现CSS文件已经生效了，字变成了绿色。</p><h2 id="按需加载Ant-Design"><a href="#按需加载Ant-Design" class="headerlink" title="按需加载Ant Design"></a>按需加载Ant Design</h2><p>加载Ant Design在我们打包的时候会把Ant Design的所有包都打包进来，这样就会产生性能问题，让项目加载变的非常慢。这肯定是不行的，现在的目的是只加载项目中用到的模块，这就需要我们用到一个babel-plugin-import文件。</p><h2 id="先来安装Ant-Design库"><a href="#先来安装Ant-Design库" class="headerlink" title="** 先来安装Ant Design库 **"></a>** 先来安装Ant Design库 **</h2><p>直接使用yarn来安装就可以。</p><p><code>yarn add antd</code></p><h2 id="安装和配置babel-plugin-import-插件"><a href="#安装和配置babel-plugin-import-插件" class="headerlink" title="** 安装和配置babel-plugin-import 插件 **"></a>** 安装和配置babel-plugin-import 插件 **</h2><p>其实babel-plugin-import我讲Vue.js和Webpack.js的时候都一次讲过这个插件，这里我们就再来讲一下，先进行安装。</p><p><code>yarn add babel-plugin-import</code><br>安装完成后，在项目根目录建立.babelrc文件，然后写入如下配置文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;presets&quot;</span>:[<span class="string">&quot;next/babel&quot;</span>],  <span class="comment">//Next.js的总配置文件，相当于继承了它本身的所有配置</span></span><br><span class="line">    <span class="string">&quot;plugins&quot;</span>:[     <span class="comment">//增加新的插件，这个插件就是让antd可以按需引入，包括CSS</span></span><br><span class="line">        [</span><br><span class="line">            <span class="string">&quot;import&quot;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;libraryName&quot;</span>:<span class="string">&quot;antd&quot;</span>,</span><br><span class="line">                <span class="string">&quot;style&quot;</span>:<span class="string">&quot;css&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样配置好了以后，webpack就不会默认把整个Ant Design的包都进行打包到生产环境了，而是我们使用那个组件就打包那个组件,同样CSS也是按需打包的。</p><p>通过上面的配置，就可以愉快的在Next.js中使用Ant Desgin，让页面变的好看起来。</p><p>可以在header.js里，引入<Button>组件，并进行使用，代码如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Myheader <span class="keyword">from</span> <span class="string">&#x27;../components/myheader&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;Button&#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;../static/test.css&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Header</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &lt;Myheader /&gt;</span><br><span class="line">            &lt;div&gt;litterWang.com&lt;/div&gt;</span><br><span class="line">            &lt;div&gt;<span class="xml"><span class="tag">&lt;<span class="name">Button</span>&gt;</span>我是按钮<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span>&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/&gt; </span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Header</span><br></pre></td></tr></table></figure><p>然后到浏览器中查看一下结果，这时候Ant Design已经起作用了，我们也完成了在Next.js中，使用Ant Design的目的。</p><h1 id="Next-js生产环境打包（完结）"><a href="#Next-js生产环境打包（完结）" class="headerlink" title="Next.js生产环境打包（完结）"></a>Next.js生产环境打包（完结）</h1><p>如何进行打包和打包中的一些坑。</p><p>其实Next.js大打包时非常简单的，只要一个命令就可以打包成功。但是当你使用了Ant Desgin后，在打包的时候会遇到一些坑。</p><p>打包 ：next build</p><p>运行：next start -p 80</p><p>先把这两个命令配置到package.json文件里，比如配置成下面的样子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;next dev&quot;</span>,</span><br><span class="line">  <span class="string">&quot;build&quot;</span>: <span class="string">&quot;next build&quot;</span>,</span><br><span class="line">  <span class="string">&quot;start&quot;</span>: <span class="string">&quot;next start -p 80&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>然后在终端里运行一下<code>yarn build</code>，如果这时候报错，其实是我们在加入Ant Design的样式时产生的，这个已经在Ant Design的Github上被提出了，但目前还没有被修改，你可以改完全局引入CSS解决问题。</p><p>在page目录下，新建一个_app.js文件，然后写入下面的代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;next/app&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;antd/dist/antd.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App</span><br></pre></td></tr></table></figure><p>这样配置一下，就可以打包成功了，然后再运行yarn start来运行服务器，看一下我们的header页面，也是有样式的。说明打包已经成功了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Next-js简介&quot;&gt;&lt;a href=&quot;#Next-js简介&quot; class=&quot;headerlink&quot; title=&quot;Next.js简介&quot;&gt;&lt;/a&gt;Next.js简介&lt;/h1&gt;&lt;div class=&quot;note default&quot;&gt;&lt;p&gt;Next.js 是一个轻量级的 </summary>
      
    
    
    
    <category term="react学习" scheme="https://hard-workingrookie.github.io/categories/react%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="react" scheme="https://hard-workingrookie.github.io/tags/react/"/>
    
    <category term="Next.js" scheme="https://hard-workingrookie.github.io/tags/Next-js/"/>
    
  </entry>
  
  <entry>
    <title>笔记</title>
    <link href="https://hard-workingrookie.github.io/2020/08/27/%E7%AC%94%E8%AE%B0/"/>
    <id>https://hard-workingrookie.github.io/2020/08/27/%E7%AC%94%E8%AE%B0/</id>
    <published>2020-08-27T11:24:37.000Z</published>
    <updated>2020-12-28T10:23:01.134Z</updated>
    
    <content type="html"><![CDATA[<h1 id="babel-plugin-import"><a href="#babel-plugin-import" class="headerlink" title="babel-plugin-import"></a>babel-plugin-import</h1><p>webpack 就不会默认把整个的包都进行打包到生产环境了，而是我们使用那个组件就打包那个组件,同样 CSS 也是按需打包的。</p><p>配置举例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;presets&quot;</span>:[<span class="string">&quot;next/babel&quot;</span>],  <span class="comment">//Next.js的总配置文件，相当于继承了它本身的所有配置</span></span><br><span class="line">    <span class="string">&quot;plugins&quot;</span>:[     <span class="comment">//增加新的插件，这个插件就是让antd可以按需引入，包括CSS</span></span><br><span class="line">        [</span><br><span class="line">            <span class="string">&quot;import&quot;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;libraryName&quot;</span>:<span class="string">&quot;antd&quot;</span>,</span><br><span class="line">                <span class="string">&quot;style&quot;</span>:<span class="string">&quot;css&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="next-js-引入-css"><a href="#next-js-引入-css" class="headerlink" title="next.js 引入 css"></a>next.js 引入 css</h1><p>先用 yarn 命令来安装@zeit/next-css 包，它的主要功能就是让 Next.js 可以加载 CSS 文件，有了这个包才可以进行配置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add @zeit/next-css</span><br></pre></td></tr></table></figure><p>包安装好以后就可以进行配置文件的编写了，建立一个 next.config.js.这个就是 Next.js 的总配置文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> withCss = <span class="built_in">require</span>(<span class="string">&#x27;@zeit/next-css&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">require</span> !== <span class="string">&#x27;undefined&#x27;</span>)&#123;</span><br><span class="line">    <span class="built_in">require</span>.extensions[<span class="string">&#x27;.css&#x27;</span>]=<span class="function"><span class="params">file</span>=&gt;</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = withCss(&#123;&#125;)</span><br></pre></td></tr></table></figure><p>这段代码你有兴趣是可以看看的，其实我对配置文件基本不记忆的，因为配置文件就是别人规定的配置，你写就好。比如要使用 CSS 就可以把上面这段代码输入到放入到里边的就好了。</p><p>修改配置文件需要重新启一下服务(<code>yarn dev </code>)，重启服务可以让配置生效，这时候你到浏览器中可以发现 CSS 文件已经生效了。</p><h1 id="1-markdown-解析组件"><a href="#1-markdown-解析组件" class="headerlink" title="1.markdown 解析组件"></a>1.markdown 解析组件</h1><p>react-markdown 是 react 专用的 markdown 解析组件</p><div class="note default"><p>github 网址：<a href="https://github.com/rexxars/react-markdown">https://github.com/rexxars/react-markdown</a></p></div><p>可以直接使用 yarn add 来进行安装，代码如下:</p><p><code>yarn add react-markdown</code><br>安装好后，使用 import 进行引入，代码如下:</p><p><code>import ReactMarkdown from &#39;react-markdown&#39;</code></p><p>准备 md 相关数据<br>因为目前还没有后端程序，所以需要伪造一个 md 数据，让 web 页面可以渲染。</p><p>这里声明一个 markdown 变量,当然内容全部是我胡乱写的，为的就是可以顺利渲染出来。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> markdown=<span class="string">&#x27;# P01:课程介绍和环境搭建\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;[ **M** ] arkdown + E [ **ditor** ] = **Mditor**  \n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&gt; Mditor 是一个简洁、易于集成、方便扩展、期望舒服的编写 markdown 的编辑器，仅此而已... \n\n&#x27;</span> +</span><br><span class="line">   <span class="string">&#x27;**这是加粗的文字**\n\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;*这是倾斜的文字*`\n\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;***这是斜体加粗的文字***\n\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;~~这是加删除线的文字~~ \n\n&#x27;</span>+</span><br><span class="line">  <span class="string">&#x27;\`console.log(111)\` \n\n&#x27;</span>+</span><br><span class="line">  <span class="string">&#x27;# p02:来个Hello World 初始Vue3.0\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&gt; aaaaaaaaa\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&gt;&gt; bbbbbbbbb\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&gt;&gt;&gt; cccccccccc\n&#x27;</span>+</span><br><span class="line">  <span class="string">&#x27;***\n\n\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;# p03:Vue3.0基础知识讲解\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&gt; aaaaaaaaa\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&gt;&gt; bbbbbbbbb\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&gt;&gt;&gt; cccccccccc\n\n&#x27;</span>+</span><br><span class="line">  <span class="string">&#x27;# p04:Vue3.0基础知识讲解\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&gt; aaaaaaaaa\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&gt;&gt; bbbbbbbbb\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&gt;&gt;&gt; cccccccccc\n\n&#x27;</span>+</span><br><span class="line">  <span class="string">&#x27;#5 p05:Vue3.0基础知识讲解\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&gt; aaaaaaaaa\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&gt;&gt; bbbbbbbbb\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&gt;&gt;&gt; cccccccccc\n\n&#x27;</span>+</span><br><span class="line">  <span class="string">&#x27;# p06:Vue3.0基础知识讲解\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&gt; aaaaaaaaa\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&gt;&gt; bbbbbbbbb\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&gt;&gt;&gt; cccccccccc\n\n&#x27;</span>+</span><br><span class="line">  <span class="string">&#x27;# p07:Vue3.0基础知识讲解\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&gt; aaaaaaaaa\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&gt;&gt; bbbbbbbbb\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&gt;&gt;&gt; cccccccccc\n\n&#x27;</span>+</span><br><span class="line">  <span class="string">&#x27;``` var a=11; ```&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="使用-react-markdown-渲染-markdown"><a href="#使用-react-markdown-渲染-markdown" class="headerlink" title="使用 react-markdown 渲染 markdown"></a>使用 react-markdown 渲染 markdown</h2><p>现在组件和 markdown 文件都准备好了，可以进行渲染了。代码如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=<span class="string">&quot;detailed-content&quot;</span> &gt;</span><br><span class="line">    &lt;ReactMarkdown</span><br><span class="line">      source=&#123;markdown&#125;</span><br><span class="line">      escapeHtml=&#123;<span class="literal">false</span>&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>现在可以到浏览器中预览一下了，如果一切正常，应该可以正常使用 markdown 语法了。</p><h1 id="2-markdown-解析组件"><a href="#2-markdown-解析组件" class="headerlink" title="2.markdown 解析组件"></a>2.markdown 解析组件</h1><p>前面介紹的 react-markdown,但是这个插件的配置项还是太少了，现在介绍的是 marked+highlight.js。这个方案是比较成熟的，目前公司的开发文档程序就是基于这个开发的。</p><h2 id="安装-marked-和-highlight"><a href="#安装-marked-和-highlight" class="headerlink" title="安装 marked 和 highlight"></a>安装 marked 和 highlight</h2><p>这两个模块需要先安装，这里我们就使用 yarn 来进行安装。打开终端，进入到 blog 目录下，然后使用下面命令进行安装。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add marked highlight.js</span><br></pre></td></tr></table></figure><p>我目前的版本是 marked 是 0.7.0,highlight 是 9.15.10。如果版本有变化，导致代码没法运行，可自行查看 API 进行修改。</p><h2 id="引入模块"><a href="#引入模块" class="headerlink" title="引入模块"></a>引入模块</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> marked <span class="keyword">from</span> <span class="string">&#x27;marked&#x27;</span></span><br><span class="line"><span class="keyword">import</span> hljs <span class="keyword">from</span> <span class="string">&quot;highlight.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;highlight.js/styles/monokai-sublime.css&#x27;</span>;</span><br></pre></td></tr></table></figure><p>引入设置一下 marked.setOptions，里边的属性比较多，我在这里详细的介绍一下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> renderer = <span class="keyword">new</span> marked.Renderer();</span><br><span class="line"></span><br><span class="line">marked.setOptions(&#123;</span><br><span class="line">    renderer: renderer,</span><br><span class="line">    gfm: <span class="literal">true</span>,</span><br><span class="line">    pedantic: <span class="literal">false</span>,</span><br><span class="line">    sanitize: <span class="literal">false</span>,</span><br><span class="line">    tables: <span class="literal">true</span>,</span><br><span class="line">    breaks: <span class="literal">false</span>,</span><br><span class="line">    smartLists: <span class="literal">true</span>,</span><br><span class="line">    smartypants: <span class="literal">false</span>,</span><br><span class="line">    highlight: <span class="function"><span class="keyword">function</span> (<span class="params">code</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> hljs.highlightAuto(code).value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> html = marked(props.article_content)</span><br></pre></td></tr></table></figure><ul><li><p>renderer: 这个是必须填写的，你可以通过自定义的 Renderer 渲染出自定义的格式</p></li><li><p>gfm：启动类似 Github 样式的 Markdown,填写 true 或者 false</p></li><li><p>pedatic：只解析符合 Markdown 定义的，不修正 Markdown 的错误。填写 true 或者 false</p></li><li><p>sanitize: 原始输出，忽略 HTML 标签，这个作为一个开发人员，一定要写 flase</p></li><li><p>tables： 支持 Github 形式的表格，必须打开 gfm 选项</p></li><li><p>breaks: 支持 Github 换行符，必须打开 gfm 选项，填写 true 或者 false</p></li><li><p>smartLists：优化列表输出，这个填写 ture 之后，你的样式会好看很多，所以建议设置成 ture</p></li><li><p>highlight: 高亮显示规则 ，这里我们将使用 highlight.js 来完成</p></li></ul><p>** 增加 Code 的高亮显示 **</p><p>在设置 setOptions 属性时，可以直接设置高亮显示，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">highlight: <span class="function"><span class="keyword">function</span> (<span class="params">code</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> hljs.highlightAuto(code).value;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>设置完成后，你在浏览器检查代码时就可以出现 hljs 的样式，说明你的效果加成功了，实现了高亮显示代码。</p><h1 id="1-markdown-目录导航——markdown-navbar"><a href="#1-markdown-目录导航——markdown-navbar" class="headerlink" title="1.markdown 目录导航——markdown-navbar"></a>1.markdown 目录导航——markdown-navbar</h1><p>markdown-navbar 组件是一款第三方提供的组件，因为这个是比较小众的需求，所以使用的人并不多。目前只有 18star,这个是国人开发的。</p><h2 id="markdown-navbar-的基本属性："><a href="#markdown-navbar-的基本属性：" class="headerlink" title="markdown-navbar 的基本属性："></a>markdown-navbar 的基本属性：</h2><ul><li>className： 可以为导航定义一个 class 名称，从而进行 style 样式的定义。</li><li>source：要解析的内容，也就是你的 Markdown 内容。</li><li>headingTopOffset:描点距离页面顶部的位置，默认值是 0.</li><li>ordered: 显示数字编码，默认是显示的，也就是 true，设置为 false 就不显示了。</li></ul><h2 id="markdown-navbar-的安装和使用"><a href="#markdown-navbar-的安装和使用" class="headerlink" title="markdown-navbar 的安装和使用"></a>markdown-navbar 的安装和使用</h2><p>用<code>npm install</code>进行安装，命令如下：</p><p><code>npm install --save markdown-navbar</code></p><p>用 yarn add 进行安装，命令如下：</p><p><code>yarn add markdown-navbar</code></p><p>安装完成后，直接在要使用的页面用 import 进行引入,需要注意的是你还需要引入 css。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> MarkNav <span class="keyword">from</span> <span class="string">&#x27;markdown-navbar&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;markdown-navbar/dist/navbar.css&#x27;</span>;</span><br></pre></td></tr></table></figure><p>这样就引入成功了，现在就可以制作导航了，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=<span class="string">&quot;detailed-nav comm-box&quot;</span>&gt;</span><br><span class="line">  &lt;div className=<span class="string">&quot;nav-title&quot;</span>&gt;文章目录&lt;/div&gt;</span><br><span class="line">  &lt;MarkNav</span><br><span class="line">    className=<span class="string">&quot;article-menu&quot;</span></span><br><span class="line">    source=&#123;markdown&#125;</span><br><span class="line">    ordered=&#123;<span class="literal">false</span>&#125;</span><br><span class="line">  /&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>在浏览器中预览一下，可以看到效果了。但现在有一个需求，就是这个导航要一直在页面的右侧。我们经常叫这个需求为固钉。Ant Desgin 中提供了<strong>Affix</strong>.</p><p>先用 import 引入 Affix 组件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Row, Col ,Affix, Icon ,Breadcrumb  &#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span></span><br></pre></td></tr></table></figure><p>引入后在需要固钉的外层加上 Affix 组件就可以了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;Affix offsetTop=&#123;<span class="number">5</span>&#125;&gt;</span><br><span class="line">  &lt;div className=<span class="string">&quot;detailed-nav comm-box&quot;</span>&gt;</span><br><span class="line">    &lt;div className=<span class="string">&quot;nav-title&quot;</span>&gt;文章目录&lt;/div&gt;</span><br><span class="line">    &lt;MarkNav</span><br><span class="line">      className=<span class="string">&quot;article-menu&quot;</span></span><br><span class="line">      source=&#123;markdown&#125;</span><br><span class="line"></span><br><span class="line">      ordered=&#123;<span class="literal">false</span>&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/Affix&gt;</span><br></pre></td></tr></table></figure><p>写完这段代码，到浏览器中预览一下，就可以实现固钉的效果了。</p><h1 id="2-markdown-目录导航——tocify-tsx-文件"><a href="#2-markdown-目录导航——tocify-tsx-文件" class="headerlink" title="2. markdown 目录导航——tocify.tsx 文件"></a>2. markdown 目录导航——tocify.tsx 文件</h1><p>你的程序中使用了 Ant DesignUI 库，因为它里边的导航部分，使用了 antd 的 Anchor 组件</p><p>安装 lodash 模块，这个可以直接使用 yarn add lodash 来安装</p><p>上面两个条件满足后，你可以把文件 tocify.tsx 拷贝到你的项目里了，我这里放到了/blog/components 文件夹下了，把它视为一种自定义组件。</p><h2 id="tocify-tsx-文件"><a href="#tocify-tsx-文件" class="headerlink" title="tocify.tsx 文件"></a>tocify.tsx 文件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Anchor &#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; last &#125; <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; Link &#125; = Anchor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> interface TocItem &#123;</span><br><span class="line">  anchor: string;</span><br><span class="line">  level: number;</span><br><span class="line">  text: string;</span><br><span class="line">  children?: TocItem[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> type TocItems = TocItem[]; <span class="comment">// TOC目录树结构</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Tocify</span> </span>&#123;</span><br><span class="line">  tocItems: TocItems = [];</span><br><span class="line"></span><br><span class="line">  index: number = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="built_in">this</span>.tocItems = [];</span><br><span class="line">    <span class="built_in">this</span>.index = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  add(text: string, <span class="attr">level</span>: number) &#123;</span><br><span class="line">    <span class="keyword">const</span> anchor = <span class="string">`toc<span class="subst">$&#123;level&#125;</span><span class="subst">$&#123;++<span class="built_in">this</span>.index&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">const</span> item = &#123; anchor, level, text &#125;;</span><br><span class="line">    <span class="keyword">const</span> items = <span class="built_in">this</span>.tocItems;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (items.length === <span class="number">0</span>) &#123; <span class="comment">// 第一个 item 直接 push</span></span><br><span class="line">      items.push(item);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> lastItem = last(items) <span class="keyword">as</span> TocItem; <span class="comment">// 最后一个 item</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (item.level &gt; lastItem.level) &#123; <span class="comment">// item 是 lastItem 的 children</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = lastItem.level + <span class="number">1</span>; i &lt;= <span class="number">2</span>; i++) &#123;</span><br><span class="line">          <span class="keyword">const</span> &#123; children &#125; = lastItem;</span><br><span class="line">          <span class="keyword">if</span> (!children) &#123; <span class="comment">// 如果 children 不存在</span></span><br><span class="line">            lastItem.children = [item];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          lastItem = last(children) <span class="keyword">as</span> TocItem; <span class="comment">// 重置 lastItem 为 children 的最后一个 item</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (item.level &lt;= lastItem.level) &#123; <span class="comment">// item level 小于或等于 lastItem level 都视为与 children 同级</span></span><br><span class="line">            children.push(item);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123; <span class="comment">// 置于最顶级</span></span><br><span class="line">        items.push(item);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> anchor;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  reset = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.tocItems = [];</span><br><span class="line">    <span class="built_in">this</span>.index = <span class="number">0</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  renderToc(items: TocItem[]) &#123; <span class="comment">// 递归 render</span></span><br><span class="line">    <span class="keyword">return</span> items.map(<span class="function"><span class="params">item</span> =&gt;</span> (</span><br><span class="line">      &lt;Link key=&#123;item.anchor&#125; href=&#123;<span class="string">`#<span class="subst">$&#123;item.anchor&#125;</span>`</span>&#125; title=&#123;item.text&#125;&gt;</span><br><span class="line">        &#123;item.children &amp;&amp; <span class="built_in">this</span>.renderToc(item.children)&#125;</span><br><span class="line">      &lt;/Link&gt;</span><br><span class="line">    ));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Anchor affix showInkInFixed&gt;</span><br><span class="line">         &#123;<span class="built_in">this</span>.renderToc(<span class="built_in">this</span>.tocItems)&#125;</span><br><span class="line">      &lt;/Anchor&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其实这个文件也很简单，如果 JavaScript 基础没问题是完全可以看明白的。</p><h2 id="使用-tocify-tsx-生成文章目录"><a href="#使用-tocify-tsx-生成文章目录" class="headerlink" title="使用 tocify.tsx 生成文章目录"></a>使用 tocify.tsx 生成文章目录</h2><p>接下来就可以利用 tocify.tsx 文件生成目录了，在/blog/pages/detailed.js 引入。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Tocify <span class="keyword">from</span> <span class="string">&#x27;../components/tocify.tsx&#x27;</span></span><br></pre></td></tr></table></figure><p>引入后，需要对 marked 的渲染进行自定义，这时候需要设置 renderer.heading，就是写一个方法们重新定义对#这种标签的解析。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tocify = <span class="keyword">new</span> Tocify()</span><br><span class="line">renderer.heading = <span class="function"><span class="keyword">function</span>(<span class="params">text, level, raw</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> anchor = tocify.add(text, level);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`&lt;a id=&quot;<span class="subst">$&#123;anchor&#125;</span>&quot; href=&quot;#<span class="subst">$&#123;anchor&#125;</span>&quot; class=&quot;anchor-fix&quot;&gt;&lt;h<span class="subst">$&#123;level&#125;</span>&gt;<span class="subst">$&#123;text&#125;</span>&lt;/h<span class="subst">$&#123;level&#125;</span>&gt;&lt;/a&gt;\n`</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">最后在需要显示文章导航的地方，写下面的代码:</span><br><span class="line"></span><br><span class="line">&lt;div className=<span class="string">&quot;toc-list&quot;</span>&gt;</span><br><span class="line">  &#123;tocify &amp;&amp; tocify.render()&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="egg-js-跨域问题"><a href="#egg-js-跨域问题" class="headerlink" title="egg.js 跨域问题"></a>egg.js 跨域问题</h1><p><strong>egg-cors</strong>模块是专门用来解决 egg.js 跨域问题的，只要简单的配置就可以完成跨域的设置，但是跨域一定要谨慎设置，很多安全问题，都是通过跨域进行攻击的。</p><p>安装我们使用<code>yarn add</code>进行安装，命令如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add egg-cors</span><br></pre></td></tr></table></figure><h2 id="配置-config-plugin-js-文件"><a href="#配置-config-plugin-js-文件" class="headerlink" title="配置 config/plugin.js 文件"></a>配置 config/plugin.js 文件</h2><p>在安装完成后需要对/service/config/plugin.js 文件进行修改，加入 egg-cors 模块即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span>.cors= &#123;</span><br><span class="line">    enable: <span class="literal">true</span>,</span><br><span class="line">    package: <span class="string">&#x27;egg-cors&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置-config-default-js"><a href="#配置-config-default-js" class="headerlink" title="配置 config.default.js"></a>配置 config.default.js</h2><p>在配置完成 plugin.js 文件以后，还需要设置 config.default.js 文件。这个文件主要设置的是允许什么域名和请求方法可以进行跨域访问。配置代码如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">　　config.security = &#123;</span><br><span class="line">　　　　csrf: &#123;</span><br><span class="line">　　　　　　enable: <span class="literal">false</span></span><br><span class="line">　　　　&#125;,</span><br><span class="line">　　　　domainWhiteList: [ <span class="string">&#x27;*&#x27;</span> ]</span><br><span class="line">　　&#125;;</span><br><span class="line"> config.cors = &#123;</span><br><span class="line">    origin: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">    allowMethods: <span class="string">&#x27;GET,HEAD,PUT,POST,DELETE,PATCH,OPTIONS&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果你只想让<code>http://localhost:3000</code> 来进行接口方案，就可以设置成下面的代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">config.security = &#123;</span><br><span class="line">　　　　csrf: &#123;<span class="attr">enable</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">　　　　domainWhiteList: [ <span class="string">&#x27;*&#x27;</span> ]</span><br><span class="line">　　&#125;;</span><br><span class="line">config.cors = &#123;</span><br><span class="line">  origin: <span class="string">&#x27;http://localhost:3000&#x27;</span>, <span class="comment">//只允许这个域进行访问接口</span></span><br><span class="line">  credentials: <span class="literal">true</span>,   <span class="comment">// 开启认证</span></span><br><span class="line">  allowMethods: <span class="string">&#x27;GET,HEAD,PUT,POST,DELETE,PATCH,OPTIONS&#x27;</span></span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p>设置完成后，就可以在浏览器中进行预览了，如果能正常访问，说明跨域访问已经设置成功了。</p><h1 id="vscode-好用插件"><a href="#vscode-好用插件" class="headerlink" title="vscode 好用插件"></a>vscode 好用插件</h1><p><strong>px-to-vw</strong></p><p>在设置里面搜索 px-to-vw 可设置设计稿大小</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Px-to-viewport: Viewport-width</span><br><span class="line">The width <span class="keyword">of</span> the viewport</span><br><span class="line"></span><br><span class="line"><span class="number">350</span></span><br></pre></td></tr></table></figure><p><strong>选中 css 语句按 `ALT+Z’即可转换为 vw</strong></p><p>此时</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font-size: <span class="number">16</span>px;  <span class="comment">//ALT+Z</span></span><br></pre></td></tr></table></figure><p>变成</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font-size: <span class="number">4.444</span>vw;</span><br></pre></td></tr></table></figure><h1 id="Vue-父调用子组件方法"><a href="#Vue-父调用子组件方法" class="headerlink" title="Vue 父调用子组件方法"></a>Vue 父调用子组件方法</h1><h2 id="1-使用ref"><a href="#1-使用ref" class="headerlink" title="1.使用ref"></a>1.使用ref</h2><p>//父组件<br><template><br>  <div class="home"><br>    <HelloWorld ref="mychild"></HelloWorld><br>    &lt;div @click=”clickParent”&gt;click me</div><br>  </div><br></template></p><script>  import HelloWorld from '@/components/HelloWorld.vue'  export default {    name: 'home',    components: {      HelloWorld    },    methods: {      clickParent() {        this.$refs.mychild.parentHandleclick("哈喽哈喽");      }    }  }</script><p>//子组件<br><template><br>  <div class="hello"><br>    <h1>我是子组件</h1><br>  </div><br></template></p><script>  export default {    name: 'HelloWorld',    created() {    },    methods: {      parentHandleclick(e) {        console.log(e)      }    }  }</script><h2 id="2-使用-emit"><a href="#2-使用-emit" class="headerlink" title="2.使用$emit"></a>2.使用$emit</h2><h3 id="子组件"><a href="#子组件" class="headerlink" title="子组件"></a>子组件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;editBanner&quot;</span> @click=<span class="string">&quot;bannerClick&quot;</span>&gt;</span><br><span class="line">    &lt;span&gt;&#123;&#123;left&#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;span&gt;<span class="xml"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&#x27;right&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span>&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script &gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: [<span class="string">&#x27;left&#x27;</span>],</span><br><span class="line">  methods:&#123;</span><br><span class="line">      bannerClick()&#123;</span><br><span class="line">          <span class="built_in">this</span>.$emit(<span class="string">&#x27;bannerClick&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="父组件"><a href="#父组件" class="headerlink" title="父组件"></a>父组件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;editBanner left=<span class="string">&quot;出生日期&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;dateView&quot;</span> @bannerClick=<span class="string">&quot;changeDateShow&quot;</span>&gt;</span><br><span class="line">  &lt;a slot=<span class="string">&quot;right&quot;</span>&gt;&#123;&#123;date&#125;&#125;&lt;/a&gt;</span><br><span class="line">&lt;/editBanner&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="this"><a href="#this" class="headerlink" title="this"></a>this</h1><p><strong>匿名函数的 this 永远指向 window</strong><br><strong>this 永远指向最后调用它的那个对象</strong></p><h1 id="shuffle"><a href="#shuffle" class="headerlink" title="shuffle()"></a>shuffle()</h1><p><strong>shuffle()</strong> 方法将序列的所有元素随机排序。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line"></span><br><span class="line">random.shuffle (lst )</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;babel-plugin-import&quot;&gt;&lt;a href=&quot;#babel-plugin-import&quot; class=&quot;headerlink&quot; title=&quot;babel-plugin-import&quot;&gt;&lt;/a&gt;babel-plugin-import&lt;/h1&gt;&lt;p&gt;we</summary>
      
    
    
    
    <category term="笔记" scheme="https://hard-workingrookie.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="https://hard-workingrookie.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
