<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王美的个人博客</title>
  
  
  <link href="https://hard-workingrookie.github.io/atom.xml" rel="self"/>
  
  <link href="https://hard-workingrookie.github.io/"/>
  <updated>2020-08-27T07:57:16.210Z</updated>
  <id>https://hard-workingrookie.github.io/</id>
  
  <author>
    <name>王美</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>react-redux入门级学习</title>
    <link href="https://hard-workingrookie.github.io/2020/08/27/react-redux%E5%85%A5%E9%97%A8%E7%BA%A7%E5%AD%A6%E4%B9%A0/"/>
    <id>https://hard-workingrookie.github.io/2020/08/27/react-redux%E5%85%A5%E9%97%A8%E7%BA%A7%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-08-27T07:04:29.000Z</published>
    <updated>2020-08-27T07:57:16.210Z</updated>
    
    <content type="html"><![CDATA[<h1 id="react-redux编写TodoList"><a href="#react-redux编写TodoList" class="headerlink" title="react-redux编写TodoList"></a>react-redux编写TodoList</h1><h2 id="React-Redux介绍和安装"><a href="#React-Redux介绍和安装" class="headerlink" title="React-Redux介绍和安装"></a>React-Redux介绍和安装</h2><p>React-Redux 是react生态中的常用组件，可以理解为全局数据状态管理工具（状态管理机），用来做组件通信等。</p><h3 id="react项目初始化"><a href="#react项目初始化" class="headerlink" title="react项目初始化"></a>react项目初始化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create-react-app demo02</span><br><span class="line"><span class="built_in">cd</span> demo02</span><br><span class="line">npm start</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn start</span><br></pre></td></tr></table></figure><p>安装完成后，删除一些没有必要的样式和代码，在/src目录下，只留一个index.js文件，其余的全部删除，这时候项目已经不能启动起来了，这很正常。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import React from <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line">import ReactDOM from <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line">ReactDOM.render(&lt;App /&gt;, document.getElementById(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们把APP删除了，所以会报错，不过没有关系，我们之后再来处理这个。</p><h3 id="react-redux"><a href="#react-redux" class="headerlink" title="react-redux"></a>react-redux</h3><p>项目初始化好后，直接使用npm在命令行安装React-redux，这个网络的不同安装时间也有所不同。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save react-redux</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-redux --save</span><br></pre></td></tr></table></figure><h2 id="修改代码，跑起来"><a href="#修改代码，跑起来" class="headerlink" title="修改代码，跑起来"></a>修改代码，跑起来</h2><p>建立一个TodoList.js的组件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line">class TodoList extends Component &#123;</span><br><span class="line">    <span class="function"><span class="title">render</span></span>() &#123; </span><br><span class="line">        <span class="built_in">return</span> ( &lt;div&gt;LitterWang&lt;/div&gt; );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">export</span> default TodoList;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将TodoList.js引入到index.js文件下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import React from <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line">import ReactDOM from <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line">import TodoList from <span class="string">&#x27;./TodoList&#x27;</span></span><br><span class="line">ReactDOM.render(&lt;TodoList /&gt;, document.getElementById(<span class="string">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure><p>这时候再在浏览器中预览，就会只输出一个LitterWang的字样。虽然很丑，但是项目已经跑起来了。接下来我们编写一下render函数中的JSX页面。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">render</span></span>() &#123; </span><br><span class="line">    <span class="built_in">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;div&gt;&lt;input /&gt;&lt;button&gt;提交&lt;/button&gt;&lt;/div&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li&gt;LitterWang&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候界面应该发生了一点变化,这样基本的项目我们就算初始化完成了，接下来我们按原来的Redux方式作一个store出来。</p><h2 id="Redux-的安装和使用（复习）"><a href="#Redux-的安装和使用（复习）" class="headerlink" title="Redux 的安装和使用（复习）"></a>Redux 的安装和使用（复习）</h2><p>先在终端中安装Redux包，因为是一个新项目，所以需要重新安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install --save redux</span><br><span class="line">或</span><br><span class="line">yarn add  redux --save</span><br></pre></td></tr></table></figure><p>创建一个store文件夹，在/store下创建一个index.js文件,并写入下面代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import &#123;createStore&#125; from <span class="string">&#x27;redux&#x27;</span></span><br><span class="line">import reducer from <span class="string">&#x27;./reducer&#x27;</span></span><br><span class="line"></span><br><span class="line">const store = createStore(reducer)</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default store</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建reducer.js文件，代码如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const defalutState = &#123;</span><br><span class="line">    inputValue : <span class="string">&#x27;LitterWang&#x27;</span>,</span><br><span class="line">    list :[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default (state = defalutState,action) =&gt;&#123;</span><br><span class="line">    <span class="built_in">return</span> state</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再TodoList.js中的构造函数constructor中使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import React, &#123; Component &#125; from <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line">//-----关键代码--------start</span><br><span class="line">import store from <span class="string">&#x27;./store&#x27;</span></span><br><span class="line">//-----关键代码--------end</span><br><span class="line">class TodoList extends Component &#123;</span><br><span class="line">    //-----关键代码--------start</span><br><span class="line">    constructor(props)&#123;</span><br><span class="line">        super(props)</span><br><span class="line">        this.state = store.getState()</span><br><span class="line">    &#125;</span><br><span class="line">    //-----关键代码--------end</span><br><span class="line">    <span class="function"><span class="title">render</span></span>() &#123; </span><br><span class="line">        <span class="built_in">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    //-----关键代码--------start</span><br><span class="line">                    &lt;input value=&#123;this.state.inputValue&#125; /&gt;</span><br><span class="line">                    //-----关键代码--------end</span><br><span class="line">                    &lt;button&gt;提交&lt;/button&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &lt;li&gt;JSPang&lt;/li&gt;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default TodoList;</span><br></pre></td></tr></table></figure><p>写完这段，到浏览器中保存看一下，应该就得到store中的值了，到目前为止，我们只是安装了React-Redux,但是还并没有进行使用，这节课只要是把基本的环境搭建好和复习一下以前的知识。下节课我们再逐步学习React-Redux的知识，小伙伴们先不要着急，先把开发环境搭建好吧。</p><h3 id="Provider和connect"><a href="#Provider和connect" class="headerlink" title="Provider和connect"></a>Provider和connect</h3><p>上节课已经完成了React-redux开发TodoList组件的基本环境。现在就可以开心的学习React-redux了，这节课主要学习一下Provider和connect这两个知识点。</p><h4 id="Provider-提供器"><a href="#Provider-提供器" class="headerlink" title="Provider 提供器"></a>Provider 提供器</h4><p><Provider>是一个提供器，只要使用了这个组件，组件里边的其它所有组件都可以使用store了，这也是React-redux的核心组件了。有了<Provider>就可以把/src/index.js改写成下面的代码样式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import React from <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line">import ReactDOM from <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line">import TodoList from <span class="string">&#x27;./TodoList&#x27;</span></span><br><span class="line">//---------关键代码--------start</span><br><span class="line">import &#123; Provider &#125; from <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line">import store from <span class="string">&#x27;./store&#x27;</span></span><br><span class="line">//声明一个App组件，然后这个组件用Provider进行包裹。</span><br><span class="line">const App = (</span><br><span class="line">    &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">        &lt;TodoList /&gt;</span><br><span class="line">    &lt;/Provider&gt;</span><br><span class="line">)</span><br><span class="line">//---------关键代码--------end</span><br><span class="line">ReactDOM.render(App, document.getElementById(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>完这个，我们再去浏览器中进行查看，发现代码也是可以完美运行的。需要注意的是，现在还是用传统方法获取的store中的数据。有了Provider再获取数据就没有那么麻烦了。</p><h4 id="connect-连接器"><a href="#connect-连接器" class="headerlink" title="connect 连接器"></a>connect 连接器</h4><p>现在如何简单的获取store中数据那？先打开TodoList.js文件，引入connect，它是一个连接器（其实它就是一个方法），有了这个连接器就可以很容易的获得数据了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123;connect&#125; from <span class="string">&#x27;react-redux&#x27;</span> </span><br></pre></td></tr></table></figure><p> 这时候暴露出去的就变成了connect了，代码如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default connect(xxx,null)(TodoList);</span><br></pre></td></tr></table></figure><p>这里的xxx代表一个映射关系，目前还没有制作这个映射关系。</p><h5 id="映射关系的制作"><a href="#映射关系的制作" class="headerlink" title="映射关系的制作"></a>映射关系的制作</h5><p>映射关系就是把原来的state映射成组件中的props属性，比如我们想映射inputValue就可以写成如下代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const stateToProps = (state)=&gt;&#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">        inputValue : state.inputValue</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候再把xxx改为stateToProps</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default connect(stateToProps,null)(TodoList)</span><br></pre></td></tr></table></figure><p>然后把input里的state标签，改为props,代码如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input value=&#123;this.props.inputValue&#125; /&gt;</span><br></pre></td></tr></table></figure><p>为了方便你学习，我这里给出所有的TodoList.js的所有代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line">import store from <span class="string">&#x27;./store&#x27;</span></span><br><span class="line">import &#123;connect&#125; from <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"></span><br><span class="line">class TodoList extends Component &#123;</span><br><span class="line">    constructor(props)&#123;</span><br><span class="line">        super(props)</span><br><span class="line">        this.state = store.getState()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span></span>() &#123; </span><br><span class="line">        <span class="built_in">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;input value=&#123;this.props.inputValue&#125; /&gt;</span><br><span class="line">                    &lt;button&gt;提交&lt;/button&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &lt;li&gt;JSPang&lt;/li&gt;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const stateToProps = (state)=&gt;&#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">        inputValue : state.inputValue</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default connect(stateToProps,null)(TodoList);</span><br></pre></td></tr></table></figure><p>写完之后再到浏览器中查看一下，发现我们映射的关系也是可以用的。这节课就是React-Redux插件的使用重点，你需要多写几遍，把这个流程记在心里。先到这里，下节课我们继续实现TodoList组件</p><h3 id="React-redux的数据修改"><a href="#React-redux的数据修改" class="headerlink" title="React-redux的数据修改"></a>React-redux的数据修改</h3><p>上节课已经可以用React-redux顺利的拿到Store中数据了。这节课学习如何改变Store中的数据。也就是当我们修改 input 中的值时，去改变store数据，UI界面也随之进行改变。</p><h4 id="编写-onChange-响应事件"><a href="#编写-onChange-响应事件" class="headerlink" title="编写 onChange 响应事件"></a>编写 onChange 响应事件</h4><p>打开TodoList.js文件，然后在 button 上注册onChange事件,这里我就偷懒直接绑定this了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input value=&#123;this.props.inputValue&#125; onChange=&#123;this.inputChange.bind(this)&#125; /&gt;</span><br></pre></td></tr></table></figure><p>有了事件需要编写对应的方法,这里先写一个最简单的inputChange方法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">inputChange(e)&#123;</span><br><span class="line">    console.log(e.target.value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后到浏览器中的控制台就不再有报错，而且输入时可以打印出值，这书名我们的绑定成功了。这步完成我们要改为react-redux的了。</p><h4 id="编写DispatchToProps"><a href="#编写DispatchToProps" class="headerlink" title="编写DispatchToProps"></a>编写DispatchToProps</h4><p>要使用react-redux，我们可以编写另一个映射DispatchToProps,先看下面这段代码，你会发现有两个参数，第二个参数我们用的是null。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default connect(stateToProps,null)(TodoList);</span><br><span class="line">DispatchToProps就是要传递的第二个参数，通过这个参数才能改变store中的值。</span><br><span class="line"></span><br><span class="line">const dispatchToProps = (dispatch) =&gt;&#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">        inputChange(e)&#123;</span><br><span class="line">            console.log(e.target.value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了这个参数之后可以把响应事件改成下面的代码.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input value=&#123;this.props.inputValue&#125; onChange=&#123;this.props.inputChange&#125; /&gt;</span><br></pre></td></tr></table></figure><p>然后把connect第二个参数传递过去。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default connect(stateToProps,dispatchToProps)(TodoList);</span><br></pre></td></tr></table></figure><p>这时候原来的inputChange方法就没用了，可以删除掉。 目前整体的代码就改为下面的样子了，我们在浏览器中预览也是可以看到效果的。此步骤成功说明映射关系支持成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line">import store from <span class="string">&#x27;./store&#x27;</span></span><br><span class="line">import &#123;connect&#125; from <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"></span><br><span class="line">class TodoList extends Component &#123;</span><br><span class="line">    constructor(props)&#123;</span><br><span class="line">        super(props)</span><br><span class="line">        this.state = store.getState()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span></span>() &#123; </span><br><span class="line">        <span class="built_in">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;input value=&#123;this.props.inputValue&#125; onChange=&#123;this.props.inputChange&#125; /&gt;</span><br><span class="line">                    &lt;button&gt;提交&lt;/button&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &lt;li&gt;JSPang&lt;/li&gt;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">const stateToProps = (state)=&gt;&#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">        inputValue : state.inputValue</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const dispatchToProps = (dispatch) =&gt;&#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">        inputChange(e)&#123;</span><br><span class="line">            console.log(e.target.value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default connect(stateToProps,dispatchToProps)(TodoList);</span><br></pre></td></tr></table></figure><h3 id="派发action到store中"><a href="#派发action到store中" class="headerlink" title="派发action到store中"></a>派发action到store中</h3><p>映射关系已经做好了，接下来只要进行action的派发和reducer对业务逻辑的编写就可以了。派发action和以前的流程一样，我就直接给出代码了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const dispatchToProps = (dispatch) =&gt;&#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">        inputChange(e)&#123;</span><br><span class="line">            <span class="built_in">let</span> action = &#123;</span><br><span class="line">                <span class="built_in">type</span>:<span class="string">&#x27;change_input&#x27;</span>,</span><br><span class="line">                value:e.target.value</span><br><span class="line">            &#125;</span><br><span class="line">            dispatch(action)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>派发后就需求在reducer里边，编写对应的业务逻辑了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const defalutState = &#123;</span><br><span class="line">    inputValue : <span class="string">&#x27;jspang&#x27;</span>,</span><br><span class="line">    list :[]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">export</span> default (state = defalutState,action) =&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(action.type === <span class="string">&#x27;change_input&#x27;</span>)&#123;</span><br><span class="line">        <span class="built_in">let</span> newState = JSON.parse(JSON.stringify(state))</span><br><span class="line">        newState.inputValue = action.value</span><br><span class="line">        <span class="built_in">return</span> newState</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> state</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就算整个修改过程完成了，到浏览器中查看一下，应该就实现了改变input框的效果。这个流程你刚开始学会觉的很绕，但是你作的多了，你就会发现它很简单，就是一个模式，而且会降低程序出错的机率。建议这个流程你至少要写5遍以上，据我所知，几乎所有公司用react都会用到react-redux，所以这个流程重要性不次于Redux的流程，一定要熟练掌握。</p><h3 id="进阶-React-redux增加List数据"><a href="#进阶-React-redux增加List数据" class="headerlink" title="进阶 React-redux增加List数据"></a>进阶 React-redux增加List数据</h3><p>点击提交按钮时，可以在列表中进行增加。给 button 按钮增加点击事件 ,直接在/src/TodoList.js里的Button增加一个onClick事件，代码如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123;this.props.clickButton&#125;&gt;提交&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>注意这里依然使用的props，也就是说还需要把方法写在dispatchToProps里。我们这里先写一个测试，看看是否绑定上了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const dispatchToProps = (dispatch) =&gt;&#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">        inputChange(e)&#123;</span><br><span class="line">            <span class="built_in">let</span> action = &#123;</span><br><span class="line">                <span class="built_in">type</span>:<span class="string">&#x27;change_input&#x27;</span>,</span><br><span class="line">                value:e.target.value</span><br><span class="line">            &#125;</span><br><span class="line">            dispatch(action)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">clickButton</span></span>()&#123;</span><br><span class="line">            console.log(<span class="string">&#x27;111111111&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>写完clickButton方法后，在浏览器中预览，打开浏览器的控制台看一下结果，应该在点击时，可以看到显示111111111。 这步完成，就是用dispatch派发action了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">clickButton</span></span>()&#123;</span><br><span class="line">    <span class="built_in">let</span> action = &#123; <span class="built_in">type</span>:<span class="string">&#x27;add_item&#x27;</span> &#125;</span><br><span class="line">    dispatch(action)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写Reducer的业务逻辑,派发完成后,到Reducer编写业务逻辑，这一步和一起的操作基本一样。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">const defalutState = &#123;</span><br><span class="line">    inputValue : <span class="string">&#x27;jspang&#x27;</span>,</span><br><span class="line">    list :[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default (state = defalutState,action) =&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(action.type === <span class="string">&#x27;change_input&#x27;</span>)&#123;</span><br><span class="line">        <span class="built_in">let</span> newState = JSON.parse(JSON.stringify(state))</span><br><span class="line">        newState.inputValue = action.value</span><br><span class="line">        <span class="built_in">return</span> newState</span><br><span class="line">    &#125;</span><br><span class="line">    //----关键代码------start---------</span><br><span class="line">    <span class="keyword">if</span>(action.type === <span class="string">&#x27;add_item&#x27;</span>)&#123;</span><br><span class="line">        <span class="built_in">let</span> newState = JSON.parse(JSON.stringify(state))</span><br><span class="line">        newState.list.push(newState.inputValue)</span><br><span class="line">        newState.inputValue = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">return</span> newState</span><br><span class="line">    &#125;</span><br><span class="line">    //----关键代码------end---------</span><br><span class="line">    <span class="built_in">return</span> state</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="页面UI部分的制作"><a href="#页面UI部分的制作" class="headerlink" title="页面UI部分的制作"></a>页面UI部分的制作</h3><p>这步完成后，我们到TodoList.js中进行JSX部分的编写，编写前需要先把stateToProps的映射关系做好。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const stateToProps = (state)=&gt;&#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">        inputValue : state.inputValue,</span><br><span class="line">        list:state.list</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>有了映射关系，就可以再界面中用属性的方式，进行显示，代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        this.props.list.map((item,index)=&gt;&#123;</span><br><span class="line">            <span class="built_in">return</span> (&lt;li key=&#123;index&#125;&gt;&#123;item&#125;&lt;/li&gt;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样就实现了增加TodoList的列表项，这里给出TodoList.js的代码.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line">import store from <span class="string">&#x27;./store&#x27;</span></span><br><span class="line">import &#123;connect&#125; from <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"></span><br><span class="line">class TodoList extends Component &#123;</span><br><span class="line">    constructor(props)&#123;</span><br><span class="line">        super(props)</span><br><span class="line">        this.state = store.getState()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span></span>() &#123; </span><br><span class="line">        <span class="built_in">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;input value=&#123;this.props.inputValue&#125; onChange=&#123;this.props.inputChange&#125; /&gt;</span><br><span class="line">                    &lt;button onClick=&#123;this.props.clickButton&#125;&gt;提交&lt;/button&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        this.props.list.map((item,index)=&gt;&#123;</span><br><span class="line">                            <span class="built_in">return</span> (&lt;li key=&#123;index&#125;&gt;&#123;item&#125;&lt;/li&gt;)</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">const stateToProps = (state)=&gt;&#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">        inputValue : state.inputValue,</span><br><span class="line">        list:state.list</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const dispatchToProps = (dispatch) =&gt;&#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">        inputChange(e)&#123;</span><br><span class="line">            <span class="built_in">let</span> action = &#123;</span><br><span class="line">                <span class="built_in">type</span>:<span class="string">&#x27;change_input&#x27;</span>,</span><br><span class="line">                value:e.target.value</span><br><span class="line">            &#125;</span><br><span class="line">            dispatch(action)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">clickButton</span></span>()&#123;</span><br><span class="line">            <span class="built_in">let</span> action = &#123;</span><br><span class="line">                <span class="built_in">type</span>:<span class="string">&#x27;add_item&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">            dispatch(action)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">export</span> default connect(stateToProps,dispatchToProps)(TodoList);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>还有一个删除功能我就不浪费大家时间继续制作了，如果你自己有兴趣可以试着作一下。</p><h2 id="加餐-React-redux程序优化-完结"><a href="#加餐-React-redux程序优化-完结" class="headerlink" title="加餐-React-redux程序优化(完结)"></a>加餐-React-redux程序优化(完结)</h2><p>这节课把现在写的代码优化一下，作程序的都应该有一些代码洁癖，才能写出让人称赞的程序。写完业务逻辑后作代码优化，也是程序员的本质工作之一。 现在代码中有好几处this.props都是重复的，这时候就可以用javascript的解构赋值方法，来精简代码。修改TodoList.js中的Render函数，把原来带代码修改为下面的代码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">render</span></span>() &#123; </span><br><span class="line">    <span class="built_in">let</span> &#123;inputValue ,inputChange,clickButton,list&#125; = this.props;</span><br><span class="line">    <span class="built_in">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;input value=&#123;inputValue&#125; onChange=&#123;inputChange&#125; /&gt;</span><br><span class="line">                &lt;button onClick=&#123;clickButton&#125;&gt;提交&lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    list.map((item,index)=&gt;&#123;</span><br><span class="line">                        <span class="built_in">return</span> (&lt;li key=&#123;index&#125;&gt;&#123;item&#125;&lt;/li&gt;)</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="把TodoList改为UI组件-提高性能"><a href="#把TodoList改为UI组件-提高性能" class="headerlink" title="把TodoList改为UI组件-提高性能"></a>把TodoList改为UI组件-提高性能</h3><p>可以看到，现在的TodoList组件里没有任何的业务逻辑，只有一个Render方法，这时候就可以把它改为UI组件(无状态组件)，UI组件就是一个方法，减少很多冗余操作，从而提高程序运行性能。这时候重新声明一个TodoList的变量，然后把render函数里的东西复制过来，只要稍加修改，就可以得到下面的代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const TodoList =(props)=&gt;&#123;</span><br><span class="line">    <span class="built_in">let</span> &#123;inputValue ,inputChange,clickButton,list&#125; = props; // 粘贴过来后，此处要进行修改</span><br><span class="line">    <span class="built_in">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;input value=&#123;inputValue&#125; onChange=&#123;inputChange&#125; /&gt;</span><br><span class="line">                &lt;button onClick=&#123;clickButton&#125;&gt;提交&lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    list.map((item,index)=&gt;&#123;</span><br><span class="line">                        <span class="built_in">return</span> (&lt;li key=&#123;index&#125;&gt;&#123;item&#125;&lt;/li&gt;)</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码写完后，我们删除一些不用的引入，然后就可以到浏览器中进行预览了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import React from <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line">import &#123;connect&#125; from <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>目前TodoList.js的所有代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">import React from <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line">import &#123;connect&#125; from <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const TodoList =(props)=&gt;&#123;</span><br><span class="line">    <span class="built_in">let</span> &#123;inputValue ,inputChange,clickButton,list&#125; = props; // 粘贴过来后，此处要进行修改</span><br><span class="line">    <span class="built_in">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;input value=&#123;inputValue&#125; onChange=&#123;inputChange&#125; /&gt;</span><br><span class="line">                &lt;button onClick=&#123;clickButton&#125;&gt;提交&lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    list.map((item,index)=&gt;&#123;</span><br><span class="line">                        <span class="built_in">return</span> (&lt;li key=&#123;index&#125;&gt;&#123;item&#125;&lt;/li&gt;)</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const stateToProps = (state)=&gt;&#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">        inputValue : state.inputValue,</span><br><span class="line">        list:state.list</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const dispatchToProps = (dispatch) =&gt;&#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">        inputChange(e)&#123;</span><br><span class="line">            <span class="built_in">let</span> action = &#123;</span><br><span class="line">                <span class="built_in">type</span>:<span class="string">&#x27;change_input&#x27;</span>,</span><br><span class="line">                value:e.target.value</span><br><span class="line">            &#125;</span><br><span class="line">            dispatch(action)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">clickButton</span></span>()&#123;</span><br><span class="line">            <span class="built_in">let</span> action = &#123;</span><br><span class="line">                <span class="built_in">type</span>:<span class="string">&#x27;add_item&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">            dispatch(action)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">export</span> default connect(stateToProps,dispatchToProps)(TodoList);</span><br></pre></td></tr></table></figure><p>那我们反过来，再来理解一下最后一句话代码的意思。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default connect(stateToProps,dispatchToProps)(TodoList);</span><br></pre></td></tr></table></figure><p>connect的作用是把UI组件（无状态组件）和业务逻辑代码的分开，然后通过connect再链接到一起，让代码更加清晰和易于维护。这也是React-Redux最大的有点。Redux的教程和视频到这里就结束了，下套课程我会讲解React-router，请小伙伴们持续关注博客.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;react-redux编写TodoList&quot;&gt;&lt;a href=&quot;#react-redux编写TodoList&quot; class=&quot;headerlink&quot; title=&quot;react-redux编写TodoList&quot;&gt;&lt;/a&gt;react-redux编写TodoList&lt;/</summary>
      
    
    
    
    <category term="react学习" scheme="https://hard-workingrookie.github.io/categories/react%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="react" scheme="https://hard-workingrookie.github.io/tags/react/"/>
    
    <category term="react-redux" scheme="https://hard-workingrookie.github.io/tags/react-redux/"/>
    
  </entry>
  
  <entry>
    <title>使用React Hooks构建电影搜索应用程序</title>
    <link href="https://hard-workingrookie.github.io/2020/08/26/react-hook%E5%AD%A6%E4%B9%A0/"/>
    <id>https://hard-workingrookie.github.io/2020/08/26/react-hook%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-08-26T09:30:28.000Z</published>
    <updated>2020-08-27T07:32:53.175Z</updated>
    
    <content type="html"><![CDATA[<h2 id="最终完成效果"><a href="#最终完成效果" class="headerlink" title="最终完成效果"></a>最终完成效果</h2><img src= "/img/loading.gif" data-lazy-src="https://cdn-media-1.freecodecamp.org/images/kbYsxsxb2D7mBhdlEmUrpMhRmOcQoR79vtT1" width="50%"><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create-react-app hooked</span><br></pre></td></tr></table></figure><p>  hooked是APP名字</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g create-react-app</span><br></pre></td></tr></table></figure><p> 如果没有安装create-react-app，请输入这段</p><p> 完成后，我们应该有一个名为“ Hooked”的文件夹，其目录结构如下所示：<br><img src= "/img/loading.gif" data-lazy-src="https://cdn-media-1.freecodecamp.org/images/XVEd05SM1ul1KYZ-HWoY3-06cFeeyZS1HemM" width="50%"></p><p> 在此应用程序中，我们将有4个组件，因此让我们概述每个组件及其功能：</p><ul><li><p>App.js —它将是其他3的父组件。它还将包含处理API请求的函数，并且具有在组件的初始呈现期间调用API的函数。</p></li><li><p>Header.js —一个简单的组件，可呈现应用程序标题并接受标题道具</p></li><li><p>Movie.js —渲染每部电影。电影对象只是作为道具传递给它的。</p></li><li><p>Search.js —包含带有输入元素和搜索按钮的表单，包含处理输入元素并重置字段的函数，还包含调用作为道具传递给它的搜索函数的函数。</p><p>让我们开始在src目录中创建一个新文件夹并将其命名，components因为这是我们所有组件所在的位置。然后，我们将App.js文件移动到该文件夹​​中。然后，我们将创建Header组件。创建一个名为的文件，Header.js并向其中添加以下代码：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import React from <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line">const Header = (props) =&gt; &#123;</span><br><span class="line">  <span class="built_in">return</span> (</span><br><span class="line">    &lt;header className=<span class="string">&quot;App-header&quot;</span>&gt;</span><br><span class="line">      &lt;h2&gt;&#123;props.text&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default Header;</span><br></pre></td></tr></table></figure><p> 这个组件不需要太多解释-它基本上是一个功能组件，header使用text道具呈现标签。让我们不要忘记更新index.js文件中的导入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import React from <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line">import ReactDOM from <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line">import <span class="string">&#x27;./index.css&#x27;</span>;</span><br><span class="line">import App from <span class="string">&#x27;./components/App&#x27;</span>; // this changed</span><br><span class="line">import * as serviceWorker from <span class="string">&#x27;./serviceWorker&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;App /&gt;, document.getElementById(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line"></span><br><span class="line">// If you want your app to work offline and load faster, you can change</span><br><span class="line">// unregister() to register() below. Note this comes with some pitfalls.</span><br><span class="line">// Learn more about service workers: http://bit.ly/CRA-PWA</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">serviceWorker.unregister();</span><br></pre></td></tr></table></figure><h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><p> 并App.css使用以下样式（不是必填）更新我们的样式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">.App &#123;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.App-header &#123;</span><br><span class="line">  background-color: <span class="comment">#282c34;</span></span><br><span class="line">  height: 70px;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: column;</span><br><span class="line">  align-items: center;</span><br><span class="line">  justify-content: center;</span><br><span class="line">  font-size: calc(10px + 2vmin);</span><br><span class="line">  color: white;</span><br><span class="line">  padding: 20px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.spinner &#123;</span><br><span class="line">  height: 80px;</span><br><span class="line">  margin: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.App-intro &#123;</span><br><span class="line">  font-size: large;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* new css <span class="keyword">for</span> movie component */</span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.movies &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-wrap: wrap;</span><br><span class="line">  flex-direction: row;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.App-header h2 &#123;</span><br><span class="line">  margin: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.add-movies &#123;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.add-movies button &#123;</span><br><span class="line">  font-size: 16px;</span><br><span class="line">  padding: 8px;</span><br><span class="line">  margin: 0 10px 30px 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.movie &#123;</span><br><span class="line">  padding: 5px 25px 10px 25px;</span><br><span class="line">  max-width: 25%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.errorMessage &#123;</span><br><span class="line">  margin: auto;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">  color: rgb(161, 15, 15);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.search &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: row;</span><br><span class="line">  flex-wrap: wrap;</span><br><span class="line">  justify-content: center;</span><br><span class="line">  margin-top: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">input[<span class="built_in">type</span>=<span class="string">&quot;submit&quot;</span>] &#123;</span><br><span class="line">  padding: 5px;</span><br><span class="line">  background-color: transparent;</span><br><span class="line">  color: black;</span><br><span class="line">  border: 1px solid black;</span><br><span class="line">  width: 80px;</span><br><span class="line">  margin-left: 5px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">input[<span class="built_in">type</span>=<span class="string">&quot;submit&quot;</span>]:hover &#123;</span><br><span class="line">  background-color: <span class="comment">#282c34;</span></span><br><span class="line">  color: antiquewhite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.search &gt; input[<span class="built_in">type</span>=<span class="string">&quot;text&quot;</span>]&#123;</span><br><span class="line">  width: 40%;</span><br><span class="line">  min-width: 170px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@media screen and (min-width: 694px) and (max-width: 915px) &#123;</span><br><span class="line">  .movie &#123;</span><br><span class="line">    max-width: 33%;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@media screen and (min-width: 652px) and (max-width: 693px) &#123;</span><br><span class="line">  .movie &#123;</span><br><span class="line">    max-width: 50%;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@media screen and (max-width: 651px) &#123;</span><br><span class="line">  .movie &#123;</span><br><span class="line">    max-width: 100%;</span><br><span class="line">    margin: auto;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 一旦有了这些，下一步就是创建Movie组件。我们将通过创建一个名为的文件Movie.js并添加以下代码来做到这一点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import React from <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line">const DEFAULT_PLACEHOLDER_IMAGE =</span><br><span class="line">  <span class="string">&quot;https://m.media-amazon.com/images/M/MV5BMTczNTI2ODUwOF5BMl5BanBnXkFtZTcwMTU0NTIzMw@@._V1_SX300.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const Movie = (&#123; movie &#125;) =&gt; &#123;</span><br><span class="line">  const poster =</span><br><span class="line">    movie.Poster === <span class="string">&quot;N/A&quot;</span> ? DEFAULT_PLACEHOLDER_IMAGE : movie.Poster;</span><br><span class="line">  <span class="built_in">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">&quot;movie&quot;</span>&gt;</span><br><span class="line">      &lt;h2&gt;&#123;movie.Title&#125;&lt;/h2&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;img</span><br><span class="line">          width=<span class="string">&quot;200&quot;</span></span><br><span class="line">          alt=&#123;`The movie titled: <span class="variable">$&#123;movie.Title&#125;</span>`&#125;</span><br><span class="line">          src=&#123;poster&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;p&gt;(&#123;movie.Year&#125;)&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default Movie;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 这需要更多的解释，但它只是呈现电影标题，图像和年份的表示性组件（没有任何内部状态）。这样做的原因DEFAULT_PLACEHOLDER_IMAGE是因为从API检索的某些电影没有图像，因此我们将呈现一个占位符图像而不是断开的链接。</p><p> 现在，我们将创建Search组件。这部分令人兴奋，因为在过去，为了处理内部状态，我们将不得不创建一个类组件……但现在不再了！因为使用钩子，我们可以使功能组件处理其自身的内部状态。让我们创建一个名为的Search.js文件，然后在该文件中添加以下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useState &#125; from <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const Search = (props) =&gt; &#123;</span><br><span class="line">  const [searchValue, setSearchValue] = useState(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  const handleSearchInputChanges = (e) =&gt; &#123;</span><br><span class="line">    setSearchValue(e.target.value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  const resetInputField = () =&gt; &#123;</span><br><span class="line">    setSearchValue(<span class="string">&quot;&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  const callSearchFunction = (e) =&gt; &#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    props.search(searchValue);</span><br><span class="line">    resetInputField();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">return</span> (</span><br><span class="line">      &lt;form className=<span class="string">&quot;search&quot;</span>&gt;</span><br><span class="line">        &lt;input</span><br><span class="line">          value=&#123;searchValue&#125;</span><br><span class="line">          onChange=&#123;handleSearchInputChanges&#125;</span><br><span class="line">          <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span></span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;input onClick=&#123;callSearchFunction&#125; <span class="built_in">type</span>=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;SEARCH&quot;</span> /&gt;</span><br><span class="line">      &lt;/form&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default Search;</span><br></pre></td></tr></table></figure><p> 这太令人兴奋了！！！我确定您已经看到了我们将要使用的第一个hooks API，它被称为useState。顾名思义，它使我们可以将React状态添加到功能组件中。所述useState钩接受一个参数，它是在初始状态，然后它返回一个包含当前的状态（相当于一个数组this.state为类组件）和一个函数进行更新（相当于this.setState）。</p><p> 在本例中，我们将当前状态作为搜索输入字段的值。调用onChange事件时，将handleSearchInputChanges调用该函数，该函数将使用新值调用状态更新函数。该resetInputField函数基本上setSearchValue用空字符串调用状态更新函数（），以清除输入字段。查看此内容以了解有关useStateAPI的更多信息。</p><h2 id="App-js"><a href="#App-js" class="headerlink" title="App.js"></a>App.js</h2><p> 最后，我们将App.js使用以下代码更新文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useState, useEffect &#125; from <span class="string">&quot;react&quot;</span>;</span><br><span class="line">import <span class="string">&quot;../App.css&quot;</span>;</span><br><span class="line">import Header from <span class="string">&quot;./Header&quot;</span>;</span><br><span class="line">import Movie from <span class="string">&quot;./Movie&quot;</span>;</span><br><span class="line">import Search from <span class="string">&quot;./Search&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const MOVIE_API_URL = <span class="string">&quot;https://www.omdbapi.com/?s=man&amp;apikey=4a3b711b&quot;</span>; // you should replace this with yours</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const App = () =&gt; &#123;</span><br><span class="line">  const [loading, setLoading] = useState(<span class="literal">true</span>);</span><br><span class="line">  const [movies, setMovies] = useState([]);</span><br><span class="line">  const [errorMessage, setErrorMessage] = useState(null);</span><br><span class="line"></span><br><span class="line">    useEffect(() =&gt; &#123;</span><br><span class="line">    fetch(MOVIE_API_URL)</span><br><span class="line">      .<span class="keyword">then</span>(response =&gt; response.json())</span><br><span class="line">      .<span class="keyword">then</span>(jsonResponse =&gt; &#123;</span><br><span class="line">        setMovies(jsonResponse.Search);</span><br><span class="line">        setLoading(<span class="literal">false</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">    const search = searchValue =&gt; &#123;</span><br><span class="line">    setLoading(<span class="literal">true</span>);</span><br><span class="line">    setErrorMessage(null);</span><br><span class="line"></span><br><span class="line">    fetch(`https://www.omdbapi.com/?s=<span class="variable">$&#123;searchValue&#125;</span>&amp;apikey=4a3b711b`)</span><br><span class="line">      .<span class="keyword">then</span>(response =&gt; response.json())</span><br><span class="line">      .<span class="keyword">then</span>(jsonResponse =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (jsonResponse.Response === <span class="string">&quot;True&quot;</span>) &#123;</span><br><span class="line">          setMovies(jsonResponse.Search);</span><br><span class="line">          setLoading(<span class="literal">false</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          setErrorMessage(jsonResponse.Error);</span><br><span class="line">          setLoading(<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">return</span> (</span><br><span class="line">     &lt;div className=<span class="string">&quot;App&quot;</span>&gt;</span><br><span class="line">      &lt;Header text=<span class="string">&quot;HOOKED&quot;</span> /&gt;</span><br><span class="line">      &lt;Search search=&#123;search&#125; /&gt;</span><br><span class="line">      &lt;p className=<span class="string">&quot;App-intro&quot;</span>&gt;Sharing a few of our favourite movies&lt;/p&gt;</span><br><span class="line">      &lt;div className=<span class="string">&quot;movies&quot;</span>&gt;</span><br><span class="line">        &#123;loading &amp;&amp; !errorMessage ? (</span><br><span class="line">         &lt;span&gt;loading...&lt;/span&gt;</span><br><span class="line">         ) : errorMessage ? (</span><br><span class="line">          &lt;div className=<span class="string">&quot;errorMessage&quot;</span>&gt;&#123;errorMessage&#125;&lt;/div&gt;</span><br><span class="line">        ) : (</span><br><span class="line">          movies.map((movie, index) =&gt; (</span><br><span class="line">            &lt;Movie key=&#123;`<span class="variable">$&#123;index&#125;</span>-<span class="variable">$&#123;movie.Title&#125;</span>`&#125; movie=&#123;movie&#125; /&gt;</span><br><span class="line">          ))</span><br><span class="line">        )&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default App;</span><br></pre></td></tr></table></figure><p> 让我们看一下代码：我们正在使用3个useState函数，所以是的，我们可以useState在一个组件中拥有多个函数。第一个用于处理加载状态（将loading设置为true时，它将呈现“ loading…”文本）。第二个用于处理从服务器获取的电影数组。最后，第三个用于处理发出API请求时可能发生的任何错误。</p><p> 在那之后，我们遇到了我们在应用程序中使用的第二个钩子API：useEffect钩子。该钩子基本上使您可以在功能组件中执行副作用。所谓副作用，是指诸如数据获取，订阅和手动DOM操作之类的事情。关于这个钩子的最好的部分是来自React官方文档的引言：</p><p> 如果你熟悉阵营类生命周期方法，你能想到的useEffect钩。因为componentDidMount，componentDidUpdate和componentWillUnmount结合。<br> 这是因为useEffect在第一个渲染（componentDidMount）之后以及每次更新（componentDidUpdate）之后都会被调用。</p><p> 我知道您可能想知道这与componentDidMount每次更新后都调用它有何相似之处。好吧，这是因为该useEffect函数接受两个参数，一个是您要运行的函数，另一个是数组。在该数组中，我们只是传入一个值，该值告诉React如果传入的值未更改，则跳过应用效果。</p><p> 根据文档，这类似于我们在条件中添加条件语句时的情况componentDidUpdate：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// <span class="keyword">for</span> class components</span><br><span class="line">componentDidUpdate(prevProps, prevState) &#123;</span><br><span class="line">  <span class="keyword">if</span> (prevState.count !== this.state.count) &#123;</span><br><span class="line">    document.title = `You clicked <span class="variable">$&#123;this.state.count&#125;</span> <span class="built_in">times</span>`;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// using hooks it will become</span><br><span class="line">useEffect(() =&gt; &#123;</span><br><span class="line">  document.title = `You clicked <span class="variable">$&#123;count&#125;</span> <span class="built_in">times</span>`;</span><br><span class="line">&#125;, [count]); // Only re-run the effect <span class="keyword">if</span> count changes</span><br></pre></td></tr></table></figure><p> 在我们的例子中，我们没有任何变化的值，因此我们可以传入一个空数组，该数组告诉React这个效果应该被调用一次。</p><p> 如您所见，我们有3个useState功能有些相关，应该可以将它们以某种方式进行组合。值得庆幸的是，React团队为我们提供了服务，因为他们制作了一个有助于此操作的钩子-将该钩子称为useReducer。让我们将App组件转换为使用新的钩子，这样我们App.js现在将如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useReducer, useEffect &#125; from <span class="string">&quot;react&quot;</span>;</span><br><span class="line">import <span class="string">&quot;../App.css&quot;</span>;</span><br><span class="line">import Header from <span class="string">&quot;./Header&quot;</span>;</span><br><span class="line">import Movie from <span class="string">&quot;./Movie&quot;</span>;</span><br><span class="line">import Search from <span class="string">&quot;./Search&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const MOVIE_API_URL = <span class="string">&quot;https://www.omdbapi.com/?s=man&amp;apikey=4a3b711b&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const initialState = &#123;</span><br><span class="line">  loading: <span class="literal">true</span>,</span><br><span class="line">  movies: [],</span><br><span class="line">  errorMessage: null</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const reducer = (state, action) =&gt; &#123;</span><br><span class="line">  switch (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;SEARCH_MOVIES_REQUEST&quot;</span>:</span><br><span class="line">      <span class="built_in">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        loading: <span class="literal">true</span>,</span><br><span class="line">        errorMessage: null</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;SEARCH_MOVIES_SUCCESS&quot;</span>:</span><br><span class="line">      <span class="built_in">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        loading: <span class="literal">false</span>,</span><br><span class="line">        movies: action.payload</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;SEARCH_MOVIES_FAILURE&quot;</span>:</span><br><span class="line">      <span class="built_in">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        loading: <span class="literal">false</span>,</span><br><span class="line">        errorMessage: action.error</span><br><span class="line">      &#125;;</span><br><span class="line">    default:</span><br><span class="line">      <span class="built_in">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const App = () =&gt; &#123;</span><br><span class="line">  const [state, dispatch] = useReducer(reducer, initialState);</span><br><span class="line"></span><br><span class="line">    useEffect(() =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">        fetch(MOVIE_API_URL)</span><br><span class="line">            .<span class="keyword">then</span>(response =&gt; response.json())</span><br><span class="line">            .<span class="keyword">then</span>(jsonResponse =&gt; &#123;</span><br><span class="line">        </span><br><span class="line">            dispatch(&#123;</span><br><span class="line">                <span class="built_in">type</span>: <span class="string">&quot;SEARCH_MOVIES_SUCCESS&quot;</span>,</span><br><span class="line">                payload: jsonResponse.Search</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">    const search = searchValue =&gt; &#123;</span><br><span class="line">    dispatch(&#123;</span><br><span class="line">      <span class="built_in">type</span>: <span class="string">&quot;SEARCH_MOVIES_REQUEST&quot;</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">        fetch(`https://www.omdbapi.com/?s=<span class="variable">$&#123;searchValue&#125;</span>&amp;apikey=4a3b711b`)</span><br><span class="line">      .<span class="keyword">then</span>(response =&gt; response.json())</span><br><span class="line">      .<span class="keyword">then</span>(jsonResponse =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (jsonResponse.Response === <span class="string">&quot;True&quot;</span>) &#123;</span><br><span class="line">          dispatch(&#123;</span><br><span class="line">                <span class="built_in">type</span>: <span class="string">&quot;SEARCH_MOVIES_SUCCESS&quot;</span>,</span><br><span class="line">                payload: jsonResponse.Search</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          dispatch(&#123;</span><br><span class="line">                <span class="built_in">type</span>: <span class="string">&quot;SEARCH_MOVIES_FAILURE&quot;</span>,</span><br><span class="line">                error: jsonResponse.Error</span><br><span class="line">          &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">    const &#123; movies, errorMessage, loading &#125; = state;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">&quot;App&quot;</span>&gt;</span><br><span class="line">      &lt;Header text=<span class="string">&quot;HOOKED&quot;</span> /&gt;</span><br><span class="line">      &lt;Search search=&#123;search&#125; /&gt;</span><br><span class="line">      &lt;p className=<span class="string">&quot;App-intro&quot;</span>&gt;Sharing a few of our favourite movies&lt;/p&gt;</span><br><span class="line">      &lt;div className=<span class="string">&quot;movies&quot;</span>&gt;</span><br><span class="line">        &#123;loading &amp;&amp; !errorMessage ? (</span><br><span class="line">          &lt;span&gt;loading... &lt;/span&gt;</span><br><span class="line">        ) : errorMessage ? (</span><br><span class="line">          &lt;div className=<span class="string">&quot;errorMessage&quot;</span>&gt;&#123;errorMessage&#125;&lt;/div&gt;</span><br><span class="line">        ) : (</span><br><span class="line">          movies.map((movie, index) =&gt; (</span><br><span class="line">            &lt;Movie key=&#123;`<span class="variable">$&#123;index&#125;</span>-<span class="variable">$&#123;movie.Title&#125;</span>`&#125; movie=&#123;movie&#125; /&gt;</span><br><span class="line">          ))</span><br><span class="line">        )&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default App;</span><br></pre></td></tr></table></figure><p> 因此，如果一切顺利，那么我们应该不会看到应用程序行为的任何变化。现在让我们看一下useReducer挂钩的工作原理。</p><p> 该挂钩具有3个参数，但在我们的用例中，我们将仅使用2个。典型的useReducer挂钩如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const [state, dispatch] = useReducer(</span><br><span class="line">    reducer,</span><br><span class="line">    initialState</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p> 该reducer参数类似于我们在Redux中使用的参数，如下所示：<br>Redux中使用的参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">const reducer = (state, action) =&gt; &#123;</span><br><span class="line">  switch (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;SEARCH_MOVIES_REQUEST&quot;</span>:</span><br><span class="line">      <span class="built_in">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        loading: <span class="literal">true</span>,</span><br><span class="line">        errorMessage: null</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;SEARCH_MOVIES_SUCCESS&quot;</span>:</span><br><span class="line">      <span class="built_in">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        loading: <span class="literal">false</span>,</span><br><span class="line">        movies: action.payload</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;SEARCH_MOVIES_FAILURE&quot;</span>:</span><br><span class="line">      <span class="built_in">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        loading: <span class="literal">false</span>,</span><br><span class="line">        errorMessage: action.error</span><br><span class="line">      &#125;;</span><br><span class="line">    default:</span><br><span class="line">      <span class="built_in">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 精简器接受initialState和操作，因此精简器根据操作类型返回一个新的状态对象。例如，如果调度的操作类型为SEARCH_MOVIES_REQUEST，则状态将使用新对象更新，其中for的loading值为true，并且errorMessage为null。</p><p> 要注意的另一件事是，在我们的中useEffect，我们现在正在调度一个带有有效负载的操作，作为从服务器获取的电影数组。此外，在我们的search职能中，我们实际上是在分派三个不同的动作。</p><p> 一种动作是SEARCH_MOVIES_REQUEST更新我们的状态对象make 的动作loading=true and errorMessage = null。<br> 如果请求成功，那么我们将分派另一个操作，该操作的类型SEARCH_MOVIES_SUCCESS 将更新状态对象，从而loading=false and movies = action.payload使有效负载是从OMDB获取的电影数组。<br> 如果有错误，我们反而会派遣与类型不同的操作SEARCH_MOVIES_FAILURE，更新我们的状态对象制作loading=false and errorMessage = action.error，其中action.error从服务器得到该错误消息。<br> 要了解有关useReducer钩子的更多信息，请查看官方文档。</p><p>这是本文的GitHub存储库的链接。</p><p><a href="https://github.com/Hard-workingrookie/hooks-movie-app">github</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;最终完成效果&quot;&gt;&lt;a href=&quot;#最终完成效果&quot; class=&quot;headerlink&quot; title=&quot;最终完成效果&quot;&gt;&lt;/a&gt;最终完成效果&lt;/h2&gt;&lt;img src= &quot;/img/loading.gif&quot; data-lazy-src=&quot;https://cdn-m</summary>
      
    
    
    
    <category term="react学习" scheme="https://hard-workingrookie.github.io/categories/react%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="react" scheme="https://hard-workingrookie.github.io/tags/react/"/>
    
    <category term="React-Hook" scheme="https://hard-workingrookie.github.io/tags/React-Hook/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://hard-workingrookie.github.io/2020/08/26/hello-world/"/>
    <id>https://hard-workingrookie.github.io/2020/08/26/hello-world/</id>
    <published>2020-08-26T07:52:28.766Z</published>
    <updated>2020-08-26T09:35:15.782Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="默认分类" scheme="https://hard-workingrookie.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
    <category term="test" scheme="https://hard-workingrookie.github.io/tags/test/"/>
    
  </entry>
  
</feed>
