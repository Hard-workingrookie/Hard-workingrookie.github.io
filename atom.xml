<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王美的个人博客</title>
  
  
  <link href="https://hard-workingrookie.github.io/atom.xml" rel="self"/>
  
  <link href="https://hard-workingrookie.github.io/"/>
  <updated>2020-08-26T11:49:56.279Z</updated>
  <id>https://hard-workingrookie.github.io/</id>
  
  <author>
    <name>王美</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用React Hooks构建电影搜索应用程序</title>
    <link href="https://hard-workingrookie.github.io/2020/08/26/my-first-blog/"/>
    <id>https://hard-workingrookie.github.io/2020/08/26/my-first-blog/</id>
    <published>2020-08-26T09:30:28.000Z</published>
    <updated>2020-08-26T11:49:56.279Z</updated>
    
    <content type="html"><![CDATA[<h3 id="最终完成效果"><a href="#最终完成效果" class="headerlink" title="最终完成效果"></a>最终完成效果</h3><img src= "/img/loading.gif" data-lazy-src="https://cdn-media-1.freecodecamp.org/images/kbYsxsxb2D7mBhdlEmUrpMhRmOcQoR79vtT1" width="50%"><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create-react-app hooked</span><br></pre></td></tr></table></figure><p>  hooked是APP名字<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g create-react-app</span><br></pre></td></tr></table></figure><br> 如果没有安装create-react-app，请输入这段</p><p> 完成后，我们应该有一个名为“ Hooked”的文件夹，其目录结构如下所示：<br><img src= "/img/loading.gif" data-lazy-src="https://cdn-media-1.freecodecamp.org/images/XVEd05SM1ul1KYZ-HWoY3-06cFeeyZS1HemM" width="50%"></p><p> 在此应用程序中，我们将有4个组件，因此让我们概述每个组件及其功能：</p><ul><li><p>App.js —它将是其他3的父组件。它还将包含处理API请求的函数，并且具有在组件的初始呈现期间调用API的函数。</p></li><li><p>Header.js —一个简单的组件，可呈现应用程序标题并接受标题道具</p></li><li><p>Movie.js —渲染每部电影。电影对象只是作为道具传递给它的。</p></li><li><p>Search.js —包含带有输入元素和搜索按钮的表单，包含处理输入元素并重置字段的函数，还包含调用作为道具传递给它的搜索函数的函数。</p><p>让我们开始在src目录中创建一个新文件夹并将其命名，components因为这是我们所有组件所在的位置。然后，我们将App.js文件移动到该文件夹​​中。然后，我们将创建Header组件。创建一个名为的文件，Header.js并向其中添加以下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import React from <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line">const Header = (props) =&gt; &#123;</span><br><span class="line">  <span class="built_in">return</span> (</span><br><span class="line">    &lt;header className=<span class="string">&quot;App-header&quot;</span>&gt;</span><br><span class="line">      &lt;h2&gt;&#123;props.text&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default Header;</span><br></pre></td></tr></table></figure><p>这个组件不需要太多解释-它基本上是一个功能组件，header使用text道具呈现标签。让我们不要忘记更新index.js文件中的导入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import React from <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line">import ReactDOM from <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line">import <span class="string">&#x27;./index.css&#x27;</span>;</span><br><span class="line">import App from <span class="string">&#x27;./components/App&#x27;</span>; // this changed</span><br><span class="line">import * as serviceWorker from <span class="string">&#x27;./serviceWorker&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;App /&gt;, document.getElementById(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line"></span><br><span class="line">// If you want your app to work offline and load faster, you can change</span><br><span class="line">// unregister() to register() below. Note this comes with some pitfalls.</span><br><span class="line">// Learn more about service workers: http://bit.ly/CRA-PWA</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">serviceWorker.unregister();</span><br></pre></td></tr></table></figure><h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><p>并App.css使用以下样式（不是必填）更新我们的样式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">.App &#123;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.App-header &#123;</span><br><span class="line">  background-color: <span class="comment">#282c34;</span></span><br><span class="line">  height: 70px;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: column;</span><br><span class="line">  align-items: center;</span><br><span class="line">  justify-content: center;</span><br><span class="line">  font-size: calc(10px + 2vmin);</span><br><span class="line">  color: white;</span><br><span class="line">  padding: 20px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.spinner &#123;</span><br><span class="line">  height: 80px;</span><br><span class="line">  margin: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.App-intro &#123;</span><br><span class="line">  font-size: large;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* new css <span class="keyword">for</span> movie component */</span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.movies &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-wrap: wrap;</span><br><span class="line">  flex-direction: row;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.App-header h2 &#123;</span><br><span class="line">  margin: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.add-movies &#123;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.add-movies button &#123;</span><br><span class="line">  font-size: 16px;</span><br><span class="line">  padding: 8px;</span><br><span class="line">  margin: 0 10px 30px 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.movie &#123;</span><br><span class="line">  padding: 5px 25px 10px 25px;</span><br><span class="line">  max-width: 25%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.errorMessage &#123;</span><br><span class="line">  margin: auto;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">  color: rgb(161, 15, 15);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.search &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: row;</span><br><span class="line">  flex-wrap: wrap;</span><br><span class="line">  justify-content: center;</span><br><span class="line">  margin-top: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">input[<span class="built_in">type</span>=<span class="string">&quot;submit&quot;</span>] &#123;</span><br><span class="line">  padding: 5px;</span><br><span class="line">  background-color: transparent;</span><br><span class="line">  color: black;</span><br><span class="line">  border: 1px solid black;</span><br><span class="line">  width: 80px;</span><br><span class="line">  margin-left: 5px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">input[<span class="built_in">type</span>=<span class="string">&quot;submit&quot;</span>]:hover &#123;</span><br><span class="line">  background-color: <span class="comment">#282c34;</span></span><br><span class="line">  color: antiquewhite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.search &gt; input[<span class="built_in">type</span>=<span class="string">&quot;text&quot;</span>]&#123;</span><br><span class="line">  width: 40%;</span><br><span class="line">  min-width: 170px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@media screen and (min-width: 694px) and (max-width: 915px) &#123;</span><br><span class="line">  .movie &#123;</span><br><span class="line">    max-width: 33%;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@media screen and (min-width: 652px) and (max-width: 693px) &#123;</span><br><span class="line">  .movie &#123;</span><br><span class="line">    max-width: 50%;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@media screen and (max-width: 651px) &#123;</span><br><span class="line">  .movie &#123;</span><br><span class="line">    max-width: 100%;</span><br><span class="line">    margin: auto;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一旦有了这些，下一步就是创建Movie组件。我们将通过创建一个名为的文件Movie.js并添加以下代码来做到这一点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import React from <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line">const DEFAULT_PLACEHOLDER_IMAGE =</span><br><span class="line">  <span class="string">&quot;https://m.media-amazon.com/images/M/MV5BMTczNTI2ODUwOF5BMl5BanBnXkFtZTcwMTU0NTIzMw@@._V1_SX300.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const Movie = (&#123; movie &#125;) =&gt; &#123;</span><br><span class="line">  const poster =</span><br><span class="line">    movie.Poster === <span class="string">&quot;N/A&quot;</span> ? DEFAULT_PLACEHOLDER_IMAGE : movie.Poster;</span><br><span class="line">  <span class="built_in">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">&quot;movie&quot;</span>&gt;</span><br><span class="line">      &lt;h2&gt;&#123;movie.Title&#125;&lt;/h2&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;img</span><br><span class="line">          width=<span class="string">&quot;200&quot;</span></span><br><span class="line">          alt=&#123;`The movie titled: <span class="variable">$&#123;movie.Title&#125;</span>`&#125;</span><br><span class="line">          src=&#123;poster&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;p&gt;(&#123;movie.Year&#125;)&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default Movie;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这需要更多的解释，但它只是呈现电影标题，图像和年份的表示性组件（没有任何内部状态）。这样做的原因DEFAULT_PLACEHOLDER_IMAGE是因为从API检索的某些电影没有图像，因此我们将呈现一个占位符图像而不是断开的链接。</p><p>现在，我们将创建Search组件。这部分令人兴奋，因为在过去，为了处理内部状态，我们将不得不创建一个类组件……但现在不再了！因为使用钩子，我们可以使功能组件处理其自身的内部状态。让我们创建一个名为的Search.js文件，然后在该文件中添加以下代码：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useState &#125; from <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const Search = (props) =&gt; &#123;</span><br><span class="line">  const [searchValue, setSearchValue] = useState(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  const handleSearchInputChanges = (e) =&gt; &#123;</span><br><span class="line">    setSearchValue(e.target.value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  const resetInputField = () =&gt; &#123;</span><br><span class="line">    setSearchValue(<span class="string">&quot;&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  const callSearchFunction = (e) =&gt; &#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    props.search(searchValue);</span><br><span class="line">    resetInputField();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">return</span> (</span><br><span class="line">      &lt;form className=<span class="string">&quot;search&quot;</span>&gt;</span><br><span class="line">        &lt;input</span><br><span class="line">          value=&#123;searchValue&#125;</span><br><span class="line">          onChange=&#123;handleSearchInputChanges&#125;</span><br><span class="line">          <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span></span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;input onClick=&#123;callSearchFunction&#125; <span class="built_in">type</span>=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;SEARCH&quot;</span> /&gt;</span><br><span class="line">      &lt;/form&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default Search;</span><br></pre></td></tr></table></figure><p> 这太令人兴奋了！！！我确定您已经看到了我们将要使用的第一个hooks API，它被称为useState。顾名思义，它使我们可以将React状态添加到功能组件中。所述useState钩接受一个参数，它是在初始状态，然后它返回一个包含当前的状态（相当于一个数组this.state为类组件）和一个函数进行更新（相当于this.setState）。</p><p> 在本例中，我们将当前状态作为搜索输入字段的值。调用onChange事件时，将handleSearchInputChanges调用该函数，该函数将使用新值调用状态更新函数。该resetInputField函数基本上setSearchValue用空字符串调用状态更新函数（），以清除输入字段。查看此内容以了解有关useStateAPI的更多信息。</p><h3 id="App-js"><a href="#App-js" class="headerlink" title="App.js"></a>App.js</h3><p> 最后，我们将App.js使用以下代码更新文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useState, useEffect &#125; from <span class="string">&quot;react&quot;</span>;</span><br><span class="line">import <span class="string">&quot;../App.css&quot;</span>;</span><br><span class="line">import Header from <span class="string">&quot;./Header&quot;</span>;</span><br><span class="line">import Movie from <span class="string">&quot;./Movie&quot;</span>;</span><br><span class="line">import Search from <span class="string">&quot;./Search&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const MOVIE_API_URL = <span class="string">&quot;https://www.omdbapi.com/?s=man&amp;apikey=4a3b711b&quot;</span>; // you should replace this with yours</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const App = () =&gt; &#123;</span><br><span class="line">  const [loading, setLoading] = useState(<span class="literal">true</span>);</span><br><span class="line">  const [movies, setMovies] = useState([]);</span><br><span class="line">  const [errorMessage, setErrorMessage] = useState(null);</span><br><span class="line"></span><br><span class="line">    useEffect(() =&gt; &#123;</span><br><span class="line">    fetch(MOVIE_API_URL)</span><br><span class="line">      .<span class="keyword">then</span>(response =&gt; response.json())</span><br><span class="line">      .<span class="keyword">then</span>(jsonResponse =&gt; &#123;</span><br><span class="line">        setMovies(jsonResponse.Search);</span><br><span class="line">        setLoading(<span class="literal">false</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">    const search = searchValue =&gt; &#123;</span><br><span class="line">    setLoading(<span class="literal">true</span>);</span><br><span class="line">    setErrorMessage(null);</span><br><span class="line"></span><br><span class="line">    fetch(`https://www.omdbapi.com/?s=<span class="variable">$&#123;searchValue&#125;</span>&amp;apikey=4a3b711b`)</span><br><span class="line">      .<span class="keyword">then</span>(response =&gt; response.json())</span><br><span class="line">      .<span class="keyword">then</span>(jsonResponse =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (jsonResponse.Response === <span class="string">&quot;True&quot;</span>) &#123;</span><br><span class="line">          setMovies(jsonResponse.Search);</span><br><span class="line">          setLoading(<span class="literal">false</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          setErrorMessage(jsonResponse.Error);</span><br><span class="line">          setLoading(<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">return</span> (</span><br><span class="line">     &lt;div className=<span class="string">&quot;App&quot;</span>&gt;</span><br><span class="line">      &lt;Header text=<span class="string">&quot;HOOKED&quot;</span> /&gt;</span><br><span class="line">      &lt;Search search=&#123;search&#125; /&gt;</span><br><span class="line">      &lt;p className=<span class="string">&quot;App-intro&quot;</span>&gt;Sharing a few of our favourite movies&lt;/p&gt;</span><br><span class="line">      &lt;div className=<span class="string">&quot;movies&quot;</span>&gt;</span><br><span class="line">        &#123;loading &amp;&amp; !errorMessage ? (</span><br><span class="line">         &lt;span&gt;loading...&lt;/span&gt;</span><br><span class="line">         ) : errorMessage ? (</span><br><span class="line">          &lt;div className=<span class="string">&quot;errorMessage&quot;</span>&gt;&#123;errorMessage&#125;&lt;/div&gt;</span><br><span class="line">        ) : (</span><br><span class="line">          movies.map((movie, index) =&gt; (</span><br><span class="line">            &lt;Movie key=&#123;`<span class="variable">$&#123;index&#125;</span>-<span class="variable">$&#123;movie.Title&#125;</span>`&#125; movie=&#123;movie&#125; /&gt;</span><br><span class="line">          ))</span><br><span class="line">        )&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default App;</span><br></pre></td></tr></table></figure><p> 让我们看一下代码：我们正在使用3个useState函数，所以是的，我们可以useState在一个组件中拥有多个函数。第一个用于处理加载状态（将loading设置为true时，它将呈现“ loading…”文本）。第二个用于处理从服务器获取的电影数组。最后，第三个用于处理发出API请求时可能发生的任何错误。</p><p> 在那之后，我们遇到了我们在应用程序中使用的第二个钩子API：useEffect钩子。该钩子基本上使您可以在功能组件中执行副作用。所谓副作用，是指诸如数据获取，订阅和手动DOM操作之类的事情。关于这个钩子的最好的部分是来自React官方文档的引言：</p><p> 如果你熟悉阵营类生命周期方法，你能想到的useEffect钩。因为componentDidMount，componentDidUpdate和componentWillUnmount结合。<br> 这是因为useEffect在第一个渲染（componentDidMount）之后以及每次更新（componentDidUpdate）之后都会被调用。</p><p> 我知道您可能想知道这与componentDidMount每次更新后都调用它有何相似之处。好吧，这是因为该useEffect函数接受两个参数，一个是您要运行的函数，另一个是数组。在该数组中，我们只是传入一个值，该值告诉React如果传入的值未更改，则跳过应用效果。</p><p> 根据文档，这类似于我们在条件中添加条件语句时的情况componentDidUpdate：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// <span class="keyword">for</span> class components</span><br><span class="line">componentDidUpdate(prevProps, prevState) &#123;</span><br><span class="line">  <span class="keyword">if</span> (prevState.count !== this.state.count) &#123;</span><br><span class="line">    document.title = `You clicked <span class="variable">$&#123;this.state.count&#125;</span> <span class="built_in">times</span>`;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// using hooks it will become</span><br><span class="line">useEffect(() =&gt; &#123;</span><br><span class="line">  document.title = `You clicked <span class="variable">$&#123;count&#125;</span> <span class="built_in">times</span>`;</span><br><span class="line">&#125;, [count]); // Only re-run the effect <span class="keyword">if</span> count changes</span><br></pre></td></tr></table></figure><p> 在我们的例子中，我们没有任何变化的值，因此我们可以传入一个空数组，该数组告诉React这个效果应该被调用一次。</p><p> 如您所见，我们有3个useState功能有些相关，应该可以将它们以某种方式进行组合。值得庆幸的是，React团队为我们提供了服务，因为他们制作了一个有助于此操作的钩子-将该钩子称为useReducer。让我们将App组件转换为使用新的钩子，这样我们App.js现在将如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useReducer, useEffect &#125; from <span class="string">&quot;react&quot;</span>;</span><br><span class="line">import <span class="string">&quot;../App.css&quot;</span>;</span><br><span class="line">import Header from <span class="string">&quot;./Header&quot;</span>;</span><br><span class="line">import Movie from <span class="string">&quot;./Movie&quot;</span>;</span><br><span class="line">import Search from <span class="string">&quot;./Search&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const MOVIE_API_URL = <span class="string">&quot;https://www.omdbapi.com/?s=man&amp;apikey=4a3b711b&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const initialState = &#123;</span><br><span class="line">  loading: <span class="literal">true</span>,</span><br><span class="line">  movies: [],</span><br><span class="line">  errorMessage: null</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const reducer = (state, action) =&gt; &#123;</span><br><span class="line">  switch (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;SEARCH_MOVIES_REQUEST&quot;</span>:</span><br><span class="line">      <span class="built_in">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        loading: <span class="literal">true</span>,</span><br><span class="line">        errorMessage: null</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;SEARCH_MOVIES_SUCCESS&quot;</span>:</span><br><span class="line">      <span class="built_in">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        loading: <span class="literal">false</span>,</span><br><span class="line">        movies: action.payload</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;SEARCH_MOVIES_FAILURE&quot;</span>:</span><br><span class="line">      <span class="built_in">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        loading: <span class="literal">false</span>,</span><br><span class="line">        errorMessage: action.error</span><br><span class="line">      &#125;;</span><br><span class="line">    default:</span><br><span class="line">      <span class="built_in">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const App = () =&gt; &#123;</span><br><span class="line">  const [state, dispatch] = useReducer(reducer, initialState);</span><br><span class="line"></span><br><span class="line">    useEffect(() =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">        fetch(MOVIE_API_URL)</span><br><span class="line">            .<span class="keyword">then</span>(response =&gt; response.json())</span><br><span class="line">            .<span class="keyword">then</span>(jsonResponse =&gt; &#123;</span><br><span class="line">        </span><br><span class="line">            dispatch(&#123;</span><br><span class="line">                <span class="built_in">type</span>: <span class="string">&quot;SEARCH_MOVIES_SUCCESS&quot;</span>,</span><br><span class="line">                payload: jsonResponse.Search</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">    const search = searchValue =&gt; &#123;</span><br><span class="line">    dispatch(&#123;</span><br><span class="line">      <span class="built_in">type</span>: <span class="string">&quot;SEARCH_MOVIES_REQUEST&quot;</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">        fetch(`https://www.omdbapi.com/?s=<span class="variable">$&#123;searchValue&#125;</span>&amp;apikey=4a3b711b`)</span><br><span class="line">      .<span class="keyword">then</span>(response =&gt; response.json())</span><br><span class="line">      .<span class="keyword">then</span>(jsonResponse =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (jsonResponse.Response === <span class="string">&quot;True&quot;</span>) &#123;</span><br><span class="line">          dispatch(&#123;</span><br><span class="line">                <span class="built_in">type</span>: <span class="string">&quot;SEARCH_MOVIES_SUCCESS&quot;</span>,</span><br><span class="line">                payload: jsonResponse.Search</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          dispatch(&#123;</span><br><span class="line">                <span class="built_in">type</span>: <span class="string">&quot;SEARCH_MOVIES_FAILURE&quot;</span>,</span><br><span class="line">                error: jsonResponse.Error</span><br><span class="line">          &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">    const &#123; movies, errorMessage, loading &#125; = state;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">&quot;App&quot;</span>&gt;</span><br><span class="line">      &lt;Header text=<span class="string">&quot;HOOKED&quot;</span> /&gt;</span><br><span class="line">      &lt;Search search=&#123;search&#125; /&gt;</span><br><span class="line">      &lt;p className=<span class="string">&quot;App-intro&quot;</span>&gt;Sharing a few of our favourite movies&lt;/p&gt;</span><br><span class="line">      &lt;div className=<span class="string">&quot;movies&quot;</span>&gt;</span><br><span class="line">        &#123;loading &amp;&amp; !errorMessage ? (</span><br><span class="line">          &lt;span&gt;loading... &lt;/span&gt;</span><br><span class="line">        ) : errorMessage ? (</span><br><span class="line">          &lt;div className=<span class="string">&quot;errorMessage&quot;</span>&gt;&#123;errorMessage&#125;&lt;/div&gt;</span><br><span class="line">        ) : (</span><br><span class="line">          movies.map((movie, index) =&gt; (</span><br><span class="line">            &lt;Movie key=&#123;`<span class="variable">$&#123;index&#125;</span>-<span class="variable">$&#123;movie.Title&#125;</span>`&#125; movie=&#123;movie&#125; /&gt;</span><br><span class="line">          ))</span><br><span class="line">        )&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default App;</span><br></pre></td></tr></table></figure><p> 因此，如果一切顺利，那么我们应该不会看到应用程序行为的任何变化。现在让我们看一下useReducer挂钩的工作原理。</p><p> 该挂钩具有3个参数，但在我们的用例中，我们将仅使用2个。典型的useReducer挂钩如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const [state, dispatch] = useReducer(</span><br><span class="line">    reducer,</span><br><span class="line">    initialState</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p> 该reducer参数类似于我们在Redux中使用的参数，如下所示：<br>Redux中使用的参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">const reducer = (state, action) =&gt; &#123;</span><br><span class="line">  switch (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;SEARCH_MOVIES_REQUEST&quot;</span>:</span><br><span class="line">      <span class="built_in">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        loading: <span class="literal">true</span>,</span><br><span class="line">        errorMessage: null</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;SEARCH_MOVIES_SUCCESS&quot;</span>:</span><br><span class="line">      <span class="built_in">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        loading: <span class="literal">false</span>,</span><br><span class="line">        movies: action.payload</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;SEARCH_MOVIES_FAILURE&quot;</span>:</span><br><span class="line">      <span class="built_in">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        loading: <span class="literal">false</span>,</span><br><span class="line">        errorMessage: action.error</span><br><span class="line">      &#125;;</span><br><span class="line">    default:</span><br><span class="line">      <span class="built_in">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 精简器接受initialState和操作，因此精简器根据操作类型返回一个新的状态对象。例如，如果调度的操作类型为SEARCH_MOVIES_REQUEST，则状态将使用新对象更新，其中for的loading值为true，并且errorMessage为null。</p><p> 要注意的另一件事是，在我们的中useEffect，我们现在正在调度一个带有有效负载的操作，作为从服务器获取的电影数组。此外，在我们的search职能中，我们实际上是在分派三个不同的动作。</p><p> 一种动作是SEARCH_MOVIES_REQUEST更新我们的状态对象make 的动作loading=true and errorMessage = null。<br> 如果请求成功，那么我们将分派另一个操作，该操作的类型SEARCH_MOVIES_SUCCESS 将更新状态对象，从而loading=false and movies = action.payload使有效负载是从OMDB获取的电影数组。<br> 如果有错误，我们反而会派遣与类型不同的操作SEARCH_MOVIES_FAILURE，更新我们的状态对象制作loading=false and errorMessage = action.error，其中action.error从服务器得到该错误消息。<br> 要了解有关useReducer钩子的更多信息，请查看官方文档。</p><p>这是本文的GitHub存储库的链接。<br><a href="https://github.com/Hard-workingrookie/hooks-movie-app">github</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;最终完成效果&quot;&gt;&lt;a href=&quot;#最终完成效果&quot; class=&quot;headerlink&quot; title=&quot;最终完成效果&quot;&gt;&lt;/a&gt;最终完成效果&lt;/h3&gt;&lt;img src= &quot;/img/loading.gif&quot; data-lazy-src=&quot;https://cdn-m</summary>
      
    
    
    
    <category term="学习" scheme="https://hard-workingrookie.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="react" scheme="https://hard-workingrookie.github.io/tags/react/"/>
    
    <category term="React-Hook" scheme="https://hard-workingrookie.github.io/tags/React-Hook/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://hard-workingrookie.github.io/2020/08/26/hello-world/"/>
    <id>https://hard-workingrookie.github.io/2020/08/26/hello-world/</id>
    <published>2020-08-26T07:52:28.766Z</published>
    <updated>2020-08-26T09:35:15.782Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="默认分类" scheme="https://hard-workingrookie.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
    <category term="test" scheme="https://hard-workingrookie.github.io/tags/test/"/>
    
  </entry>
  
</feed>
