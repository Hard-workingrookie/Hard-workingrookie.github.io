<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王美的个人博客</title>
  
  
  <link href="https://hard-workingrookie.github.io/atom.xml" rel="self"/>
  
  <link href="https://hard-workingrookie.github.io/"/>
  <updated>2020-09-22T03:09:35.487Z</updated>
  <id>https://hard-workingrookie.github.io/</id>
  
  <author>
    <name>王美</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>es678</title>
    <link href="https://hard-workingrookie.github.io/2020/09/21/es678/"/>
    <id>https://hard-workingrookie.github.io/2020/09/21/es678/</id>
    <published>2020-09-21T02:26:55.000Z</published>
    <updated>2020-09-22T03:09:35.487Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES6-常用新特性"><a href="#ES6-常用新特性" class="headerlink" title="ES6 常用新特性"></a>ES6 常用新特性</h1><h2 id="let-amp-amp-const"><a href="#let-amp-amp-const" class="headerlink" title="let &amp;&amp; const"></a>let &amp;&amp; const</h2><p>let 命令也用于变量声明，但是作用域为<strong>局部</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">let</span> a =10;</span><br><span class="line">    var b =1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在函数外部可以获取到 b，获取不到 a,因此例如<code>for</code>循环计数器就适合使用 let。</p><p>const 用于声明一个常量，设定后<strong>值不会再改变</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const PI =3.1415;</span><br><span class="line">PI  //3.1415</span><br><span class="line">PI=3;  //TypeError: Assignment to constant variable.</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="iterable-类型"><a href="#iterable-类型" class="headerlink" title="iterable 类型"></a>iterable 类型</h2><p>为了统一集合类型，ES6 标准引入了新的<code>iterable</code>类型，Array、Map 和 Set 都属于<code>iterable</code>类型，具有<br><code>iterable</code>类型的集合可以通过新的 <code> for ...of</code> 循环来遍历</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var a=[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>];</span><br><span class="line">var s=new Set([<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>]);</span><br><span class="line">var m=new Map([[1,<span class="string">&#x27;x&#x27;</span>],[2,<span class="string">&#x27;y&#x27;</span>],[3,<span class="string">&#x27;z&#x27;</span>]]);</span><br><span class="line"><span class="keyword">for</span> (var x of a)&#123;   //遍历Array</span><br><span class="line">    alert(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (var x of s)&#123;  //遍历Set</span><br><span class="line">    alert(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (var x of m)&#123;  //遍历Map</span><br><span class="line">    alert(x[0]+<span class="string">&#x27;=&#x27;</span>+x[1]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Map 相关操作如下，Set 同理：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var m = new Map(); // 空Map</span><br><span class="line">m.set(<span class="string">&#x27;Adam&#x27;</span>, 67); // 添加新的key-value</span><br><span class="line">m.set(<span class="string">&#x27;Bob&#x27;</span>, 59);</span><br><span class="line">m.has(<span class="string">&#x27;Adam&#x27;</span>); // 是否存在key <span class="string">&#x27;Adam&#x27;</span>: <span class="literal">true</span></span><br><span class="line">m.get(<span class="string">&#x27;Adam&#x27;</span>); // 67</span><br><span class="line">m.delete(<span class="string">&#x27;Adam&#x27;</span>); // 删除key <span class="string">&#x27;Adam&#x27;</span></span><br><span class="line">m.get(<span class="string">&#x27;Adam&#x27;</span>); // undefined</span><br></pre></td></tr></table></figure><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构。</p><p>例如数组：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">let</span> [a,b,c]=[1,2,3];</span><br><span class="line"></span><br><span class="line">等同于</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> a=1;</span><br><span class="line"><span class="built_in">let</span> b=2;</span><br><span class="line"><span class="built_in">let</span> c=3;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>对象的解构赋值：获取对象的多个属性并且使用一条语句将它们赋给多个变量</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">var &#123;</span><br><span class="line">  StyleSheet,</span><br><span class="line">  Text,</span><br><span class="line">  View</span><br><span class="line">&#125; = React;</span><br><span class="line"></span><br><span class="line">等同于</span><br><span class="line">var StyleSheet = React.StyleSheet;</span><br><span class="line">var Text = React.Text;</span><br><span class="line">var View = React.Text;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="gt-函数-箭头函数"><a href="#gt-函数-箭头函数" class="headerlink" title="=&gt;函数(箭头函数)"></a>=&gt;函数(箭头函数)</h2><p><code>var sum =(num1,num2)=&gt;&#123;return num1+num2;&#125;</code></p><p>等同于</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var sum =<span class="keyword">function</span>(num1,num2)&#123;</span><br><span class="line">    <span class="built_in">return</span> num1+num2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>箭头函数还修复了 this 的指向，使其永远指向词法作用域：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> var obj = &#123;</span><br><span class="line">   birth: 1999,</span><br><span class="line">   getAge: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">     var b = this.birth</span><br><span class="line">     var fn = () =&gt; new Date().getFullYear() - this.birth //this指向obj对象</span><br><span class="line">     <span class="built_in">return</span> fn()</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">console.log( obj.getAge()) //21</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="…操作符"><a href="#…操作符" class="headerlink" title="…操作符"></a>…操作符</h2><p>这个的引入几乎不会用到 extend 这个函数来。通过它可以将数组作为参数直接传入函数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var people = [<span class="string">&#x27;jack&#x27;</span>, <span class="string">&#x27;Mary&#x27;</span>, <span class="string">&#x27;Candy&#x27;</span>]</span><br><span class="line"><span class="keyword">function</span> sayHello(...people) &#123;</span><br><span class="line">  console.log(`Hello <span class="variable">$&#123;people&#125;</span>!`)</span><br><span class="line">&#125;</span><br><span class="line">sayHello(people) // Hello jack,Mary,Candy!</span><br></pre></td></tr></table></figure><p>在函数定义时可以通过…rest 获取定义 参数外 的所有参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> foo(a, b, ...rest) &#123;</span><br><span class="line">  console.log(<span class="string">&#x27;a=&#x27;</span> + a)</span><br><span class="line">  console.log(<span class="string">&#x27;b=&#x27;</span> + b)</span><br><span class="line">  console.log(rest)</span><br><span class="line">&#125;</span><br><span class="line">foo(1, 2, 3, 4, 5)</span><br><span class="line">//  a=1</span><br><span class="line">//  b=2</span><br><span class="line">//  (3) [3, 4, 5]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>ES6 提供了更接近 传统语言的写法，引入了 Class （类） 这个概念，作为对象的模板。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 定义类</span><br><span class="line"></span><br><span class="line">class Point &#123;</span><br><span class="line">  constructor(x, y) &#123;</span><br><span class="line">    this.x = x</span><br><span class="line">    this.y = y</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">toString</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> <span class="string">&#x27;(&#x27;</span> + this.x + <span class="string">&#x27;,&#x27;</span> + this.y + <span class="string">&#x27;)&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="ES7-常用新特性"><a href="#ES7-常用新特性" class="headerlink" title="ES7 常用新特性"></a>ES7 常用新特性</h1><h2 id="Array-prototype-includes-includes"><a href="#Array-prototype-includes-includes" class="headerlink" title="Array.prototype.includes (includes)"></a>Array.prototype.includes (<strong>includes</strong>)</h2><p><code>Array.prototype.includes</code>是替代<code>indexOf</code>，开发人员用来检查数组中是否存在值，<code>indexOf</code>是一种尴尬的使用，因为它返回一个元素在数组的位置或者-1(当这样的元素不能被找到的情况下)。<br>所以它返回的是一个数字 ，而不是一个 布尔值。<br>开发人员需要实施额外的检查。在 ES6，要检查是否存在值需要做如下图所示小技巧，因为他们没有匹配到值，<code>Array.prototype.includes</code>返回-1 变成 true，但是当匹配的元素为 0 位置的时候，该数组包含元素，却变成 false。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">let</span> arr = [<span class="string">&#x27;react&#x27;</span>, <span class="string">&#x27;angular&#x27;</span>, <span class="string">&#x27;vue&#x27;</span>]</span><br><span class="line"></span><br><span class="line">console.log(arr.indexOf(<span class="string">&#x27;react&#x27;</span>)) // 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或者使用一点点 hack 位运算符 ~ 使代码更加紧凑一些 ，因为 ~（位异或）对任何数字相当于 -(a+1)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> arr = [<span class="string">&#x27;react&#x27;</span>, <span class="string">&#x27;angular&#x27;</span>, <span class="string">&#x27;vue&#x27;</span>]</span><br><span class="line"></span><br><span class="line">console.log(~arr.indexOf(<span class="string">&#x27;react&#x27;</span>)) // -1      -(0+1)=-1</span><br></pre></td></tr></table></figure><p>在 ES7 中使用 includes 代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">let</span> arr = [<span class="string">&#x27;react&#x27;</span>, <span class="string">&#x27;angular&#x27;</span>, <span class="string">&#x27;vue&#x27;</span>]</span><br><span class="line"></span><br><span class="line">console.log(arr.includes(<span class="string">&#x27;react&#x27;</span>)) //  <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>还能在字符串中使用 includes：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">let</span> str =<span class="string">&#x27;React Quickly&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(str.toLowerCase().includes(<span class="string">&#x27;react&#x27;</span>))&#123;</span><br><span class="line">    console.log(<span class="string">&#x27;Found &quot;react&quot;&#x27;</span>)  // Found <span class="string">&quot;react&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>includes 也可以在 NAN（非数字） 使用。<br>最后 includes 第二可选参数 fromIndex，这对于优化 是有好处的 ，因为 它允许从特定位置开始寻找匹配。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">console.log([1, 2, 3].includes(2)) // === <span class="literal">true</span>)</span><br><span class="line">console.log([1, 2, 3].includes(4)) // === <span class="literal">false</span>)</span><br><span class="line">console.log([1, 2, NaN].includes(NaN)) // === <span class="literal">true</span>)</span><br><span class="line">console.log([1, 2, -0].includes(+0)) // === <span class="literal">true</span>)</span><br><span class="line">console.log([1, 2, +0].includes(-0)) // === <span class="literal">true</span>)</span><br><span class="line">console.log([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>].includes(<span class="string">&#x27;a&#x27;</span>)) // === <span class="literal">true</span>)</span><br><span class="line">console.log([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>].includes(<span class="string">&#x27;a&#x27;</span>, 1)) // === <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><p><code>includes</code> 在一个数组或者列表中检查是否存在一个值。</p><h2 id="Exponentiation-Operator-求幂运算"><a href="#Exponentiation-Operator-求幂运算" class="headerlink" title="Exponentiation Operator(求幂运算)"></a>Exponentiation Operator(求幂运算)</h2><p>求幂运算大多数是做些数学计算，对于 3D,VR ,SVG 还有数据可视化非常有用。</p><p>在 ES6/2015ES，你能使用 Math.pow 创建一个短的递归箭头函数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">calculateExponent = (base, exponent) =&gt;</span><br><span class="line">  base * (--exponent &gt; 1 ? calculateExponent(base, exponent) : base)</span><br><span class="line">console.log(calculateExponent(7, 12) === Math.pow(7, 12)) // <span class="literal">true</span></span><br><span class="line">console.log(calculateExponent(2, 7) === Math.pow(2, 7)) // <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>在 ES7/ES2016 ，以数学向导 的开发者 可以使用更短的语法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">let</span> a = 7 ** 12</span><br><span class="line">console.log(a == Math.pow(7, 12)) //<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>还可以这样子</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">let</span> a = 7</span><br><span class="line">a **= 12</span><br><span class="line"><span class="built_in">let</span> b = 2</span><br><span class="line">b **= 7</span><br><span class="line">console.log(a === Math.pow(7, 12)) // <span class="literal">true</span></span><br><span class="line">console.log(b === Math.pow(2, 7)) // <span class="literal">true</span></span><br></pre></td></tr></table></figure><h1 id="ES8-常用新特性"><a href="#ES8-常用新特性" class="headerlink" title="ES8 常用新特性"></a>ES8 常用新特性</h1><h2 id="Object-values-Object-entries"><a href="#Object-values-Object-entries" class="headerlink" title="Object.values/Object.entries"></a>Object.values/Object.entries</h2><p>Object.values 和 Object.entries 是在 ES2017 规格中，它与 Object.keys 类似，返回数组类型，其序号和 Object.key 序号对应。类似 Python 中的 dict.iteritems()</p><p>Object.values 和 Object.entries 和 Object.keys 各自项返回是数组，相对应包括 key,value 或者可美剧对象 property/attribute</p><p>在 ES8/ES2017 之前，JavaScript 开发者迭代一个对象的自身属性时候不得不使用 Object.keys，通过迭代且使用 obj[key]获取 value 返回一个数组，很挫的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">let</span> obj = &#123; a: 1, b: 2, c: 3 &#125;</span><br><span class="line">    Object.keys(obj).forEach((key,index)=&gt;&#123;</span><br><span class="line">        console.log(key,obj[key]);</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // a 1</span><br><span class="line">    // b 2</span><br><span class="line">    // c 3</span><br></pre></td></tr></table></figure><p>而使用ES6/ES2015 中for/of稍微好点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">let</span> obj = &#123; a: 1, b: 2, c: 3 &#125;</span><br><span class="line">     <span class="keyword">for</span>(<span class="built_in">let</span> key of Object.keys(obj))&#123;</span><br><span class="line">         console.log(key,obj[key]);</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>Object.values 返回对象自身可以迭代属性值（values)为数组类型。我们最好Array.prototype.forEach迭代它，结合ES6的箭头函数隐形返回值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> obj = &#123; a: 1, b: 2, c: 3 &#125;</span><br><span class="line">Object.values(obj).forEach((value) =&gt; console.log(value)) // 1, 2, 3</span><br></pre></td></tr></table></figure><p>使用for/of</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">let</span> obj = &#123;a: 1, b: 2, c: 3&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">let</span> value of Object.values(obj)) &#123;</span><br><span class="line">  console.log(value)</span><br><span class="line">&#125;</span><br><span class="line">// 1, 2, 3</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Object.entries</code>，在另一方面，将会返回对象自身可迭代属性key-value对数组（作为一个数组），他们（key-value）分别以数组存放数组中:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">let</span> obj = &#123;a: 1, b: 2, c: 3&#125;</span><br><span class="line"> console.log(JSON.stringify(Object.entries(obj)));  </span><br><span class="line">  // <span class="string">&quot;[[&quot;</span>a<span class="string">&quot;,1],[&quot;</span>b<span class="string">&quot;,2],[&quot;</span>c<span class="string">&quot;,3]]&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以使用ES6/ES2015解构，从这嵌套数组中分别声明key和value</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="built_in">let</span> obj = &#123; a: 1, b: 2, c: 3 &#125;</span><br><span class="line">   Object.entries(obj).forEach(([key, value]) =&gt; &#123;</span><br><span class="line">     console.log(`<span class="variable">$&#123;key&#125;</span> is <span class="variable">$&#123;value&#125;</span>`)</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">// a is 1</span><br><span class="line">// b is 2</span><br><span class="line">// c is 3</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同样使用ES6 for/of（毕竟全部都是数组）遍历Object.entries返回来的结果值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">let</span> obj = &#123;a: 1, b: 2, c: 3&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">let</span> [key, value] of Object.entries(obj)) &#123;</span><br><span class="line">  console.log(`<span class="variable">$&#123;key&#125;</span> is <span class="variable">$&#123;value&#125;</span>`)</span><br><span class="line">&#125;</span><br><span class="line">// a is 1, b is 2, c is 3</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="String-padding-字符串填充"><a href="#String-padding-字符串填充" class="headerlink" title="String padding(字符串填充)"></a>String padding(字符串填充)</h2><p>String.prototype.padStart 和 String.prototype.padEnd在javascript字符操作是一个不错的体验，帮助避免依赖而外的库。<br>padStart()在开始部位填充，返回一个给出长度的字符串，填充物给定字符串，把字符串填充到期望的长度。从字符串的左边开始（至少大部分西方语言），一个经典例子是使用空格创建列：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    console.log(<span class="string">&#x27;react&#x27;</span>.padStart(10))</span><br><span class="line">    console.log(<span class="string">&#x27;backbone&#x27;</span>.padStart(10))</span><br><span class="line">    console.log(<span class="string">&#x27;0.00&#x27;</span>.padStart(20))</span><br><span class="line">    console.log(<span class="string">&#x27;10,000.00&#x27;</span>.padStart(20))</span><br><span class="line">    console.log(<span class="string">&#x27;250,000.00&#x27;</span>.padStart(20))</span><br><span class="line">//     react</span><br><span class="line">//   backbone</span><br><span class="line">//                 0.00</span><br><span class="line">//            10,000.00</span><br><span class="line">//           250,000.00</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第二个参数，让我们放一些其他的填充字符替代空字符串，一个字符串填充</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">console.log(<span class="string">&#x27;react&#x27;</span>.padStart(10,<span class="string">&#x27;#&#x27;</span>))</span><br><span class="line">console.log(<span class="string">&#x27;backbone&#x27;</span>.padStart(10,<span class="string">&#x27;#&#x27;</span>))</span><br><span class="line">// <span class="comment">#####react</span></span><br><span class="line">// <span class="comment">##backbone</span></span><br></pre></td></tr></table></figure><h2 id="Object-getOwnPropertyDescriptors"><a href="#Object-getOwnPropertyDescriptors" class="headerlink" title="Object.getOwnPropertyDescriptors"></a>Object.getOwnPropertyDescriptors</h2><h2 id="函数参数列表和调用中的尾逗号（Trailing-commas）"><a href="#函数参数列表和调用中的尾逗号（Trailing-commas）" class="headerlink" title="函数参数列表和调用中的尾逗号（Trailing commas）"></a>函数参数列表和调用中的尾逗号（Trailing commas）</h2><h2 id="异步函数（Async-Functions）"><a href="#异步函数（Async-Functions）" class="headerlink" title="异步函数（Async Functions）"></a>异步函数（Async Functions）</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ES6-常用新特性&quot;&gt;&lt;a href=&quot;#ES6-常用新特性&quot; class=&quot;headerlink&quot; title=&quot;ES6 常用新特性&quot;&gt;&lt;/a&gt;ES6 常用新特性&lt;/h1&gt;&lt;h2 id=&quot;let-amp-amp-const&quot;&gt;&lt;a href=&quot;#let-amp-</summary>
      
    
    
    
    <category term="笔记" scheme="https://hard-workingrookie.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="ES6" scheme="https://hard-workingrookie.github.io/tags/ES6/"/>
    
    <category term="javaScript" scheme="https://hard-workingrookie.github.io/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>Vuex学习笔记</title>
    <link href="https://hard-workingrookie.github.io/2020/09/04/vuex%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://hard-workingrookie.github.io/2020/09/04/vuex%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-09-04T06:41:39.000Z</published>
    <updated>2020-09-05T01:25:39.917Z</updated>
    
    <content type="html"><![CDATA[<p>项目地址在 <a href="https://github.com/Hard-workingrookie/todoList_vuex">https://github.com/Hard-workingrookie/todoList_vuex</a></p><h1 id="组件之间共享数据的方式"><a href="#组件之间共享数据的方式" class="headerlink" title="组件之间共享数据的方式"></a>组件之间共享数据的方式</h1><p><strong>父向子传值</strong>： v-bind 属性绑定<br><strong>子向父传值</strong>： v-on 属性绑定<br><strong>兄弟组件之间共享数据</strong> ：EventBus</p><ul><li>$on 接收数据的那个组件</li><li>$emit 发送数据的那个组件</li></ul><h1 id="Vuex-是什么"><a href="#Vuex-是什么" class="headerlink" title="Vuex 是什么"></a>Vuex 是什么</h1><p><code>Vuex</code>是实现正在组件全局<strong>状态</strong>（数据）管理的一种机制，可以方便的实现组件之间的数据共享。</p><h1 id="Vuex-的基本使用"><a href="#Vuex-的基本使用" class="headerlink" title="Vuex 的基本使用"></a>Vuex 的基本使用</h1><h2 id="安装-Vuex-依赖包"><a href="#安装-Vuex-依赖包" class="headerlink" title="安装 Vuex 依赖包"></a>安装 Vuex 依赖包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vuex --save</span><br></pre></td></tr></table></figure><h2 id="导入-Vuex-包"><a href="#导入-Vuex-包" class="headerlink" title="导入 Vuex 包"></a>导入 Vuex 包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import Vuex from <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line">Vue.use(Vuex)</span><br></pre></td></tr></table></figure><h2 id="创建-store-对象"><a href="#创建-store-对象" class="headerlink" title="创建 store 对象"></a>创建 store 对象</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const store =new Vuex.Store(&#123;</span><br><span class="line">    state:&#123;count：0&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="将-store-对象挂载到-vue-实例中"><a href="#将-store-对象挂载到-vue-实例中" class="headerlink" title="将 store 对象挂载到 vue 实例中"></a>将 store 对象挂载到 vue 实例中</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">    el:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    render:h=&gt;h(app),</span><br><span class="line">    router,</span><br><span class="line">    store</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="使用-Mutation-变更-store-中的数据"><a href="#使用-Mutation-变更-store-中的数据" class="headerlink" title="使用 Mutation 变更 store 中的数据"></a>使用 Mutation 变更 store 中的数据</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mutations: &#123;</span><br><span class="line">  add (state) &#123;</span><br><span class="line">    state.count++</span><br><span class="line">  &#125;,</span><br><span class="line">  sub (state) &#123;</span><br><span class="line">    <span class="keyword">if</span> (state.count &gt; 0) &#123;</span><br><span class="line">      state.count--</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>在页面使用</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">addCount</span></span> () &#123;</span><br><span class="line">     this.<span class="variable">$store</span>.commit(<span class="string">&#x27;add&#x27;</span>)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">subCount</span></span> () &#123;</span><br><span class="line">     this.<span class="variable">$store</span>.commit(<span class="string">&#x27;sub&#x27;</span>)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="mutations-带参传送"><a href="#mutations-带参传送" class="headerlink" title="mutations 带参传送"></a>mutations 带参传送</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> addN (state, step) &#123;</span><br><span class="line">      state.count += step</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">addCount</span></span> () &#123;</span><br><span class="line">this.<span class="variable">$store</span>.commit(<span class="string">&#x27;addN&#x27;</span>, 3)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Mutation-触发"><a href="#Mutation-触发" class="headerlink" title="Mutation 触发"></a>Mutation 触发</h1><p><code>this.$store.commit() </code>是触发 mutation 第一种方式</p><p><strong>第二种：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; mapMutations &#125; from <span class="string">&#x27;vuex&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...mapMutations([<span class="string">&#x27;add&#x27;</span>])</span><br></pre></td></tr></table></figure><p><strong>带参：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">   ...mapMutations([<span class="string">&#x27;add&#x27;</span>, <span class="string">&#x27;addN&#x27;</span>]),</span><br><span class="line">   <span class="function"><span class="title">addCount</span></span> () &#123;</span><br><span class="line">     this.addN(3)</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>不要在 mutations 中执行异步操作。action 用于执行异步操作</strong></p><h1 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h1><p>action 用于执行异步操作</p><h2 id="触发-action"><a href="#触发-action" class="headerlink" title="触发 action"></a>触发 action</h2><h3 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h3><h4 id="不带参"><a href="#不带参" class="headerlink" title="不带参"></a>不带参</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">    addAsync (context) &#123;</span><br><span class="line">      setTimeout(() =&gt; &#123;</span><br><span class="line">        context.commit(<span class="string">&#x27;add&#x27;</span>)</span><br><span class="line">      &#125;, 1000)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.<span class="variable">$store</span>.dispath(<span class="string">&#x27;addAsync&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="带参"><a href="#带参" class="headerlink" title="带参"></a>带参</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">    addAsync (context,step) &#123;</span><br><span class="line">      setTimeout(() =&gt; &#123;</span><br><span class="line">        context.commit(<span class="string">&#x27;addN&#x27;</span>,step)</span><br><span class="line">      &#125;, 1000)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.<span class="variable">$store</span>.dispath(<span class="string">&#x27;addAsync&#x27;</span>,5)</span><br></pre></td></tr></table></figure><h3 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h3><p>1.导入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; mapAction &#125; from &#39;vuex&#39;</span><br></pre></td></tr></table></figure><p>2.映射到当前组件的 methods 函数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">  ...mapAction([<span class="string">&#x27;addAsync&#x27;</span>,<span class="string">&#x27;addNAsync&#x27;</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h1><p>Getter 用于对 store 中的数据进行加工处理形成新的数据。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const store=new Vuex.Store(&#123;</span><br><span class="line">  state:&#123;</span><br><span class="line">    count:0</span><br><span class="line">  &#125;,</span><br><span class="line">  getters:&#123;</span><br><span class="line">    showNum:state=&gt;&#123;</span><br><span class="line">      <span class="built_in">return</span> <span class="string">&#x27;当前最新的数量是【&#x27;</span>+state.count+<span class="string">&#x27;】&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="使用-Getter-的第一种方式"><a href="#使用-Getter-的第一种方式" class="headerlink" title="使用 Getter 的第一种方式"></a>使用 Getter 的第一种方式</h2><p><code>this.$store.getters.名称</code></p><h2 id="使用-Getter-的第二种方式"><a href="#使用-Getter-的第二种方式" class="headerlink" title="使用 Getter 的第二种方式"></a>使用 Getter 的第二种方式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; mapGetters &#125; from <span class="string">&#x27;vuex&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  ...mapGetters([<span class="string">&#x27;showNum&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;&#123;&#123;showNum&#125;&#125;&lt;/h1&gt;</span><br></pre></td></tr></table></figure><h1 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h1><p>Vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">const moduleA = &#123;</span><br><span class="line">  state: () =&gt; (&#123; ... &#125;),</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;,</span><br><span class="line">  getters: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const moduleB = &#123;</span><br><span class="line">  state: () =&gt; (&#123; ... &#125;),</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    a: moduleA,</span><br><span class="line">    b: moduleB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.state.a // -&gt; moduleA 的状态</span><br><span class="line">store.state.b // -&gt; moduleB 的状态</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="模块的局部状态"><a href="#模块的局部状态" class="headerlink" title="模块的局部状态"></a>模块的局部状态</h2><p>对于模块内部的 mutation 和 getter，接收的第一个参数是模块的局部状态对象。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const moduleA = &#123;</span><br><span class="line">  state: () =&gt; (&#123;</span><br><span class="line">    count: 0</span><br><span class="line">  &#125;),</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      // 这里的 `state` 对象是模块的局部状态</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  getters: &#123;</span><br><span class="line">    doubleCount (state) &#123;</span><br><span class="line">      <span class="built_in">return</span> state.count * 2</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于模块内部的 action，局部状态通过 context.state 暴露出来，根节点状态则为 context.rootState</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const moduleA = &#123;</span><br><span class="line">  // ...</span><br><span class="line">  actions: &#123;</span><br><span class="line">    incrementIfOddOnRootSum (&#123; state, commit, rootState &#125;) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((state.count + rootState.count) % 2 === 1) &#123;</span><br><span class="line">        commit(<span class="string">&#x27;increment&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于模块内部的 getter，根节点状态会作为第三个参数暴露出来：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const moduleA = &#123;</span><br><span class="line">  // ...</span><br><span class="line">  getters: &#123;</span><br><span class="line">    sumWithRootCount (state, getters, rootState) &#123;</span><br><span class="line">      <span class="built_in">return</span> state.count + rootState.count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在带命名空间的模块内访问全局内容"><a href="#在带命名空间的模块内访问全局内容" class="headerlink" title="在带命名空间的模块内访问全局内容"></a>在带命名空间的模块内访问全局内容</h2><p>如果你希望使用全局 state 和 getter，rootState 和 rootGetters 会作为第三和第四参数传入 getter，也会通过 context 对象的属性传入 action。</p><p>若需要在全局命名空间内分发 action 或提交 mutation，将 { root: true } 作为第三参数传给 dispatch 或 commit 即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">modules: &#123;</span><br><span class="line">  foo: &#123;</span><br><span class="line">    namespaced: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    getters: &#123;</span><br><span class="line">      // 在这个模块的 getter 中，`getters` 被局部化了</span><br><span class="line">      // 你可以使用 getter 的第四个参数来调用 `rootGetters`</span><br><span class="line">      someGetter (state, getters, rootState, rootGetters) &#123;</span><br><span class="line">        getters.someOtherGetter // -&gt; <span class="string">&#x27;foo/someOtherGetter&#x27;</span></span><br><span class="line">        rootGetters.someOtherGetter // -&gt; <span class="string">&#x27;someOtherGetter&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      someOtherGetter: state =&gt; &#123; ... &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    actions: &#123;</span><br><span class="line">      // 在这个模块中， dispatch 和 commit 也被局部化了</span><br><span class="line">      // 他们可以接受 `root` 属性以访问根 dispatch 或 commit</span><br><span class="line">      someAction (&#123; dispatch, commit, getters, rootGetters &#125;) &#123;</span><br><span class="line">        getters.someGetter // -&gt; <span class="string">&#x27;foo/someGetter&#x27;</span></span><br><span class="line">        rootGetters.someGetter // -&gt; <span class="string">&#x27;someGetter&#x27;</span></span><br><span class="line"></span><br><span class="line">        dispatch(<span class="string">&#x27;someOtherAction&#x27;</span>) // -&gt; <span class="string">&#x27;foo/someOtherAction&#x27;</span></span><br><span class="line">        dispatch(<span class="string">&#x27;someOtherAction&#x27;</span>, null, &#123; root: <span class="literal">true</span> &#125;) // -&gt; <span class="string">&#x27;someOtherAction&#x27;</span></span><br><span class="line"></span><br><span class="line">        commit(<span class="string">&#x27;someMutation&#x27;</span>) // -&gt; <span class="string">&#x27;foo/someMutation&#x27;</span></span><br><span class="line">        commit(<span class="string">&#x27;someMutation&#x27;</span>, null, &#123; root: <span class="literal">true</span> &#125;) // -&gt; <span class="string">&#x27;someMutation&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      someOtherAction (ctx, payload) &#123; ... &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="在带命名空间的模块注册全局-action"><a href="#在带命名空间的模块注册全局-action" class="headerlink" title="在带命名空间的模块注册全局 action"></a>在带命名空间的模块注册全局 action</h2><p>若需要在带命名空间的模块注册全局 action，你可添加 root: true，并将这个 action 的定义放在函数 handler 中。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  actions: &#123;</span><br><span class="line">    someOtherAction (&#123;dispatch&#125;) &#123;</span><br><span class="line">      dispatch(<span class="string">&#x27;someAction&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  modules: &#123;</span><br><span class="line">    foo: &#123;</span><br><span class="line">      namespaced: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">      actions: &#123;</span><br><span class="line">        someAction: &#123;</span><br><span class="line">          root: <span class="literal">true</span>,</span><br><span class="line">          handler (namespacedContext, payload) &#123; ... &#125; // -&gt; <span class="string">&#x27;someAction&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="模块动态注册"><a href="#模块动态注册" class="headerlink" title="模块动态注册"></a>模块动态注册</h2><p>在 store 创建之后，你可以使用 store.registerModule 方法注册模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import Vuex from <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line">const store = new Vuex.Store(&#123; /* 选项 */ &#125;)</span><br><span class="line"></span><br><span class="line">// 注册模块 `myModule`</span><br><span class="line">store.registerModule(<span class="string">&#x27;myModule&#x27;</span>, &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;)</span><br><span class="line">// 注册嵌套模块 `nested/myModule`</span><br><span class="line">store.registerModule([<span class="string">&#x27;nested&#x27;</span>, <span class="string">&#x27;myModule&#x27;</span>], &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>之后就可以通过 <code>store.state.myModule </code>和 <code>store.state.nested.myModule</code> 访问模块的状态。</p><p>模块动态注册功能使得其他 Vue 插件可以通过在 store 中附加新模块的方式来使用 Vuex 管理状态。例如，vuex-router-sync 插件就是通过动态注册模块将 vue-router 和 vuex 结合在一起，实现应用的路由状态管理。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;项目地址在 &lt;a href=&quot;https://github.com/Hard-workingrookie/todoList_vuex&quot;&gt;https://github.com/Hard-workingrookie/todoList_vuex&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;组</summary>
      
    
    
    
    
    <category term="Vue Vuex" scheme="https://hard-workingrookie.github.io/tags/Vue-Vuex/"/>
    
  </entry>
  
  <entry>
    <title>next.js入门</title>
    <link href="https://hard-workingrookie.github.io/2020/08/27/next-js%E5%85%A5%E9%97%A8/"/>
    <id>https://hard-workingrookie.github.io/2020/08/27/next-js%E5%85%A5%E9%97%A8/</id>
    <published>2020-08-27T12:02:21.000Z</published>
    <updated>2020-08-28T05:52:41.153Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Next-js简介"><a href="#Next-js简介" class="headerlink" title="Next.js简介"></a>Next.js简介</h1><div class="note default"><p>Next.js 是一个轻量级的 React 服务端渲染应用框架。</p></div><p>目前Next.js是React服务端渲染的最佳解决方案，所以如果想使用React来开发需要SEO的应用，基本上就要使用Next.js。</p><h1 id="创建next-js项目"><a href="#创建next-js项目" class="headerlink" title="创建next.js项目"></a>创建next.js项目</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g create-next-app</span><br></pre></td></tr></table></figure><p>目前可以支持三种方式的创建，分别是用npx,yarn和create-next-app命令来进行安装，安装的结构都是完全一样的，以npx为例。</p><div class="note default"><p>npx 是Node自带的npm模块，所以你只要安装了Node都是可以直接使用npx命令的。</p></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-next-app next-create</span><br></pre></td></tr></table></figure><p>安装完成之后进入项目目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn dev</span><br></pre></td></tr></table></figure><p>在浏览器中输入<code>http://localhost:3000/</code>看运行效果。</p><h1 id="Next-js的Page和Component的使用"><a href="#Next-js的Page和Component的使用" class="headerlink" title="Next.js的Page和Component的使用"></a>Next.js的Page和Component的使用</h1><h2 id="新建页面和访问路径"><a href="#新建页面和访问路径" class="headerlink" title="新建页面和访问路径"></a>新建页面和访问路径</h2><p>直接在根目录下的pages文件夹下，新建一个litterWang.js页面。然后写入下面的代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">litterWang</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span> (&lt;button&gt;litterWang&lt;/button&gt;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default  litterWang;</span><br></pre></td></tr></table></figure><p>只要写完上面的代码，Next框架就自动作好了路由，这个也算是Next的一个重要优点，给我们节省了大量的时间。</p><p>现在要作一个更深的页面，比如把有关博客的界面都放在这样的路径下<a href="http://localhost:3000/blog/nextBlog,%E5%85%B6%E5%AE%9E%E5%8F%AA%E8%A6%81%E5%9C%A8pages%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E5%86%8D%E5%BB%BA%E7%AB%8B%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9blog%EF%BC%8C%E7%84%B6%E5%90%8E%E8%BF%9B%E5%85%A5blog%E6%96%87%E4%BB%B6%E5%A4%B9%EF%BC%8C%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AAnextBlog.js%E6%96%87%E4%BB%B6%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%AE%9E%E7%8E%B0%E4%BA%86%E3%80%82">http://localhost:3000/blog/nextBlog,其实只要在pages文件夹下再建立一个新的文件夹blog，然后进入blog文件夹，新建一个nextBlog.js文件，就可以实现了。</a></p><p>nextBlog.js文件内容,我们这里就用最简单的写法了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default ()=&gt;&lt;div&gt;nextBlog page&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>写完后，就可以直接在浏览器中访问了，是不是发现Next框架真的减轻了我们大量的工作。</p><h2 id="Component组件的制作"><a href="#Component组件的制作" class="headerlink" title="Component组件的制作"></a>Component组件的制作</h2><p>制作组件也同样方便，比如要建立一个litterWang组件，直接在components目录下建立一个文件litterWang.js,然后写入下面代码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default (&#123;children&#125;)=&gt;&lt;button&gt;&#123;children&#125;&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>组件写完后需要先引入，比如我们在Index页面里进行引入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import litterWang from <span class="string">&#x27;../components/litterWang&#x27;</span></span><br></pre></td></tr></table></figure><p>使用就非常简单了，直接写入标签就可以。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;litterWang&gt;按钮&lt;/litterWang&gt;</span><br></pre></td></tr></table></figure><h1 id="路由-基础和基本跳转"><a href="#路由-基础和基本跳转" class="headerlink" title="路由-基础和基本跳转"></a>路由-基础和基本跳转</h1><p>学会编写组件和页面后，下一步应该了解的就是路由体系，每个框架都有着不同的路由体系，这节先学习最基础的页面如何跳转。页面跳转一般有两种形式，第一种是利用标签<code>&lt;Link&gt;</code>,第二种是用js编程的方式进行跳转，也就是利用<code>Router</code>组件。先来看一下标签的形式如何跳转。</p><h2 id="标签式导航"><a href="#标签式导航" class="headerlink" title="标签式导航"></a>标签式导航<Link></h2><p>在编写代码之前，先删除index.js中的代码，保证代码的最小化。使用标签式导航需要先进行引入，代码如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import Link from <span class="string">&#x27;next/link&#x27;</span></span><br></pre></td></tr></table></figure><p>然后新建两个页面litterWangA.js和litterWangB.js，新建后写个最简单的页面，能标识出来A、B两个页面就好。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//litterWangA.js</span><br><span class="line">import Link from <span class="string">&#x27;next/link&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default ()=&gt;(</span><br><span class="line">    &lt;&gt;</span><br><span class="line">        &lt;div&gt;litterWang-A page .  &lt;/div&gt;</span><br><span class="line">        &lt;Link href=<span class="string">&quot;/&quot;</span>&gt;&lt;a&gt;返回首页&lt;/a&gt;&lt;/Link&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>写完A页面后，可以直接复制A页面的内容，然后修改一下就是B页面。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//litterWangB.js</span><br><span class="line"></span><br><span class="line">import Link from <span class="string">&#x27;next/link&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default ()=&gt;(</span><br><span class="line">    &lt;&gt;</span><br><span class="line">        &lt;div&gt;litterWang-B page .  &lt;/div&gt;</span><br><span class="line">        &lt;Link href=<span class="string">&quot;/&quot;</span>&gt;&lt;a&gt;返回首页&lt;/a&gt;&lt;/Link&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>有了两个页面后，可以编写首页的代码，实现跳转了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//index.js</span><br><span class="line">import React from <span class="string">&#x27;react&#x27;</span></span><br><span class="line">import Link from <span class="string">&#x27;next/link&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const Home = () =&gt; (</span><br><span class="line">  &lt;&gt;</span><br><span class="line">    &lt;div&gt;我是首页&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;&lt;Link href=<span class="string">&quot;/litterWangA&quot;</span>&gt;&lt;a&gt;去litterWangA页面&lt;/a&gt;&lt;/Link&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;&lt;Link href=<span class="string">&quot;/litterWangB&quot;</span>&gt;&lt;a&gt;去litterWangB页面&lt;/a&gt;&lt;/Link&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default Home</span><br></pre></td></tr></table></figure><p>用<code>&lt;Link&gt;</code>标签进行跳转是非常容易的，但是又一个小坑需要注意一下，就是他不支持兄弟标签并列的情况。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div&gt;</span><br><span class="line">  &lt;Link href=<span class="string">&quot;/litterWangA&quot;</span>&gt;</span><br><span class="line">    &lt;span&gt;去litterWangA页面&lt;/span&gt;</span><br><span class="line">    &lt;span&gt;前端博客&lt;/span&gt;</span><br><span class="line">  &lt;/Link&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>如果这样写会直接报错，报错信息如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">client pings, but there&#39;s no entry for page: &#x2F;_error</span><br><span class="line">Warning: You&#39;re using a string directly inside &lt;Link&gt;. This usage has been deprecated. Please add an &lt;a&gt; tag as child of &lt;Link&gt;</span><br></pre></td></tr></table></figure><p>但是你可以把这两个标签外边套一个父标签，就可以了，比如下面的代码就没有错误。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Link href=<span class="string">&quot;/litterWangA&quot;</span>&gt;</span><br><span class="line">  &lt;a&gt;</span><br><span class="line">    &lt;span&gt;去litterWangA页面&lt;/span&gt;</span><br><span class="line">    &lt;span&gt;前端博客&lt;/span&gt;</span><br><span class="line">  &lt;/a&gt;</span><br><span class="line">&lt;/Link&gt;</span><br></pre></td></tr></table></figure><p>通过标签跳转非常的简单，跟使用<code>&lt;a&gt;</code>标签几乎一样。那再来看看如何用编程的方式进行跳转。</p><h2 id="Router模块进行跳转"><a href="#Router模块进行跳转" class="headerlink" title="Router模块进行跳转"></a>Router模块进行跳转</h2><p>在Next框架中还可以使用Router模块进行编程式的跳转，使用前也需要我们引入Router，代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import Router from <span class="string">&#x27;next/router&#x27;</span></span><br></pre></td></tr></table></figure><p>然后在<code>Index.js</code>页面中加入，直接使用<code>Router</code>进行跳转就可以了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">   &lt;button onClick=&#123;()=&gt;&#123;Router.push(<span class="string">&#x27;/litterWangA&#x27;</span>)&#125;&#125;&gt;去litterWangA页面&lt;/button&gt;</span><br><span class="line"> &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>这样写只是简单，但是还是耦合性太高，跟<code>Link</code>标签没什么区别，你可以修改一下代码，把跳转放到一个方法里，然后调用方法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import React from <span class="string">&#x27;react&#x27;</span></span><br><span class="line">import Link from <span class="string">&#x27;next/link&#x27;</span></span><br><span class="line">import Router from <span class="string">&#x27;next/router&#x27;</span></span><br><span class="line">const Home = () =&gt; &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="function"><span class="title">gotoA</span></span>()&#123;</span><br><span class="line">    Router.push(<span class="string">&#x27;/litterWangA&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">return</span>(</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;div&gt;我是首页&lt;/div&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Link href=<span class="string">&quot;/litterWangA&quot;</span>&gt;</span><br><span class="line">          &lt;a&gt;</span><br><span class="line">            &lt;span&gt;去litterWangA页面&lt;/span&gt;</span><br><span class="line">            &lt;span&gt;前端博客&lt;/span&gt;</span><br><span class="line">          &lt;/a&gt;</span><br><span class="line">        &lt;/Link&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div&gt;&lt;Link href=<span class="string">&quot;/litterWangB&quot;</span>&gt;&lt;a&gt;去litterWangB页面&lt;/a&gt;&lt;/Link&gt;&lt;/div&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button onClick=&#123;gotoA&#125;&gt;去litterWangA页面&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">export</span> default Home</span><br></pre></td></tr></table></figure><p>这样也是可以实现跳转的，而且耦合性也降低了,所以个人更喜欢这种跳转方式。Next的两种跳转方式，第一种是标签式跳转，第二种是编程式跳转。</p><h1 id="路由-跳转时用query传递和接受参数"><a href="#路由-跳转时用query传递和接受参数" class="headerlink" title="路由-跳转时用query传递和接受参数"></a>路由-跳转时用query传递和接受参数</h1><p>项目开发中一般都不是简单的静态跳转，而是需要动态跳转的。动态跳转就是跳转时需要带一个参数或几个参数过去，然后在到达的页面接受这个传递的参数，并根据参数不同显示不同的内容。比如新闻列表，然后点击一个要看的新闻就会跳转到具体内容。这些类似这样的需求都都是通过传递参数实现的。</p><h1 id="只能用query传递参数"><a href="#只能用query传递参数" class="headerlink" title="只能用query传递参数"></a>只能用query传递参数</h1><p>作一个“找小哥哥”的例子，通过这个例子来通俗易懂的讲解一下路由带参数的知识。在Next.js中只能通过通过<code>query（?id=1）</code>来传递参数，而不能通过<code>(path:id)</code>的形式传递参数。</p><p>现在我们改写一下pages文件夹下的index.js文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import React from <span class="string">&#x27;react&#x27;</span></span><br><span class="line">import Link from <span class="string">&#x27;next/link&#x27;</span></span><br><span class="line">import Router from <span class="string">&#x27;next/router&#x27;</span></span><br><span class="line">const Home = () =&gt; &#123;</span><br><span class="line">  <span class="built_in">return</span>(</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;div&gt;我是首页&lt;/div&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Link href=<span class="string">&quot;/xiaogege?name=吴彦祖&quot;</span>&gt;&lt;a&gt;选吴彦祖&lt;/a&gt;&lt;/Link&gt;&lt;br/&gt;</span><br><span class="line">        &lt;Link href=<span class="string">&quot;/xiaogege?name=彭于晏&quot;</span>&gt;&lt;a&gt;选彭于晏&lt;/a&gt;&lt;/Link&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">export</span> default Home</span><br></pre></td></tr></table></figure><p>这样编写query参数就可以进行传递过去了，接下来就是要接受参数了。</p><h2 id="接收传递过来的参数"><a href="#接收传递过来的参数" class="headerlink" title="接收传递过来的参数"></a>接收传递过来的参数</h2><p>现在还没有小哥哥对应的页面，所以我们要创建xiaogege.js页面，并写下下面的代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import &#123; withRouter&#125; from <span class="string">&#x27;next/router&#x27;</span></span><br><span class="line">import Link from <span class="string">&#x27;next/link&#x27;</span></span><br><span class="line"></span><br><span class="line">const xiaogege = (&#123;router&#125;)=&gt;&#123;</span><br><span class="line">    <span class="built_in">return</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &lt;div&gt;&#123;router.query.name&#125;,来为我们服务了 .&lt;/div&gt;</span><br><span class="line">            &lt;Link href=<span class="string">&quot;/&quot;</span>&gt;&lt;a&gt;返回首页&lt;/a&gt;&lt;/Link&gt;</span><br><span class="line">        &lt;/&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default withRouter(xiaogege)</span><br></pre></td></tr></table></figure><p><code>withRouter</code>是Next.js框架的高级组件，用来处理路由用的。通过这种方式就获得了参数，并显示在页面上了。</p><h1 id="编程式跳转传递参数"><a href="#编程式跳转传递参数" class="headerlink" title="编程式跳转传递参数"></a>编程式跳转传递参数</h1><p>回了<code>&lt;Link&gt;</code>这种标签式跳转传递参数的形式，那编程式跳转如何传递那，其实也可以简单使用?加参数的形式，代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div&gt;</span><br><span class="line">  &lt;button onClick=&#123;gotoxiaogege&#125;&gt;选吴彦祖&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">// gotoxiaogege</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">gotoxiaogege</span></span>()&#123;</span><br><span class="line">    Router.push(<span class="string">&#x27;/xiaogege?name=吴彦祖&#x27;</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这种形式跳转和传递参数是完全没有问题的，但是不太优雅，所以也可以写成Object的形式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">gotoxiaogege</span></span>()&#123;</span><br><span class="line">   Router.push(&#123;</span><br><span class="line">     pathname:<span class="string">&#x27;/xiaogege&#x27;</span>,</span><br><span class="line">     query:&#123;</span><br><span class="line">       name:<span class="string">&#x27;吴彦祖&#x27;</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>其实<code>&lt;Link&gt;</code>标签也可以写成这种形式，比如我们把第一个修改成这种形式.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Link href=&#123;&#123;pathname:<span class="string">&#x27;/xiaogege&#x27;</span>,query:&#123;name:<span class="string">&#x27;彭于晏&#x27;</span>&#125;&#125;&#125;&gt;&lt;a&gt;选彭于晏&lt;/a&gt;&lt;/Link&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><p>在浏览器中预览一下，如果一切正常是可以顺利进行跳转，并接收到传递的值。</p><h1 id="路由-六个钩子事件的讲解"><a href="#路由-六个钩子事件的讲解" class="headerlink" title="路由-六个钩子事件的讲解"></a>路由-六个钩子事件的讲解</h1><p>路由的钩子事件，也就是当路由发生变化时，可以监听到这些变化事件，执行对应的函数。它一共有六个钩子事件，这节课就学习一下。</p><h2 id="routerChangeStart路由发生变化时"><a href="#routerChangeStart路由发生变化时" class="headerlink" title="routerChangeStart路由发生变化时"></a>routerChangeStart路由发生变化时</h2><p>在监听路由发生变化时，我们需要用Router组件，然后用on方法来进行监听,在pages文件夹下的index.js，然后写入下面的监听事件，这里我们只打印一句话，就不作其他的事情了。代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> Router.events.on(<span class="string">&#x27;routeChangeStart&#x27;</span>,(...args)=&gt;&#123;</span><br><span class="line">  console.log(<span class="string">&#x27;1.routeChangeStart-&gt;路由开始变化,参数为:&#x27;</span>,...args)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这个时路由发生变化时，时间第一时间被监听到，并执行了里边的方法。</p><h2 id="routerChangeComplete路由结束变化时"><a href="#routerChangeComplete路由结束变化时" class="headerlink" title="routerChangeComplete路由结束变化时"></a>routerChangeComplete路由结束变化时</h2><p>路由变化开始时可以监听到，那结束时也时可以监听到的，这时候监听的事件是routerChangeComplete。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Router.events.on(<span class="string">&#x27;routeChangeComplete&#x27;</span>,(...args)=&gt;&#123;</span><br><span class="line">  console.log(<span class="string">&#x27;routeChangeComplete-&gt;路由结束变化,参数为:&#x27;</span>,...args)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="beforeHistoryChange浏览器history触发前"><a href="#beforeHistoryChange浏览器history触发前" class="headerlink" title="beforeHistoryChange浏览器history触发前"></a>beforeHistoryChange浏览器history触发前</h2><p>history就是HTML中的API，如果这个不了解可以百度了解一下，Next.js路由变化默认都是通过history进行的，所以每次都会调用。 不适用history的话，也可以通过hash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  Router.events.on(<span class="string">&#x27;beforeHistoryChange&#x27;</span>,(...args)=&gt;&#123;</span><br><span class="line">    console.log(<span class="string">&#x27;3,beforeHistoryChange-&gt;在改变浏览器 history之前触发,参数为:&#x27;</span>,...args)</span><br><span class="line">  &#125;)</span><br><span class="line">routeChangeError路由跳转发生错误时</span><br><span class="line"> Router.events.on(<span class="string">&#x27;routeChangeError&#x27;</span>,(...args)=&gt;&#123;</span><br><span class="line">    console.log(<span class="string">&#x27;4,routeChangeError-&gt;跳转发生错误,参数为:&#x27;</span>,...args)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>需要注意的是404找不到路由页面不算错误，这个我们就不演示了。</p><h2 id="转变成hash路由模式"><a href="#转变成hash路由模式" class="headerlink" title="转变成hash路由模式"></a>转变成hash路由模式</h2><p>还有两种事件，都是针对hash的，所以现在要转变成hash模式。hash模式下的两个事件<code>hashChangeStart</code>和<code>hashChangeComplete</code>,就都在这里进行编写了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Router.events.on(<span class="string">&#x27;hashChangeStart&#x27;</span>,(...args)=&gt;&#123;</span><br><span class="line">  console.log(<span class="string">&#x27;5,hashChangeStart-&gt;hash跳转开始时执行,参数为:&#x27;</span>,...args)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Router.events.on(<span class="string">&#x27;hashChangeComplete&#x27;</span>,(...args)=&gt;&#123;</span><br><span class="line">  console.log(<span class="string">&#x27;6,hashChangeComplete-&gt;hash跳转完成时,参数为:&#x27;</span>,...args)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在下面的jsx语法部分，再增加一个链接,使用hash来进行跳转，代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;Link href=<span class="string">&quot;#litterWang&quot;</span>&gt;&lt;a&gt;选litterWang&lt;/a&gt;&lt;/Link&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>为了方便你学习，我这里给出index.js的全部代码，你可以在练习时进行参考。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"> import React from <span class="string">&#x27;react&#x27;</span></span><br><span class="line">import Link from <span class="string">&#x27;next/link&#x27;</span></span><br><span class="line">import Router from <span class="string">&#x27;next/router&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const Home = () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="function"><span class="title">gotoxiaogege</span></span>()&#123;</span><br><span class="line">    Router.push(&#123;</span><br><span class="line">      pathname:<span class="string">&#x27;/xiaogege&#x27;</span>,</span><br><span class="line">      query:&#123;</span><br><span class="line">        name:<span class="string">&#x27;吴彦祖&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Router.events.on(<span class="string">&#x27;routeChangeStart&#x27;</span>,(...args)=&gt;&#123;</span><br><span class="line">    console.log(<span class="string">&#x27;1.routeChangeStart-&gt;路由开始变化,参数为:&#x27;</span>,...args)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  Router.events.on(<span class="string">&#x27;routeChangeComplete&#x27;</span>,(...args)=&gt;&#123;</span><br><span class="line">    console.log(<span class="string">&#x27;2.routeChangeComplete-&gt;路由结束变化,参数为:&#x27;</span>,...args)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  Router.events.on(<span class="string">&#x27;beforeHistoryChange&#x27;</span>,(...args)=&gt;&#123;</span><br><span class="line">    console.log(<span class="string">&#x27;3,beforeHistoryChange-&gt;在改变浏览器 history之前触发,参数为:&#x27;</span>,...args)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  Router.events.on(<span class="string">&#x27;routeChangeError&#x27;</span>,(...args)=&gt;&#123;</span><br><span class="line">    console.log(<span class="string">&#x27;4,routeChangeError-&gt;跳转发生错误,参数为:&#x27;</span>,...args)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  Router.events.on(<span class="string">&#x27;hashChangeStart&#x27;</span>,(...args)=&gt;&#123;</span><br><span class="line">    console.log(<span class="string">&#x27;5,hashChangeStart-&gt;hash跳转开始时执行,参数为:&#x27;</span>,...args)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  Router.events.on(<span class="string">&#x27;hashChangeComplete&#x27;</span>,(...args)=&gt;&#123;</span><br><span class="line">    console.log(<span class="string">&#x27;6,hashChangeComplete-&gt;hash跳转完成时,参数为:&#x27;</span>,...args)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="built_in">return</span>(</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;div&gt;我是首页&lt;/div&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Link href=&#123;&#123;pathname:<span class="string">&#x27;/xiaogege&#x27;</span>,query:&#123;name:<span class="string">&#x27;彭于晏&#x27;</span>&#125;&#125;&#125;&gt;&lt;a&gt;选彭于晏&lt;/a&gt;&lt;/Link&gt;&lt;br/&gt;</span><br><span class="line">        &lt;Link href=<span class="string">&quot;/xiaogege?name=吴彦祖&quot;</span>&gt;&lt;a&gt;选吴彦祖&lt;/a&gt;&lt;/Link&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button onClick=&#123;gotoxiaogege&#125;&gt;选吴彦祖&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">         &lt;Link href=<span class="string">&quot;#litterWang&quot;</span>&gt;&lt;a&gt;选litterWang&lt;/a&gt;&lt;/Link&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">export</span> default Home</span><br></pre></td></tr></table></figure><p>这节主要学习了路由的钩子事件，利用钩子事件是可以作很多事情的，比如转换时的加载动画，关掉页面的一些资源计数器…..。</p><h1 id="在getInitialProps中用Axios获取远端数据"><a href="#在getInitialProps中用Axios获取远端数据" class="headerlink" title="在getInitialProps中用Axios获取远端数据"></a>在getInitialProps中用Axios获取远端数据</h1><p>在Next.js框架中提供了<code>getInitialProps</code>静态方法用来获取远端数据，这个是框架的约定，所以你也只能在这个方法里获取远端数据。不要再试图在声明周期里获得，虽然也可以在<code>ComponentDidMount</code>中获得，但是用了别人的框架，就要遵守别人的约定。</p><h2 id="安装和引入Axios插件"><a href="#安装和引入Axios插件" class="headerlink" title="安装和引入Axios插件"></a>安装和引入Axios插件</h2><p>Axios是目前最或的前端获取数据的插件了，也是由大神首推的数据接口请求插件.在请求前需要先安装Axios插件。</p><p>打开终端，直接使用yarn命令进行安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add axios</span><br></pre></td></tr></table></figure><p>安装完成后，在需要的页面中用import引入axios，代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import axios from <span class="string">&#x27;axios&#x27;</span></span><br></pre></td></tr></table></figure><p>引入后，就可以使用getInitialProps进行获取后端接口数据了。</p><h2 id="getInitialProps中获取数据"><a href="#getInitialProps中获取数据" class="headerlink" title="getInitialProps中获取数据"></a>getInitialProps中获取数据</h2><p>在<code>xiaogege.js</code>页面中使用<code>getInitialProps</code>，因为是远程获取数据，所以我们采用异步请求的方式。数据存在了Easy Mock中，地址如下：</p><p><a href="https://www.easy-mock.com/mock/5cfcce489dc7c36bd6da2c99/xiaogege/getList">https://www.easy-mock.com/mock/5cfcce489dc7c36bd6da2c99/xiaogege/getList</a><br>(你可以自己作一个数据源，因为这个可能也不稳定，不过半年内应该是可以的)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">xiaogege.getInitialProps = async ()=&gt;&#123;</span><br><span class="line">    const promise =new Promise((resolve)=&gt;&#123;</span><br><span class="line">            axios(<span class="string">&#x27;https://www.easy-mock.com/mock/5cfcce489dc7c36bd6da2c99/xiaogege/getList&#x27;</span>).<span class="keyword">then</span>(</span><br><span class="line">                (res)=&gt;&#123;</span><br><span class="line">                    console.log(<span class="string">&#x27;远程数据结果：&#x27;</span>,res)</span><br><span class="line">                    resolve(res.data.data)</span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">return</span> await promise</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获得数据后，我们需要把得到的数据传递给页面组件，用{}显示出来就可以了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const xiaogege = (&#123;router,list&#125;)=&gt;&#123;</span><br><span class="line">    <span class="built_in">return</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &lt;div&gt;&#123;router.query.name&#125;,来为我们服务了 .&lt;br/&gt;&#123;list&#125;&lt;/div&gt;</span><br><span class="line">            &lt;Link href=<span class="string">&quot;/&quot;</span>&gt;&lt;a&gt;返回首页&lt;/a&gt;&lt;/Link&gt;</span><br><span class="line">        &lt;/&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就利用Axios从远端获取了数据，xiaogege.js的所有代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import &#123; withRouter&#125; from &#39;next&#x2F;router&#39;</span><br><span class="line">import Link from &#39;next&#x2F;link&#39;</span><br><span class="line">import axios from &#39;axios&#39;</span><br><span class="line"></span><br><span class="line">const xiaogege &#x3D; (&#123;router,list&#125;)&#x3D;&gt;&#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &lt;div&gt;&#123;router.query.name&#125;,来为我们服务了 .&lt;br&#x2F;&gt;&#123;list&#125;&lt;&#x2F;div&gt;</span><br><span class="line">            &lt;Link href&#x3D;&quot;&#x2F;&quot;&gt;&lt;a&gt;返回首页&lt;&#x2F;a&gt;&lt;&#x2F;Link&gt;</span><br><span class="line">        &lt;&#x2F;&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">xiaogege.getInitialProps &#x3D; async ()&#x3D;&gt;&#123;</span><br><span class="line">    const promise &#x3D;new Promise((resolve)&#x3D;&gt;&#123;</span><br><span class="line">            axios(&#39;https:&#x2F;&#x2F;www.easy-mock.com&#x2F;mock&#x2F;5cfcce489dc7c36bd6da2c99&#x2F;xiaogege&#x2F;getList&#39;).then(</span><br><span class="line">                (res)&#x3D;&gt;&#123;</span><br><span class="line">                    console.log(&#39;远程数据结果：&#39;,res)</span><br><span class="line">                    resolve(res.data.data)</span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line">    &#125;)</span><br><span class="line">    return await promise</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default withRouter(xiaogege)</span><br></pre></td></tr></table></figure><p>这节课主要学习了在Next.js框架下在getInitialProps方法中利用Axios来获取远端数据的的操作，这个在实际项目中是必备技能，所以需要多练习几遍。</p><h1 id="使用Style-JSX编写页面的CSS样式"><a href="#使用Style-JSX编写页面的CSS样式" class="headerlink" title="使用Style JSX编写页面的CSS样式"></a>使用Style JSX编写页面的CSS样式</h1><p>在Next.js中引入一个CSS样式是不可以用的，如果想用，需要作额外的配置。因为框架为我们提供了一个style jsx特性，也就是把CSS用JSX的语法写出来。如果你以前学过Vue，那这种写法你是非常熟悉的。</p><h2 id="初识Style-JSX语法-把字体设成蓝色"><a href="#初识Style-JSX语法-把字体设成蓝色" class="headerlink" title="初识Style JSX语法 把字体设成蓝色"></a>初识Style JSX语法 把字体设成蓝色</h2><p>在pages文件夹下，新建一个litterWang.js文件。然后写入下面的代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//litterWang.js</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">litterWang</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &lt;div&gt;litterWang免费前端教程&lt;/div&gt;</span><br><span class="line">        &lt;/&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">export</span> default litterWang</span><br></pre></td></tr></table></figure><p>这个是一个最简单的页面，只在层中写了一句话。这时候我们想把页面中字的颜色变成蓝色，就可以使用Style JSX语法。直接在&lt;&gt;&lt;/&gt;之间写下如下的代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style jsx&gt;</span><br><span class="line">    &#123;&#96;</span><br><span class="line">        div&#123;color:blue;&#125;</span><br><span class="line">    &#96;&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>主要所有的css样式需要用{}进行包裹，否则就会报错。这时候你打开浏览器进行预览，字体的颜色就变成了蓝色。</p><h2 id="自动加随机类名-不会污染全局CSS"><a href="#自动加随机类名-不会污染全局CSS" class="headerlink" title="自动加随机类名 不会污染全局CSS"></a>自动加随机类名 不会污染全局CSS</h2><p>加入了Style jsx代码后，Next.js会自动加入一个随机类名，这样就防止了CSS的全局污染。比如我们把代码写成下面这样，然后在浏览器的控制台中进行查看，你会发现自动给我们加入了类名，类似jsx-xxxxxxxx。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">litterWang</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &lt;div&gt;litterWang免费前端教程&lt;/div&gt;</span><br><span class="line">            &lt;div className=<span class="string">&quot;litterWang&quot;</span>&gt;litterWang免费前端教程&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;style jsx&gt;</span><br><span class="line">                &#123;`</span><br><span class="line">                    div &#123; color:blue;&#125;</span><br><span class="line">                    .litterWang &#123;color:red;&#125;</span><br><span class="line">                `&#125;</span><br><span class="line">            &lt;/style&gt;</span><br><span class="line">        &lt;/&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">export</span> default litterWang</span><br></pre></td></tr></table></figure><h2 id="动态显示样式"><a href="#动态显示样式" class="headerlink" title="动态显示样式"></a>动态显示样式</h2><p>Next.js使用了Style jsx,所以定义动态的CSS样式就非常简单，比如现在要作一个按钮，点击一下，字体颜色就由蓝色变成了红色。下面是实现代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123;useState&#125; from <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">litterWang</span></span>()&#123;</span><br><span class="line">    //关键代码----------start-------</span><br><span class="line">    const [color,setColor] = useState(<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    const changeColor=()=&gt;&#123;</span><br><span class="line"></span><br><span class="line">        setColor(color==<span class="string">&#x27;blue&#x27;</span>?<span class="string">&#x27;red&#x27;</span>:<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">     //关键代码----------end-------</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &lt;div&gt;litterWang免费前端教程&lt;/div&gt;</span><br><span class="line">            &lt;div&gt;&lt;button onClick=&#123;changeColor&#125;&gt;改变颜色&lt;/button&gt;&lt;/div&gt;</span><br><span class="line">            &lt;style jsx&gt;</span><br><span class="line">                &#123;`</span><br><span class="line">                    div &#123; color:<span class="variable">$&#123;color&#125;</span>;&#125;</span><br><span class="line">                `&#125;</span><br><span class="line">            &lt;/style&gt;</span><br><span class="line">        &lt;/&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">export</span> default litterWang</span><br></pre></td></tr></table></figure><h1 id="Lazy-Loading实现模块懒加载"><a href="#Lazy-Loading实现模块懒加载" class="headerlink" title="Lazy Loading实现模块懒加载"></a>Lazy Loading实现模块懒加载</h1><p>当项目越来越大的时候，模块的加载是需要管理的，如果不管理会出现首次打开过慢，页面长时间没有反应一系列问题。这时候可用Next.js提供的LazyLoading来解决这类问题。让模块和组件只有在用到的时候在进行加载，一般我把这种东西叫做“懒加载”.它一般分为两种情况，一种是懒加载（或者说是异步加载）模块，另一种是异步加载组件。</p><h2 id="懒加载模块"><a href="#懒加载模块" class="headerlink" title="懒加载模块"></a>懒加载模块</h2><p>这里使用一个在开发中常用的模块<code>Moment.js</code>，它是一个JavaScript日期处理类库，使用前需要先进行安装，这里使用<code>yarn</code>来进行安装。</p><p><code>yarn add momnet</code></p><p>然后在pages文件夹下，新建立一个time.js文件，并使用刚才的moment库来格式化时间，代码如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123;useState&#125; from <span class="string">&#x27;react&#x27;</span></span><br><span class="line">import moment from <span class="string">&#x27;moment&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Time</span></span>()&#123;</span><br><span class="line"></span><br><span class="line">    const [nowTime,setTime] = useState(Date.now())</span><br><span class="line"></span><br><span class="line">    const changeTime=()=&gt;&#123;</span><br><span class="line">        setTime(moment(Date.now()).format())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &lt;div&gt;显示时间为:&#123;nowTime&#125;&lt;/div&gt;</span><br><span class="line">            &lt;div&gt;&lt;button onClick=&#123;changeTime&#125;&gt;改变时间格式&lt;/button&gt;&lt;/div&gt;</span><br><span class="line">        &lt;/&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">export</span> default Time</span><br></pre></td></tr></table></figure><p>这个看起来很简单和清晰的案例，缺存在着一个潜在的风险，就是如何有半数以上页面使用了这个momnet的库，那它就会以公共库的形式进行打包发布，就算项目第一个页面不使用moment也会进行加载，这就是资源浪费，对于我这样有代码洁癖的良好程序员是绝对不允许的。下面我们就通过Lazy Loading来进行改造代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123;useState&#125; from <span class="string">&#x27;react&#x27;</span></span><br><span class="line">//删除import moment</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Time</span></span>()&#123;</span><br><span class="line"></span><br><span class="line">    const [nowTime,setTime] = useState(Date.now())</span><br><span class="line"></span><br><span class="line">    const changeTime= async ()=&gt;&#123; //把方法变成异步模式</span><br><span class="line">        const moment = await import(<span class="string">&#x27;moment&#x27;</span>) //等待moment加载完成</span><br><span class="line">        setTime(moment.default(Date.now()).format()) //注意使用defalut</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &lt;div&gt;显示时间为:&#123;nowTime&#125;&lt;/div&gt;</span><br><span class="line">            &lt;div&gt;&lt;button onClick=&#123;changeTime&#125;&gt;改变时间格式&lt;/button&gt;&lt;/div&gt;</span><br><span class="line">        &lt;/&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">export</span> default Time</span><br></pre></td></tr></table></figure><p>这时候就就是懒加载了，可以在浏览器中按F12，看一下Network标签，当我们点击按钮时，才会加载1.js,它就是momnet.js的内容。</p><h2 id="懒加载自定义组件"><a href="#懒加载自定义组件" class="headerlink" title="懒加载自定义组件"></a>懒加载自定义组件</h2><p>懒加载组件也是非常容易的，我们先来写一个最简单的组件，在components文件夹下建立一个one.js文件，然后编写如下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default ()=&gt;&lt;div&gt;Lazy Loading Component&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>有了自定义组件后，先要在懒加载这个组件的文件中引入dynamic,我们这个就在上边新建的time.js文件中编写了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import dynamic from <span class="string">&#x27;next/dynamic&#x27;</span></span><br></pre></td></tr></table></figure><p>引入后就可以懒加载自定义模块了，代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123;useState&#125; from <span class="string">&#x27;react&#x27;</span></span><br><span class="line">import dynamic from <span class="string">&#x27;next/dynamic&#x27;</span></span><br><span class="line"></span><br><span class="line">const One = dynamic(import(<span class="string">&#x27;../components/one&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Time</span></span>()&#123;</span><br><span class="line"></span><br><span class="line">    const [nowTime,setTime] = useState(Date.now())</span><br><span class="line"></span><br><span class="line">    const changeTime= async ()=&gt;&#123;</span><br><span class="line">        const moment = await import(<span class="string">&#x27;moment&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        setTime(moment.default(Date.now()).format())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &lt;div&gt;显示时间为:&#123;nowTime&#125;&lt;/div&gt;</span><br><span class="line">            &lt;One/&gt;</span><br><span class="line">            &lt;div&gt;&lt;button onClick=&#123;changeTime&#125;&gt;改变时间格式&lt;/button&gt;&lt;/div&gt;</span><br><span class="line">        &lt;/&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">export</span> default Time</span><br></pre></td></tr></table></figure><p>写完代码后，可以看到自定义组件是懒加载的，只有在jsx里用到<code>&lt;One/&gt;</code>时，才会被加载进来，如果不使用就不会被加载。</p><p>当我们作的应用存在首页打开过慢和某个页面加载过慢时，就可以采用Lazy Loading的形式，用懒加载解决这些问题。</p><h1 id="自定义Head-更加友好的SEO操作"><a href="#自定义Head-更加友好的SEO操作" class="headerlink" title="自定义Head 更加友好的SEO操作"></a>自定义Head 更加友好的SEO操作</h1><p>既然用了Next.js框架，你就是希望服务端渲染，进行SEO操作。那为了更好的进行SEO优化，可以自己定制<code>&lt;Head&gt;</code>标签，定义<code>&lt;Head&gt;</code>一般有两种方式，这节课都学习一下。</p><h2 id="方法1：在各个页面加上-lt-Head-gt-标签"><a href="#方法1：在各个页面加上-lt-Head-gt-标签" class="headerlink" title="方法1：在各个页面加上&lt;Head&gt;标签"></a>方法1：在各个页面加上<code>&lt;Head&gt;</code>标签</h2><p>先在/pages文件夹下面建立一个header.js文件，然后写一个最简单的Hooks页面，代码如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Header</span></span>()&#123; </span><br><span class="line">    <span class="built_in">return</span> (&lt;div&gt;litterWang.com&lt;/div&gt;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">export</span> default Header</span><br></pre></td></tr></table></figure><p>写完后到浏览器中预览一下，可以发现title部分并没有任何内容，显示的是<code>localhost:3000/header</code>,接下来就自定义下<code>&lt;Head&gt;</code>。自定义需要先进行引入next/head。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import Head from <span class="string">&#x27;next/head&#x27;</span></span><br><span class="line">引入后你就可以写一些列的头部标签了，全部代码如下:</span><br><span class="line"></span><br><span class="line">import Head from <span class="string">&#x27;next/head&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Header</span></span>()&#123; </span><br><span class="line">    <span class="built_in">return</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &lt;Head&gt;</span><br><span class="line">                &lt;title&gt;litterWang是最胖的！&lt;/title&gt;</span><br><span class="line">                &lt;meta charSet=<span class="string">&#x27;utf-8&#x27;</span> /&gt;</span><br><span class="line">            &lt;/Head&gt;</span><br><span class="line">            &lt;div&gt;litterWang.com&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/&gt; </span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">export</span> default Header</span><br></pre></td></tr></table></figure><p>这时候再打开浏览器预览，你发现已经有了title。</p><h2 id="方法2：定义全局的"><a href="#方法2：定义全局的" class="headerlink" title="方法2：定义全局的"></a>方法2：定义全局的<Head></h2><p>这种方法相当于自定义了一个组件，然后把<Head>在组件里定义好，以后每个页面都使用这个组件,其实这种方法用处不大，也不灵活。因为Next.js已经把<code>&lt;Head&gt;</code>封装好了，本身就是一个组件，我们再次封装的意义不大。</p><p>比如在components文件夹下面新建立一个myheader.js,然后写入下面的代码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import Head from <span class="string">&#x27;next/head&#x27;</span></span><br><span class="line"></span><br><span class="line">const MyHeader = ()=&gt;&#123;</span><br><span class="line">    <span class="built_in">return</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &lt;Head&gt;</span><br><span class="line">                &lt;title&gt; litterWang.com &lt;/title&gt;   </span><br><span class="line">            &lt;/Head&gt;</span><br><span class="line">        &lt;/&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default MyHeader</span><br></pre></td></tr></table></figure><p>这时候把刚才编写的header.js页面改写一下，引入自定义的myheader，在页面里进行使用，最后在浏览器中预览，也是可以得到title的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import Myheader from <span class="string">&#x27;../components/myheader&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Header</span></span>()&#123; </span><br><span class="line">    <span class="built_in">return</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &lt;Myheader /&gt;</span><br><span class="line">            &lt;div&gt;litterWang.com&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/&gt; </span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">export</span> default Header</span><br></pre></td></tr></table></figure><p>这节课讲解了一下Next.js的<code>&lt;Head&gt;</code>标签如何使用和自定义，这个在工作中的每个页面都会用到，所以你一定要学会哦。</p><h1 id="p11：Next-js框架下使用Ant-Design-UI"><a href="#p11：Next-js框架下使用Ant-Design-UI" class="headerlink" title="p11：Next.js框架下使用Ant Design UI"></a>p11：Next.js框架下使用Ant Design UI</h1><p>在Next.js框架下使用 Ant Design，是最近小伙伴们问我最多的一个问题，所以决定单独拿出一节课来讲一下。Ant Design是一款阿里开源的前端组件库，我在工作中也一直在使用，我觉的它是目前阿里开源的前端项目是最成功的,使用人数也是最多的一个。不过它的初心是用来搭建项目的中后台系统，比如后台的管理系统。从React的角度来讲，它就是一个组件库，里边封装了开发中最常用的一些组件，让我们可以通过简单的配置就可以使用他们。</p><h2 id="让Next-js支持CSS文件"><a href="#让Next-js支持CSS文件" class="headerlink" title="让Next.js支持CSS文件"></a>让Next.js支持CSS文件</h2><p>Next.js默认是不支持CSS文件的，它用的是style jsx，也就是说它是不支持直接用import进行引入css的。</p><p>比如在根目录下新建一个文件夹static（其实正常情况下你应该已经有这个文件了），然后在文件夹下建立一个test.css文件，写入一些CSS Style。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">body&#123;</span><br><span class="line">    color:green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后用import在header.js里引入。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import <span class="string">&#x27;../static/test.css&#x27;</span></span><br></pre></td></tr></table></figure><p>写完这些后到浏览器中进行预览，没有任何输出结果而且报错了。这说明Next.js默认是不支持CSS样式引入的，要进行一些必要的设置，才可以完成。</p><p>开始进行配置，让Next.js支持CSS文件</p><p>先用yarn命令来安装@zeit/next-css包，它的主要功能就是让Next.js可以加载CSS文件，有了这个包才可以进行配置。</p><p><code>yarn add @zeit/next-css</code></p><p>包安装好以后就可以进行配置文件的编写了，建立一个next.config.js.这个就是Next.js的总配置文件（如果感兴趣可以自学一下）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const withCss = require(<span class="string">&#x27;@zeit/next-css&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(typeof require !== <span class="string">&#x27;undefined&#x27;</span>)&#123;</span><br><span class="line">    require.extensions[<span class="string">&#x27;.css&#x27;</span>]=file=&gt;&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = withCss(&#123;&#125;)</span><br></pre></td></tr></table></figure><p>修改配置文件需要重新启一下服务，重启服务可以让配置生效，这时候你到浏览器中可以发现CSS文件已经生效了，字变成了绿色。</p><h2 id="按需加载Ant-Design"><a href="#按需加载Ant-Design" class="headerlink" title="按需加载Ant Design"></a>按需加载Ant Design</h2><p>加载Ant Design在我们打包的时候会把Ant Design的所有包都打包进来，这样就会产生性能问题，让项目加载变的非常慢。这肯定是不行的，现在的目的是只加载项目中用到的模块，这就需要我们用到一个babel-plugin-import文件。</p><h2 id="先来安装Ant-Design库"><a href="#先来安装Ant-Design库" class="headerlink" title="** 先来安装Ant Design库 **"></a>** 先来安装Ant Design库 **</h2><p>直接使用yarn来安装就可以。</p><p><code>yarn add antd</code></p><h2 id="安装和配置babel-plugin-import-插件"><a href="#安装和配置babel-plugin-import-插件" class="headerlink" title="** 安装和配置babel-plugin-import 插件 **"></a>** 安装和配置babel-plugin-import 插件 **</h2><p>其实babel-plugin-import我讲Vue.js和Webpack.js的时候都一次讲过这个插件，这里我们就再来讲一下，先进行安装。</p><p><code>yarn add babel-plugin-import</code><br>安装完成后，在项目根目录建立.babelrc文件，然后写入如下配置文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;presets&quot;</span>:[<span class="string">&quot;next/babel&quot;</span>],  //Next.js的总配置文件，相当于继承了它本身的所有配置</span><br><span class="line">    <span class="string">&quot;plugins&quot;</span>:[     //增加新的插件，这个插件就是让antd可以按需引入，包括CSS</span><br><span class="line">        [</span><br><span class="line">            <span class="string">&quot;import&quot;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;libraryName&quot;</span>:<span class="string">&quot;antd&quot;</span>,</span><br><span class="line">                <span class="string">&quot;style&quot;</span>:<span class="string">&quot;css&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样配置好了以后，webpack就不会默认把整个Ant Design的包都进行打包到生产环境了，而是我们使用那个组件就打包那个组件,同样CSS也是按需打包的。</p><p>通过上面的配置，就可以愉快的在Next.js中使用Ant Desgin，让页面变的好看起来。</p><p>可以在header.js里，引入<Button>组件，并进行使用，代码如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import Myheader from <span class="string">&#x27;../components/myheader&#x27;</span></span><br><span class="line">import &#123;Button&#125; from <span class="string">&#x27;antd&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import <span class="string">&#x27;../static/test.css&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Header</span></span>()&#123; </span><br><span class="line">    <span class="built_in">return</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &lt;Myheader /&gt;</span><br><span class="line">            &lt;div&gt;litterWang.com&lt;/div&gt;</span><br><span class="line">            &lt;div&gt;&lt;Button&gt;我是按钮&lt;/Button&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/&gt; </span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">export</span> default Header</span><br></pre></td></tr></table></figure><p>然后到浏览器中查看一下结果，这时候Ant Design已经起作用了，我们也完成了在Next.js中，使用Ant Design的目的。</p><h1 id="Next-js生产环境打包（完结）"><a href="#Next-js生产环境打包（完结）" class="headerlink" title="Next.js生产环境打包（完结）"></a>Next.js生产环境打包（完结）</h1><p>如何进行打包和打包中的一些坑。</p><p>其实Next.js大打包时非常简单的，只要一个命令就可以打包成功。但是当你使用了Ant Desgin后，在打包的时候会遇到一些坑。</p><p>打包 ：next build</p><p>运行：next start -p 80</p><p>先把这两个命令配置到package.json文件里，比如配置成下面的样子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;next dev&quot;</span>,</span><br><span class="line">  <span class="string">&quot;build&quot;</span>: <span class="string">&quot;next build&quot;</span>,</span><br><span class="line">  <span class="string">&quot;start&quot;</span>: <span class="string">&quot;next start -p 80&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>然后在终端里运行一下<code>yarn build</code>，如果这时候报错，其实是我们在加入Ant Design的样式时产生的，这个已经在Ant Design的Github上被提出了，但目前还没有被修改，你可以改完全局引入CSS解决问题。</p><p>在page目录下，新建一个_app.js文件，然后写入下面的代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import App from <span class="string">&#x27;next/app&#x27;</span></span><br><span class="line"></span><br><span class="line">import <span class="string">&#x27;antd/dist/antd.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default App</span><br></pre></td></tr></table></figure><p>这样配置一下，就可以打包成功了，然后再运行yarn start来运行服务器，看一下我们的header页面，也是有样式的。说明打包已经成功了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Next-js简介&quot;&gt;&lt;a href=&quot;#Next-js简介&quot; class=&quot;headerlink&quot; title=&quot;Next.js简介&quot;&gt;&lt;/a&gt;Next.js简介&lt;/h1&gt;&lt;div class=&quot;note default&quot;&gt;&lt;p&gt;Next.js 是一个轻量级的 </summary>
      
    
    
    
    <category term="react学习" scheme="https://hard-workingrookie.github.io/categories/react%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="react" scheme="https://hard-workingrookie.github.io/tags/react/"/>
    
    <category term="Next.js" scheme="https://hard-workingrookie.github.io/tags/Next-js/"/>
    
  </entry>
  
  <entry>
    <title>笔记</title>
    <link href="https://hard-workingrookie.github.io/2020/08/27/%E7%AC%94%E8%AE%B0/"/>
    <id>https://hard-workingrookie.github.io/2020/08/27/%E7%AC%94%E8%AE%B0/</id>
    <published>2020-08-27T11:24:37.000Z</published>
    <updated>2020-09-22T14:27:08.404Z</updated>
    
    <content type="html"><![CDATA[<h1 id="babel-plugin-import"><a href="#babel-plugin-import" class="headerlink" title="babel-plugin-import"></a>babel-plugin-import</h1><p>webpack 就不会默认把整个的包都进行打包到生产环境了，而是我们使用那个组件就打包那个组件,同样 CSS 也是按需打包的。</p><p>配置举例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;presets&quot;</span>:[<span class="string">&quot;next/babel&quot;</span>],  //Next.js的总配置文件，相当于继承了它本身的所有配置</span><br><span class="line">    <span class="string">&quot;plugins&quot;</span>:[     //增加新的插件，这个插件就是让antd可以按需引入，包括CSS</span><br><span class="line">        [</span><br><span class="line">            <span class="string">&quot;import&quot;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;libraryName&quot;</span>:<span class="string">&quot;antd&quot;</span>,</span><br><span class="line">                <span class="string">&quot;style&quot;</span>:<span class="string">&quot;css&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="next-js-引入-css"><a href="#next-js-引入-css" class="headerlink" title="next.js 引入 css"></a>next.js 引入 css</h1><p>先用 yarn 命令来安装@zeit/next-css 包，它的主要功能就是让 Next.js 可以加载 CSS 文件，有了这个包才可以进行配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add @zeit/next-css</span><br></pre></td></tr></table></figure><p>包安装好以后就可以进行配置文件的编写了，建立一个 next.config.js.这个就是 Next.js 的总配置文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const withCss = require(<span class="string">&#x27;@zeit/next-css&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(typeof require !== <span class="string">&#x27;undefined&#x27;</span>)&#123;</span><br><span class="line">    require.extensions[<span class="string">&#x27;.css&#x27;</span>]=file=&gt;&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = withCss(&#123;&#125;)</span><br></pre></td></tr></table></figure><p>这段代码你有兴趣是可以看看的，其实我对配置文件基本不记忆的，因为配置文件就是别人规定的配置，你写就好。比如要使用 CSS 就可以把上面这段代码输入到放入到里边的就好了。</p><p>修改配置文件需要重新启一下服务(<code>yarn dev </code>)，重启服务可以让配置生效，这时候你到浏览器中可以发现 CSS 文件已经生效了。</p><h1 id="1-markdown-解析组件"><a href="#1-markdown-解析组件" class="headerlink" title="1.markdown 解析组件"></a>1.markdown 解析组件</h1><p>react-markdown 是 react 专用的 markdown 解析组件</p><div class="note default"><p>github 网址：<a href="https://github.com/rexxars/react-markdown">https://github.com/rexxars/react-markdown</a></p></div><p>可以直接使用 yarn add 来进行安装，代码如下:</p><p><code>yarn add react-markdown</code><br>安装好后，使用 import 进行引入，代码如下:</p><p><code>import ReactMarkdown from &#39;react-markdown&#39;</code></p><p>准备 md 相关数据<br>因为目前还没有后端程序，所以需要伪造一个 md 数据，让 web 页面可以渲染。</p><p>这里声明一个 markdown 变量,当然内容全部是我胡乱写的，为的就是可以顺利渲染出来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> markdown=<span class="string">&#x27;# P01:课程介绍和环境搭建\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;[ **M** ] arkdown + E [ **ditor** ] = **Mditor**  \n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&gt; Mditor 是一个简洁、易于集成、方便扩展、期望舒服的编写 markdown 的编辑器，仅此而已... \n\n&#x27;</span> +</span><br><span class="line">   <span class="string">&#x27;**这是加粗的文字**\n\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;*这是倾斜的文字*`\n\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;***这是斜体加粗的文字***\n\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;~~这是加删除线的文字~~ \n\n&#x27;</span>+</span><br><span class="line">  <span class="string">&#x27;\`console.log(111)\` \n\n&#x27;</span>+</span><br><span class="line">  <span class="string">&#x27;# p02:来个Hello World 初始Vue3.0\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&gt; aaaaaaaaa\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&gt;&gt; bbbbbbbbb\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&gt;&gt;&gt; cccccccccc\n&#x27;</span>+</span><br><span class="line">  <span class="string">&#x27;***\n\n\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;# p03:Vue3.0基础知识讲解\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&gt; aaaaaaaaa\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&gt;&gt; bbbbbbbbb\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&gt;&gt;&gt; cccccccccc\n\n&#x27;</span>+</span><br><span class="line">  <span class="string">&#x27;# p04:Vue3.0基础知识讲解\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&gt; aaaaaaaaa\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&gt;&gt; bbbbbbbbb\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&gt;&gt;&gt; cccccccccc\n\n&#x27;</span>+</span><br><span class="line">  <span class="string">&#x27;#5 p05:Vue3.0基础知识讲解\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&gt; aaaaaaaaa\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&gt;&gt; bbbbbbbbb\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&gt;&gt;&gt; cccccccccc\n\n&#x27;</span>+</span><br><span class="line">  <span class="string">&#x27;# p06:Vue3.0基础知识讲解\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&gt; aaaaaaaaa\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&gt;&gt; bbbbbbbbb\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&gt;&gt;&gt; cccccccccc\n\n&#x27;</span>+</span><br><span class="line">  <span class="string">&#x27;# p07:Vue3.0基础知识讲解\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&gt; aaaaaaaaa\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&gt;&gt; bbbbbbbbb\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&gt;&gt;&gt; cccccccccc\n\n&#x27;</span>+</span><br><span class="line">  <span class="string">&#x27;``` var a=11; ```&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="使用-react-markdown-渲染-markdown"><a href="#使用-react-markdown-渲染-markdown" class="headerlink" title="使用 react-markdown 渲染 markdown"></a>使用 react-markdown 渲染 markdown</h2><p>现在组件和 markdown 文件都准备好了，可以进行渲染了。代码如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=<span class="string">&quot;detailed-content&quot;</span> &gt;</span><br><span class="line">    &lt;ReactMarkdown</span><br><span class="line">      <span class="built_in">source</span>=&#123;markdown&#125;</span><br><span class="line">      escapeHtml=&#123;<span class="literal">false</span>&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>现在可以到浏览器中预览一下了，如果一切正常，应该可以正常使用 markdown 语法了。</p><h1 id="2-markdown-解析组件"><a href="#2-markdown-解析组件" class="headerlink" title="2.markdown 解析组件"></a>2.markdown 解析组件</h1><p>前面介紹的 react-markdown,但是这个插件的配置项还是太少了，现在介绍的是 marked+highlight.js。这个方案是比较成熟的，目前公司的开发文档程序就是基于这个开发的。</p><h2 id="安装-marked-和-highlight"><a href="#安装-marked-和-highlight" class="headerlink" title="安装 marked 和 highlight"></a>安装 marked 和 highlight</h2><p>这两个模块需要先安装，这里我们就使用 yarn 来进行安装。打开终端，进入到 blog 目录下，然后使用下面命令进行安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add marked highlight.js</span><br></pre></td></tr></table></figure><p>我目前的版本是 marked 是 0.7.0,highlight 是 9.15.10。如果版本有变化，导致代码没法运行，可自行查看 API 进行修改。</p><h2 id="引入模块"><a href="#引入模块" class="headerlink" title="引入模块"></a>引入模块</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import marked from <span class="string">&#x27;marked&#x27;</span></span><br><span class="line">import hljs from <span class="string">&quot;highlight.js&quot;</span>;</span><br><span class="line">import <span class="string">&#x27;highlight.js/styles/monokai-sublime.css&#x27;</span>;</span><br></pre></td></tr></table></figure><p>引入设置一下 marked.setOptions，里边的属性比较多，我在这里详细的介绍一下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const renderer = new marked.Renderer();</span><br><span class="line"></span><br><span class="line">marked.setOptions(&#123;</span><br><span class="line">    renderer: renderer,</span><br><span class="line">    gfm: <span class="literal">true</span>,</span><br><span class="line">    pedantic: <span class="literal">false</span>,</span><br><span class="line">    sanitize: <span class="literal">false</span>,</span><br><span class="line">    tables: <span class="literal">true</span>,</span><br><span class="line">    breaks: <span class="literal">false</span>,</span><br><span class="line">    smartLists: <span class="literal">true</span>,</span><br><span class="line">    smartypants: <span class="literal">false</span>,</span><br><span class="line">    highlight: <span class="keyword">function</span> (code) &#123;</span><br><span class="line">            <span class="built_in">return</span> hljs.highlightAuto(code).value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">let</span> html = marked(props.article_content)</span><br></pre></td></tr></table></figure><ul><li><p>renderer: 这个是必须填写的，你可以通过自定义的 Renderer 渲染出自定义的格式</p></li><li><p>gfm：启动类似 Github 样式的 Markdown,填写 true 或者 false</p></li><li><p>pedatic：只解析符合 Markdown 定义的，不修正 Markdown 的错误。填写 true 或者 false</p></li><li><p>sanitize: 原始输出，忽略 HTML 标签，这个作为一个开发人员，一定要写 flase</p></li><li><p>tables： 支持 Github 形式的表格，必须打开 gfm 选项</p></li><li><p>breaks: 支持 Github 换行符，必须打开 gfm 选项，填写 true 或者 false</p></li><li><p>smartLists：优化列表输出，这个填写 ture 之后，你的样式会好看很多，所以建议设置成 ture</p></li><li><p>highlight: 高亮显示规则 ，这里我们将使用 highlight.js 来完成</p></li></ul><p>** 增加 Code 的高亮显示 **</p><p>在设置 setOptions 属性时，可以直接设置高亮显示，代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">highlight: <span class="keyword">function</span> (code) &#123;</span><br><span class="line">            <span class="built_in">return</span> hljs.highlightAuto(code).value;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>设置完成后，你在浏览器检查代码时就可以出现 hljs 的样式，说明你的效果加成功了，实现了高亮显示代码。</p><h1 id="1-markdown-目录导航——markdown-navbar"><a href="#1-markdown-目录导航——markdown-navbar" class="headerlink" title="1.markdown 目录导航——markdown-navbar"></a>1.markdown 目录导航——markdown-navbar</h1><p>markdown-navbar 组件是一款第三方提供的组件，因为这个是比较小众的需求，所以使用的人并不多。目前只有 18star,这个是国人开发的。</p><h2 id="markdown-navbar-的基本属性："><a href="#markdown-navbar-的基本属性：" class="headerlink" title="markdown-navbar 的基本属性："></a>markdown-navbar 的基本属性：</h2><ul><li>className： 可以为导航定义一个 class 名称，从而进行 style 样式的定义。</li><li>source：要解析的内容，也就是你的 Markdown 内容。</li><li>headingTopOffset:描点距离页面顶部的位置，默认值是 0.</li><li>ordered: 显示数字编码，默认是显示的，也就是 true，设置为 false 就不显示了。</li></ul><h2 id="markdown-navbar-的安装和使用"><a href="#markdown-navbar-的安装和使用" class="headerlink" title="markdown-navbar 的安装和使用"></a>markdown-navbar 的安装和使用</h2><p>用<code>npm install</code>进行安装，命令如下：</p><p><code>npm install --save markdown-navbar</code></p><p>用 yarn add 进行安装，命令如下：</p><p><code>yarn add markdown-navbar</code></p><p>安装完成后，直接在要使用的页面用 import 进行引入,需要注意的是你还需要引入 css。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import MarkNav from <span class="string">&#x27;markdown-navbar&#x27;</span>;</span><br><span class="line">import <span class="string">&#x27;markdown-navbar/dist/navbar.css&#x27;</span>;</span><br></pre></td></tr></table></figure><p>这样就引入成功了，现在就可以制作导航了，代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=<span class="string">&quot;detailed-nav comm-box&quot;</span>&gt;</span><br><span class="line">  &lt;div className=<span class="string">&quot;nav-title&quot;</span>&gt;文章目录&lt;/div&gt;</span><br><span class="line">  &lt;MarkNav</span><br><span class="line">    className=<span class="string">&quot;article-menu&quot;</span></span><br><span class="line">    <span class="built_in">source</span>=&#123;markdown&#125;</span><br><span class="line">    ordered=&#123;<span class="literal">false</span>&#125;</span><br><span class="line">  /&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>在浏览器中预览一下，可以看到效果了。但现在有一个需求，就是这个导航要一直在页面的右侧。我们经常叫这个需求为固钉。Ant Desgin 中提供了<strong>Affix</strong>.</p><p>先用 import 引入 Affix 组件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123;Row, Col ,Affix, Icon ,Breadcrumb  &#125; from <span class="string">&#x27;antd&#x27;</span></span><br></pre></td></tr></table></figure><p>引入后在需要固钉的外层加上 Affix 组件就可以了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;Affix offsetTop=&#123;5&#125;&gt;</span><br><span class="line">  &lt;div className=<span class="string">&quot;detailed-nav comm-box&quot;</span>&gt;</span><br><span class="line">    &lt;div className=<span class="string">&quot;nav-title&quot;</span>&gt;文章目录&lt;/div&gt;</span><br><span class="line">    &lt;MarkNav</span><br><span class="line">      className=<span class="string">&quot;article-menu&quot;</span></span><br><span class="line">      <span class="built_in">source</span>=&#123;markdown&#125;</span><br><span class="line"></span><br><span class="line">      ordered=&#123;<span class="literal">false</span>&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/Affix&gt;</span><br></pre></td></tr></table></figure><p>写完这段代码，到浏览器中预览一下，就可以实现固钉的效果了。</p><h1 id="2-markdown-目录导航——tocify-tsx-文件"><a href="#2-markdown-目录导航——tocify-tsx-文件" class="headerlink" title="2. markdown 目录导航——tocify.tsx 文件"></a>2. markdown 目录导航——tocify.tsx 文件</h1><p>你的程序中使用了 Ant DesignUI 库，因为它里边的导航部分，使用了 antd 的 Anchor 组件</p><p>安装 lodash 模块，这个可以直接使用 yarn add lodash 来安装</p><p>上面两个条件满足后，你可以把文件 tocify.tsx 拷贝到你的项目里了，我这里放到了/blog/components 文件夹下了，把它视为一种自定义组件。</p><h2 id="tocify-tsx-文件"><a href="#tocify-tsx-文件" class="headerlink" title="tocify.tsx 文件"></a>tocify.tsx 文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">import React from <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line">import &#123; Anchor &#125; from <span class="string">&#x27;antd&#x27;</span>;</span><br><span class="line">import &#123; last &#125; from <span class="string">&#x27;lodash&#x27;</span>;</span><br><span class="line"></span><br><span class="line">const &#123; Link &#125; = Anchor;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> interface TocItem &#123;</span><br><span class="line">  anchor: string;</span><br><span class="line">  level: number;</span><br><span class="line">  text: string;</span><br><span class="line">  children?: TocItem[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> <span class="built_in">type</span> TocItems = TocItem[]; // TOC目录树结构</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default class Tocify &#123;</span><br><span class="line">  tocItems: TocItems = [];</span><br><span class="line"></span><br><span class="line">  index: number = 0;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span></span>() &#123;</span><br><span class="line">    this.tocItems = [];</span><br><span class="line">    this.index = 0;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  add(text: string, level: number) &#123;</span><br><span class="line">    const anchor = `toc<span class="variable">$&#123;level&#125;</span><span class="variable">$&#123;++this.index&#125;</span>`;</span><br><span class="line">    const item = &#123; anchor, level, text &#125;;</span><br><span class="line">    const items = this.tocItems;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (items.length === 0) &#123; // 第一个 item 直接 push</span><br><span class="line">      items.push(item);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">let</span> lastItem = last(items) as TocItem; // 最后一个 item</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (item.level &gt; lastItem.level) &#123; // item 是 lastItem 的 children</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">let</span> i = lastItem.level + 1; i &lt;= 2; i++) &#123;</span><br><span class="line">          const &#123; children &#125; = lastItem;</span><br><span class="line">          <span class="keyword">if</span> (!children) &#123; // 如果 children 不存在</span><br><span class="line">            lastItem.children = [item];</span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          lastItem = last(children) as TocItem; // 重置 lastItem 为 children 的最后一个 item</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (item.level &lt;= lastItem.level) &#123; // item level 小于或等于 lastItem level 都视为与 children 同级</span><br><span class="line">            children.push(item);</span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123; // 置于最顶级</span><br><span class="line">        items.push(item);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> anchor;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  reset = () =&gt; &#123;</span><br><span class="line">    this.tocItems = [];</span><br><span class="line">    this.index = 0;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  renderToc(items: TocItem[]) &#123; // 递归 render</span><br><span class="line">    <span class="built_in">return</span> items.map(item =&gt; (</span><br><span class="line">      &lt;Link key=&#123;item.anchor&#125; href=&#123;`<span class="comment">#$&#123;item.anchor&#125;`&#125; title=&#123;item.text&#125;&gt;</span></span><br><span class="line">        &#123;item.children &amp;&amp; this.renderToc(item.children)&#125;</span><br><span class="line">      &lt;/Link&gt;</span><br><span class="line">    ));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> (</span><br><span class="line">      &lt;Anchor affix showInkInFixed&gt;</span><br><span class="line">         &#123;this.renderToc(this.tocItems)&#125;</span><br><span class="line">      &lt;/Anchor&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其实这个文件也很简单，如果 JavaScript 基础没问题是完全可以看明白的。</p><h2 id="使用-tocify-tsx-生成文章目录"><a href="#使用-tocify-tsx-生成文章目录" class="headerlink" title="使用 tocify.tsx 生成文章目录"></a>使用 tocify.tsx 生成文章目录</h2><p>接下来就可以利用 tocify.tsx 文件生成目录了，在/blog/pages/detailed.js 引入。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import Tocify from <span class="string">&#x27;../components/tocify.tsx&#x27;</span></span><br></pre></td></tr></table></figure><p>引入后，需要对 marked 的渲染进行自定义，这时候需要设置 renderer.heading，就是写一个方法们重新定义对#这种标签的解析。代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const tocify = new Tocify()</span><br><span class="line">renderer.heading = <span class="keyword">function</span>(text, level, raw) &#123;</span><br><span class="line">      const anchor = tocify.add(text, level);</span><br><span class="line">      <span class="built_in">return</span> `&lt;a id=<span class="string">&quot;<span class="variable">$&#123;anchor&#125;</span>&quot;</span> href=<span class="string">&quot;#<span class="variable">$&#123;anchor&#125;</span>&quot;</span> class=<span class="string">&quot;anchor-fix&quot;</span>&gt;&lt;h<span class="variable">$&#123;level&#125;</span>&gt;<span class="variable">$&#123;text&#125;</span>&lt;/h<span class="variable">$&#123;level&#125;</span>&gt;&lt;/a&gt;\n`;</span><br><span class="line">    &#125;;</span><br><span class="line">最后在需要显示文章导航的地方，写下面的代码:</span><br><span class="line"></span><br><span class="line">&lt;div className=<span class="string">&quot;toc-list&quot;</span>&gt;</span><br><span class="line">  &#123;tocify &amp;&amp; tocify.render()&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="egg-js-跨域问题"><a href="#egg-js-跨域问题" class="headerlink" title="egg.js 跨域问题"></a>egg.js 跨域问题</h1><p><strong>egg-cors</strong>模块是专门用来解决 egg.js 跨域问题的，只要简单的配置就可以完成跨域的设置，但是跨域一定要谨慎设置，很多安全问题，都是通过跨域进行攻击的。</p><p>安装我们使用<code>yarn add</code>进行安装，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add egg-cors</span><br></pre></td></tr></table></figure><h2 id="配置-config-plugin-js-文件"><a href="#配置-config-plugin-js-文件" class="headerlink" title="配置 config/plugin.js 文件"></a>配置 config/plugin.js 文件</h2><p>在安装完成后需要对/service/config/plugin.js 文件进行修改，加入 egg-cors 模块即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">exports.cors= &#123;</span><br><span class="line">    <span class="built_in">enable</span>: <span class="literal">true</span>,</span><br><span class="line">    package: <span class="string">&#x27;egg-cors&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置-config-default-js"><a href="#配置-config-default-js" class="headerlink" title="配置 config.default.js"></a>配置 config.default.js</h2><p>在配置完成 plugin.js 文件以后，还需要设置 config.default.js 文件。这个文件主要设置的是允许什么域名和请求方法可以进行跨域访问。配置代码如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">　　config.security = &#123;</span><br><span class="line">　　　　csrf: &#123;</span><br><span class="line">　　　　　　<span class="built_in">enable</span>: <span class="literal">false</span></span><br><span class="line">　　　　&#125;,</span><br><span class="line">　　　　domainWhiteList: [ <span class="string">&#x27;*&#x27;</span> ]</span><br><span class="line">　　&#125;;</span><br><span class="line"> config.cors = &#123;</span><br><span class="line">    origin: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">    allowMethods: <span class="string">&#x27;GET,HEAD,PUT,POST,DELETE,PATCH,OPTIONS&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果你只想让<code>http://localhost:3000</code> 来进行接口方案，就可以设置成下面的代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">config.security = &#123;</span><br><span class="line">　　　　csrf: &#123;<span class="built_in">enable</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">　　　　domainWhiteList: [ <span class="string">&#x27;*&#x27;</span> ]</span><br><span class="line">　　&#125;;</span><br><span class="line">config.cors = &#123;</span><br><span class="line">  origin: <span class="string">&#x27;http://localhost:3000&#x27;</span>, //只允许这个域进行访问接口</span><br><span class="line">  credentials: <span class="literal">true</span>,   // 开启认证</span><br><span class="line">  allowMethods: <span class="string">&#x27;GET,HEAD,PUT,POST,DELETE,PATCH,OPTIONS&#x27;</span></span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p>设置完成后，就可以在浏览器中进行预览了，如果能正常访问，说明跨域访问已经设置成功了。</p><h1 id="vscode-好用插件"><a href="#vscode-好用插件" class="headerlink" title="vscode 好用插件"></a>vscode 好用插件</h1><p><strong>px-to-vw</strong></p><p>在设置里面搜索 px-to-vw 可设置设计稿大小</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Px-to-viewport: Viewport-width</span><br><span class="line">The width of the viewport</span><br><span class="line"></span><br><span class="line">350</span><br></pre></td></tr></table></figure><p><strong>选中 css 语句按 `ALT+Z’即可转换为 vw</strong></p><p>此时</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font-size: 16px;  //ALT+Z</span><br></pre></td></tr></table></figure><p>变成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font-size: 4.444vw;</span><br></pre></td></tr></table></figure><h1 id="Vue-父调用子组件方法"><a href="#Vue-父调用子组件方法" class="headerlink" title="Vue 父调用子组件方法"></a>Vue 父调用子组件方法</h1><h2 id="1-使用ref"><a href="#1-使用ref" class="headerlink" title="1.使用ref"></a>1.使用ref</h2><p>//父组件<br><template><br>  <div class="home"><br>    <HelloWorld ref="mychild"></HelloWorld><br>    &lt;div @click=”clickParent”&gt;click me</div><br>  </div><br></template></p><script>  import HelloWorld from '@/components/HelloWorld.vue'  export default {    name: 'home',    components: {      HelloWorld    },    methods: {      clickParent() {        this.$refs.mychild.parentHandleclick("哈喽哈喽");      }    }  }</script><p>//子组件<br><template><br>  <div class="hello"><br>    <h1>我是子组件</h1><br>  </div><br></template></p><script>  export default {    name: 'HelloWorld',    created() {    },    methods: {      parentHandleclick(e) {        console.log(e)      }    }  }</script><h2 id="2-使用-emit"><a href="#2-使用-emit" class="headerlink" title="2.使用$emit"></a>2.使用$emit</h2><h3 id="子组件"><a href="#子组件" class="headerlink" title="子组件"></a>子组件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> &lt;div class=<span class="string">&quot;editBanner&quot;</span> @click=<span class="string">&quot;bannerClick&quot;</span>&gt;</span><br><span class="line">    &lt;span&gt;&#123;&#123;left&#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;span&gt;&lt;slot name=<span class="string">&#x27;right&#x27;</span>&gt;&lt;/slot&gt;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script &gt;</span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  props: [<span class="string">&#x27;left&#x27;</span>],</span><br><span class="line">  methods:&#123;</span><br><span class="line">      <span class="function"><span class="title">bannerClick</span></span>()&#123;</span><br><span class="line">          this.<span class="variable">$emit</span>(<span class="string">&#x27;bannerClick&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="父组件"><a href="#父组件" class="headerlink" title="父组件"></a>父组件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;editBanner left=<span class="string">&quot;出生日期&quot;</span> class=<span class="string">&quot;dateView&quot;</span> @bannerClick=<span class="string">&quot;changeDateShow&quot;</span>&gt;</span><br><span class="line">  &lt;a slot=<span class="string">&quot;right&quot;</span>&gt;&#123;&#123;date&#125;&#125;&lt;/a&gt;</span><br><span class="line">&lt;/editBanner&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;babel-plugin-import&quot;&gt;&lt;a href=&quot;#babel-plugin-import&quot; class=&quot;headerlink&quot; title=&quot;babel-plugin-import&quot;&gt;&lt;/a&gt;babel-plugin-import&lt;/h1&gt;&lt;p&gt;we</summary>
      
    
    
    
    <category term="笔记" scheme="https://hard-workingrookie.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="https://hard-workingrookie.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>react-redux入门级学习</title>
    <link href="https://hard-workingrookie.github.io/2020/08/27/react-redux%E5%85%A5%E9%97%A8%E7%BA%A7%E5%AD%A6%E4%B9%A0/"/>
    <id>https://hard-workingrookie.github.io/2020/08/27/react-redux%E5%85%A5%E9%97%A8%E7%BA%A7%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-08-27T07:04:29.000Z</published>
    <updated>2020-08-28T05:53:45.973Z</updated>
    
    <content type="html"><![CDATA[<p>源码地址</p><p><a href="https://github.com/Hard-workingrookie/react-redux-todolist">https://github.com/Hard-workingrookie/react-redux-todolist</a></p><h1 id="react-redux编写TodoList"><a href="#react-redux编写TodoList" class="headerlink" title="react-redux编写TodoList"></a>react-redux编写TodoList</h1><h2 id="React-Redux介绍和安装"><a href="#React-Redux介绍和安装" class="headerlink" title="React-Redux介绍和安装"></a>React-Redux介绍和安装</h2><p>React-Redux 是react生态中的常用组件，可以理解为全局数据状态管理工具（状态管理机），用来做组件通信等。</p><h3 id="react项目初始化"><a href="#react项目初始化" class="headerlink" title="react项目初始化"></a>react项目初始化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create-react-app demo02</span><br><span class="line"><span class="built_in">cd</span> demo02</span><br><span class="line">npm start</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn start</span><br></pre></td></tr></table></figure><p>安装完成后，删除一些没有必要的样式和代码，在/src目录下，只留一个index.js文件，其余的全部删除，这时候项目已经不能启动起来了，这很正常。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import React from <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line">import ReactDOM from <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line">ReactDOM.render(&lt;App /&gt;, document.getElementById(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们把APP删除了，所以会报错，不过没有关系，我们之后再来处理这个。</p><h3 id="react-redux"><a href="#react-redux" class="headerlink" title="react-redux"></a>react-redux</h3><p>项目初始化好后，直接使用npm在命令行安装React-redux，这个网络的不同安装时间也有所不同。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save react-redux</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-redux --save</span><br></pre></td></tr></table></figure><h2 id="修改代码，跑起来"><a href="#修改代码，跑起来" class="headerlink" title="修改代码，跑起来"></a>修改代码，跑起来</h2><p>建立一个TodoList.js的组件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line">class TodoList extends Component &#123;</span><br><span class="line">    <span class="function"><span class="title">render</span></span>() &#123; </span><br><span class="line">        <span class="built_in">return</span> ( &lt;div&gt;LitterWang&lt;/div&gt; );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">export</span> default TodoList;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将TodoList.js引入到index.js文件下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import React from <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line">import ReactDOM from <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line">import TodoList from <span class="string">&#x27;./TodoList&#x27;</span></span><br><span class="line">ReactDOM.render(&lt;TodoList /&gt;, document.getElementById(<span class="string">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure><p>这时候再在浏览器中预览，就会只输出一个LitterWang的字样。虽然很丑，但是项目已经跑起来了。接下来我们编写一下render函数中的JSX页面。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">render</span></span>() &#123; </span><br><span class="line">    <span class="built_in">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;div&gt;&lt;input /&gt;&lt;button&gt;提交&lt;/button&gt;&lt;/div&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li&gt;LitterWang&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候界面应该发生了一点变化,这样基本的项目我们就算初始化完成了，接下来我们按原来的Redux方式作一个store出来。</p><h2 id="Redux-的安装和使用（复习）"><a href="#Redux-的安装和使用（复习）" class="headerlink" title="Redux 的安装和使用（复习）"></a>Redux 的安装和使用（复习）</h2><p>先在终端中安装Redux包，因为是一个新项目，所以需要重新安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install --save redux</span><br><span class="line">或</span><br><span class="line">yarn add  redux --save</span><br></pre></td></tr></table></figure><p>创建一个store文件夹，在/store下创建一个index.js文件,并写入下面代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import &#123;createStore&#125; from <span class="string">&#x27;redux&#x27;</span></span><br><span class="line">import reducer from <span class="string">&#x27;./reducer&#x27;</span></span><br><span class="line"></span><br><span class="line">const store = createStore(reducer)</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default store</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建reducer.js文件，代码如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const defalutState = &#123;</span><br><span class="line">    inputValue : <span class="string">&#x27;LitterWang&#x27;</span>,</span><br><span class="line">    list :[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default (state = defalutState,action) =&gt;&#123;</span><br><span class="line">    <span class="built_in">return</span> state</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再TodoList.js中的构造函数constructor中使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import React, &#123; Component &#125; from <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line">//-----关键代码--------start</span><br><span class="line">import store from <span class="string">&#x27;./store&#x27;</span></span><br><span class="line">//-----关键代码--------end</span><br><span class="line">class TodoList extends Component &#123;</span><br><span class="line">    //-----关键代码--------start</span><br><span class="line">    constructor(props)&#123;</span><br><span class="line">        super(props)</span><br><span class="line">        this.state = store.getState()</span><br><span class="line">    &#125;</span><br><span class="line">    //-----关键代码--------end</span><br><span class="line">    <span class="function"><span class="title">render</span></span>() &#123; </span><br><span class="line">        <span class="built_in">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    //-----关键代码--------start</span><br><span class="line">                    &lt;input value=&#123;this.state.inputValue&#125; /&gt;</span><br><span class="line">                    //-----关键代码--------end</span><br><span class="line">                    &lt;button&gt;提交&lt;/button&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &lt;li&gt;JSPang&lt;/li&gt;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default TodoList;</span><br></pre></td></tr></table></figure><p>写完这段，到浏览器中保存看一下，应该就得到store中的值了，到目前为止，我们只是安装了React-Redux,但是还并没有进行使用，这节课只要是把基本的环境搭建好和复习一下以前的知识。下节课我们再逐步学习React-Redux的知识，小伙伴们先不要着急，先把开发环境搭建好吧。</p><h3 id="Provider和connect"><a href="#Provider和connect" class="headerlink" title="Provider和connect"></a>Provider和connect</h3><p>上节课已经完成了React-redux开发TodoList组件的基本环境。现在就可以开心的学习React-redux了，这节课主要学习一下Provider和connect这两个知识点。</p><h4 id="Provider-提供器"><a href="#Provider-提供器" class="headerlink" title="Provider 提供器"></a>Provider 提供器</h4><p><Provider>是一个提供器，只要使用了这个组件，组件里边的其它所有组件都可以使用store了，这也是React-redux的核心组件了。有了<Provider>就可以把/src/index.js改写成下面的代码样式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import React from <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line">import ReactDOM from <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line">import TodoList from <span class="string">&#x27;./TodoList&#x27;</span></span><br><span class="line">//---------关键代码--------start</span><br><span class="line">import &#123; Provider &#125; from <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line">import store from <span class="string">&#x27;./store&#x27;</span></span><br><span class="line">//声明一个App组件，然后这个组件用Provider进行包裹。</span><br><span class="line">const App = (</span><br><span class="line">    &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">        &lt;TodoList /&gt;</span><br><span class="line">    &lt;/Provider&gt;</span><br><span class="line">)</span><br><span class="line">//---------关键代码--------end</span><br><span class="line">ReactDOM.render(App, document.getElementById(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>完这个，我们再去浏览器中进行查看，发现代码也是可以完美运行的。需要注意的是，现在还是用传统方法获取的store中的数据。有了Provider再获取数据就没有那么麻烦了。</p><h4 id="connect-连接器"><a href="#connect-连接器" class="headerlink" title="connect 连接器"></a>connect 连接器</h4><p>现在如何简单的获取store中数据那？先打开TodoList.js文件，引入connect，它是一个连接器（其实它就是一个方法），有了这个连接器就可以很容易的获得数据了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123;connect&#125; from <span class="string">&#x27;react-redux&#x27;</span> </span><br></pre></td></tr></table></figure><p> 这时候暴露出去的就变成了connect了，代码如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default connect(xxx,null)(TodoList);</span><br></pre></td></tr></table></figure><p>这里的xxx代表一个映射关系，目前还没有制作这个映射关系。</p><h5 id="映射关系的制作"><a href="#映射关系的制作" class="headerlink" title="映射关系的制作"></a>映射关系的制作</h5><p>映射关系就是把原来的state映射成组件中的props属性，比如我们想映射inputValue就可以写成如下代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const stateToProps = (state)=&gt;&#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">        inputValue : state.inputValue</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候再把xxx改为stateToProps</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default connect(stateToProps,null)(TodoList)</span><br></pre></td></tr></table></figure><p>然后把input里的state标签，改为props,代码如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input value=&#123;this.props.inputValue&#125; /&gt;</span><br></pre></td></tr></table></figure><p>为了方便你学习，我这里给出所有的TodoList.js的所有代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line">import store from <span class="string">&#x27;./store&#x27;</span></span><br><span class="line">import &#123;connect&#125; from <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"></span><br><span class="line">class TodoList extends Component &#123;</span><br><span class="line">    constructor(props)&#123;</span><br><span class="line">        super(props)</span><br><span class="line">        this.state = store.getState()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span></span>() &#123; </span><br><span class="line">        <span class="built_in">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;input value=&#123;this.props.inputValue&#125; /&gt;</span><br><span class="line">                    &lt;button&gt;提交&lt;/button&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &lt;li&gt;JSPang&lt;/li&gt;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const stateToProps = (state)=&gt;&#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">        inputValue : state.inputValue</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default connect(stateToProps,null)(TodoList);</span><br></pre></td></tr></table></figure><p>写完之后再到浏览器中查看一下，发现我们映射的关系也是可以用的。这节课就是React-Redux插件的使用重点，你需要多写几遍，把这个流程记在心里。先到这里，下节课我们继续实现TodoList组件</p><h3 id="React-redux的数据修改"><a href="#React-redux的数据修改" class="headerlink" title="React-redux的数据修改"></a>React-redux的数据修改</h3><p>上节课已经可以用React-redux顺利的拿到Store中数据了。这节课学习如何改变Store中的数据。也就是当我们修改 input 中的值时，去改变store数据，UI界面也随之进行改变。</p><h4 id="编写-onChange-响应事件"><a href="#编写-onChange-响应事件" class="headerlink" title="编写 onChange 响应事件"></a>编写 onChange 响应事件</h4><p>打开TodoList.js文件，然后在 button 上注册onChange事件,这里我就偷懒直接绑定this了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input value=&#123;this.props.inputValue&#125; onChange=&#123;this.inputChange.bind(this)&#125; /&gt;</span><br></pre></td></tr></table></figure><p>有了事件需要编写对应的方法,这里先写一个最简单的inputChange方法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">inputChange(e)&#123;</span><br><span class="line">    console.log(e.target.value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后到浏览器中的控制台就不再有报错，而且输入时可以打印出值，这书名我们的绑定成功了。这步完成我们要改为react-redux的了。</p><h4 id="编写DispatchToProps"><a href="#编写DispatchToProps" class="headerlink" title="编写DispatchToProps"></a>编写DispatchToProps</h4><p>要使用react-redux，我们可以编写另一个映射DispatchToProps,先看下面这段代码，你会发现有两个参数，第二个参数我们用的是null。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default connect(stateToProps,null)(TodoList);</span><br><span class="line">DispatchToProps就是要传递的第二个参数，通过这个参数才能改变store中的值。</span><br><span class="line"></span><br><span class="line">const dispatchToProps = (dispatch) =&gt;&#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">        inputChange(e)&#123;</span><br><span class="line">            console.log(e.target.value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了这个参数之后可以把响应事件改成下面的代码.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input value=&#123;this.props.inputValue&#125; onChange=&#123;this.props.inputChange&#125; /&gt;</span><br></pre></td></tr></table></figure><p>然后把connect第二个参数传递过去。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default connect(stateToProps,dispatchToProps)(TodoList);</span><br></pre></td></tr></table></figure><p>这时候原来的inputChange方法就没用了，可以删除掉。 目前整体的代码就改为下面的样子了，我们在浏览器中预览也是可以看到效果的。此步骤成功说明映射关系支持成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line">import store from <span class="string">&#x27;./store&#x27;</span></span><br><span class="line">import &#123;connect&#125; from <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"></span><br><span class="line">class TodoList extends Component &#123;</span><br><span class="line">    constructor(props)&#123;</span><br><span class="line">        super(props)</span><br><span class="line">        this.state = store.getState()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span></span>() &#123; </span><br><span class="line">        <span class="built_in">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;input value=&#123;this.props.inputValue&#125; onChange=&#123;this.props.inputChange&#125; /&gt;</span><br><span class="line">                    &lt;button&gt;提交&lt;/button&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &lt;li&gt;JSPang&lt;/li&gt;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">const stateToProps = (state)=&gt;&#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">        inputValue : state.inputValue</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const dispatchToProps = (dispatch) =&gt;&#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">        inputChange(e)&#123;</span><br><span class="line">            console.log(e.target.value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default connect(stateToProps,dispatchToProps)(TodoList);</span><br></pre></td></tr></table></figure><h3 id="派发action到store中"><a href="#派发action到store中" class="headerlink" title="派发action到store中"></a>派发action到store中</h3><p>映射关系已经做好了，接下来只要进行action的派发和reducer对业务逻辑的编写就可以了。派发action和以前的流程一样，我就直接给出代码了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const dispatchToProps = (dispatch) =&gt;&#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">        inputChange(e)&#123;</span><br><span class="line">            <span class="built_in">let</span> action = &#123;</span><br><span class="line">                <span class="built_in">type</span>:<span class="string">&#x27;change_input&#x27;</span>,</span><br><span class="line">                value:e.target.value</span><br><span class="line">            &#125;</span><br><span class="line">            dispatch(action)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>派发后就需求在reducer里边，编写对应的业务逻辑了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const defalutState = &#123;</span><br><span class="line">    inputValue : <span class="string">&#x27;jspang&#x27;</span>,</span><br><span class="line">    list :[]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">export</span> default (state = defalutState,action) =&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(action.type === <span class="string">&#x27;change_input&#x27;</span>)&#123;</span><br><span class="line">        <span class="built_in">let</span> newState = JSON.parse(JSON.stringify(state))</span><br><span class="line">        newState.inputValue = action.value</span><br><span class="line">        <span class="built_in">return</span> newState</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> state</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就算整个修改过程完成了，到浏览器中查看一下，应该就实现了改变input框的效果。这个流程你刚开始学会觉的很绕，但是你作的多了，你就会发现它很简单，就是一个模式，而且会降低程序出错的机率。建议这个流程你至少要写5遍以上，据我所知，几乎所有公司用react都会用到react-redux，所以这个流程重要性不次于Redux的流程，一定要熟练掌握。</p><h3 id="进阶-React-redux增加List数据"><a href="#进阶-React-redux增加List数据" class="headerlink" title="进阶 React-redux增加List数据"></a>进阶 React-redux增加List数据</h3><p>点击提交按钮时，可以在列表中进行增加。给 button 按钮增加点击事件 ,直接在/src/TodoList.js里的Button增加一个onClick事件，代码如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123;this.props.clickButton&#125;&gt;提交&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>注意这里依然使用的props，也就是说还需要把方法写在dispatchToProps里。我们这里先写一个测试，看看是否绑定上了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const dispatchToProps = (dispatch) =&gt;&#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">        inputChange(e)&#123;</span><br><span class="line">            <span class="built_in">let</span> action = &#123;</span><br><span class="line">                <span class="built_in">type</span>:<span class="string">&#x27;change_input&#x27;</span>,</span><br><span class="line">                value:e.target.value</span><br><span class="line">            &#125;</span><br><span class="line">            dispatch(action)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">clickButton</span></span>()&#123;</span><br><span class="line">            console.log(<span class="string">&#x27;111111111&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>写完clickButton方法后，在浏览器中预览，打开浏览器的控制台看一下结果，应该在点击时，可以看到显示111111111。 这步完成，就是用dispatch派发action了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">clickButton</span></span>()&#123;</span><br><span class="line">    <span class="built_in">let</span> action = &#123; <span class="built_in">type</span>:<span class="string">&#x27;add_item&#x27;</span> &#125;</span><br><span class="line">    dispatch(action)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写Reducer的业务逻辑,派发完成后,到Reducer编写业务逻辑，这一步和一起的操作基本一样。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">const defalutState = &#123;</span><br><span class="line">    inputValue : <span class="string">&#x27;jspang&#x27;</span>,</span><br><span class="line">    list :[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default (state = defalutState,action) =&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(action.type === <span class="string">&#x27;change_input&#x27;</span>)&#123;</span><br><span class="line">        <span class="built_in">let</span> newState = JSON.parse(JSON.stringify(state))</span><br><span class="line">        newState.inputValue = action.value</span><br><span class="line">        <span class="built_in">return</span> newState</span><br><span class="line">    &#125;</span><br><span class="line">    //----关键代码------start---------</span><br><span class="line">    <span class="keyword">if</span>(action.type === <span class="string">&#x27;add_item&#x27;</span>)&#123;</span><br><span class="line">        <span class="built_in">let</span> newState = JSON.parse(JSON.stringify(state))</span><br><span class="line">        newState.list.push(newState.inputValue)</span><br><span class="line">        newState.inputValue = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">return</span> newState</span><br><span class="line">    &#125;</span><br><span class="line">    //----关键代码------end---------</span><br><span class="line">    <span class="built_in">return</span> state</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="页面UI部分的制作"><a href="#页面UI部分的制作" class="headerlink" title="页面UI部分的制作"></a>页面UI部分的制作</h3><p>这步完成后，我们到TodoList.js中进行JSX部分的编写，编写前需要先把stateToProps的映射关系做好。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const stateToProps = (state)=&gt;&#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">        inputValue : state.inputValue,</span><br><span class="line">        list:state.list</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>有了映射关系，就可以再界面中用属性的方式，进行显示，代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        this.props.list.map((item,index)=&gt;&#123;</span><br><span class="line">            <span class="built_in">return</span> (&lt;li key=&#123;index&#125;&gt;&#123;item&#125;&lt;/li&gt;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样就实现了增加TodoList的列表项，这里给出TodoList.js的代码.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line">import store from <span class="string">&#x27;./store&#x27;</span></span><br><span class="line">import &#123;connect&#125; from <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"></span><br><span class="line">class TodoList extends Component &#123;</span><br><span class="line">    constructor(props)&#123;</span><br><span class="line">        super(props)</span><br><span class="line">        this.state = store.getState()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span></span>() &#123; </span><br><span class="line">        <span class="built_in">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;input value=&#123;this.props.inputValue&#125; onChange=&#123;this.props.inputChange&#125; /&gt;</span><br><span class="line">                    &lt;button onClick=&#123;this.props.clickButton&#125;&gt;提交&lt;/button&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        this.props.list.map((item,index)=&gt;&#123;</span><br><span class="line">                            <span class="built_in">return</span> (&lt;li key=&#123;index&#125;&gt;&#123;item&#125;&lt;/li&gt;)</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">const stateToProps = (state)=&gt;&#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">        inputValue : state.inputValue,</span><br><span class="line">        list:state.list</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const dispatchToProps = (dispatch) =&gt;&#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">        inputChange(e)&#123;</span><br><span class="line">            <span class="built_in">let</span> action = &#123;</span><br><span class="line">                <span class="built_in">type</span>:<span class="string">&#x27;change_input&#x27;</span>,</span><br><span class="line">                value:e.target.value</span><br><span class="line">            &#125;</span><br><span class="line">            dispatch(action)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">clickButton</span></span>()&#123;</span><br><span class="line">            <span class="built_in">let</span> action = &#123;</span><br><span class="line">                <span class="built_in">type</span>:<span class="string">&#x27;add_item&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">            dispatch(action)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">export</span> default connect(stateToProps,dispatchToProps)(TodoList);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>还有一个删除功能我就不浪费大家时间继续制作了，如果你自己有兴趣可以试着作一下。</p><h2 id="加餐-React-redux程序优化-完结"><a href="#加餐-React-redux程序优化-完结" class="headerlink" title="加餐-React-redux程序优化(完结)"></a>加餐-React-redux程序优化(完结)</h2><p>这节课把现在写的代码优化一下，作程序的都应该有一些代码洁癖，才能写出让人称赞的程序。写完业务逻辑后作代码优化，也是程序员的本质工作之一。 现在代码中有好几处this.props都是重复的，这时候就可以用javascript的解构赋值方法，来精简代码。修改TodoList.js中的Render函数，把原来带代码修改为下面的代码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">render</span></span>() &#123; </span><br><span class="line">    <span class="built_in">let</span> &#123;inputValue ,inputChange,clickButton,list&#125; = this.props;</span><br><span class="line">    <span class="built_in">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;input value=&#123;inputValue&#125; onChange=&#123;inputChange&#125; /&gt;</span><br><span class="line">                &lt;button onClick=&#123;clickButton&#125;&gt;提交&lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    list.map((item,index)=&gt;&#123;</span><br><span class="line">                        <span class="built_in">return</span> (&lt;li key=&#123;index&#125;&gt;&#123;item&#125;&lt;/li&gt;)</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="把TodoList改为UI组件-提高性能"><a href="#把TodoList改为UI组件-提高性能" class="headerlink" title="把TodoList改为UI组件-提高性能"></a>把TodoList改为UI组件-提高性能</h3><p>可以看到，现在的TodoList组件里没有任何的业务逻辑，只有一个Render方法，这时候就可以把它改为UI组件(无状态组件)，UI组件就是一个方法，减少很多冗余操作，从而提高程序运行性能。这时候重新声明一个TodoList的变量，然后把render函数里的东西复制过来，只要稍加修改，就可以得到下面的代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const TodoList =(props)=&gt;&#123;</span><br><span class="line">    <span class="built_in">let</span> &#123;inputValue ,inputChange,clickButton,list&#125; = props; // 粘贴过来后，此处要进行修改</span><br><span class="line">    <span class="built_in">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;input value=&#123;inputValue&#125; onChange=&#123;inputChange&#125; /&gt;</span><br><span class="line">                &lt;button onClick=&#123;clickButton&#125;&gt;提交&lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    list.map((item,index)=&gt;&#123;</span><br><span class="line">                        <span class="built_in">return</span> (&lt;li key=&#123;index&#125;&gt;&#123;item&#125;&lt;/li&gt;)</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码写完后，我们删除一些不用的引入，然后就可以到浏览器中进行预览了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import React from <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line">import &#123;connect&#125; from <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>目前TodoList.js的所有代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">import React from <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line">import &#123;connect&#125; from <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const TodoList =(props)=&gt;&#123;</span><br><span class="line">    <span class="built_in">let</span> &#123;inputValue ,inputChange,clickButton,list&#125; = props; // 粘贴过来后，此处要进行修改</span><br><span class="line">    <span class="built_in">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;input value=&#123;inputValue&#125; onChange=&#123;inputChange&#125; /&gt;</span><br><span class="line">                &lt;button onClick=&#123;clickButton&#125;&gt;提交&lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    list.map((item,index)=&gt;&#123;</span><br><span class="line">                        <span class="built_in">return</span> (&lt;li key=&#123;index&#125;&gt;&#123;item&#125;&lt;/li&gt;)</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const stateToProps = (state)=&gt;&#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">        inputValue : state.inputValue,</span><br><span class="line">        list:state.list</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const dispatchToProps = (dispatch) =&gt;&#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">        inputChange(e)&#123;</span><br><span class="line">            <span class="built_in">let</span> action = &#123;</span><br><span class="line">                <span class="built_in">type</span>:<span class="string">&#x27;change_input&#x27;</span>,</span><br><span class="line">                value:e.target.value</span><br><span class="line">            &#125;</span><br><span class="line">            dispatch(action)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">clickButton</span></span>()&#123;</span><br><span class="line">            <span class="built_in">let</span> action = &#123;</span><br><span class="line">                <span class="built_in">type</span>:<span class="string">&#x27;add_item&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">            dispatch(action)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">export</span> default connect(stateToProps,dispatchToProps)(TodoList);</span><br></pre></td></tr></table></figure><p>那我们反过来，再来理解一下最后一句话代码的意思。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default connect(stateToProps,dispatchToProps)(TodoList);</span><br></pre></td></tr></table></figure><p>connect的作用是把UI组件（无状态组件）和业务逻辑代码的分开，然后通过connect再链接到一起，让代码更加清晰和易于维护。这也是React-Redux最大的有点。Redux的教程和视频到这里就结束了，下套课程我会讲解React-router，请小伙伴们持续关注博客.</p><h1 id="redux和react-redux关系图"><a href="#redux和react-redux关系图" class="headerlink" title="redux和react-redux关系图"></a>redux和react-redux关系图</h1><img src= "/img/loading.gif" data-lazy-src='https://img-blog.csdn.net/20181016202907510?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNzY3NjMx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70'  ><p>图片转载于<a href="https://blog.csdn.net/qq_42767631/article/details/83096841">https://blog.csdn.net/qq_42767631/article/details/83096841</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;源码地址&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Hard-workingrookie/react-redux-todolist&quot;&gt;https://github.com/Hard-workingrookie/react-redux-todoli</summary>
      
    
    
    
    <category term="react学习" scheme="https://hard-workingrookie.github.io/categories/react%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="react" scheme="https://hard-workingrookie.github.io/tags/react/"/>
    
    <category term="react-redux" scheme="https://hard-workingrookie.github.io/tags/react-redux/"/>
    
  </entry>
  
  <entry>
    <title>使用React Hooks构建电影搜索应用程序</title>
    <link href="https://hard-workingrookie.github.io/2020/08/26/react-hook%E5%AD%A6%E4%B9%A0/"/>
    <id>https://hard-workingrookie.github.io/2020/08/26/react-hook%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-08-26T09:30:28.000Z</published>
    <updated>2020-08-28T05:53:48.320Z</updated>
    
    <content type="html"><![CDATA[<h2 id="最终完成效果"><a href="#最终完成效果" class="headerlink" title="最终完成效果"></a>最终完成效果</h2><img src= "/img/loading.gif" data-lazy-src="https://cdn-media-1.freecodecamp.org/images/kbYsxsxb2D7mBhdlEmUrpMhRmOcQoR79vtT1" width="50%"><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create-react-app hooked</span><br></pre></td></tr></table></figure><p>  hooked是APP名字</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g create-react-app</span><br></pre></td></tr></table></figure><p> 如果没有安装create-react-app，请输入这段</p><p> 完成后，我们应该有一个名为“ Hooked”的文件夹，其目录结构如下所示：<br><img src= "/img/loading.gif" data-lazy-src="https://cdn-media-1.freecodecamp.org/images/XVEd05SM1ul1KYZ-HWoY3-06cFeeyZS1HemM" width="50%"></p><p> 在此应用程序中，我们将有4个组件，因此让我们概述每个组件及其功能：</p><ul><li><p>App.js —它将是其他3的父组件。它还将包含处理API请求的函数，并且具有在组件的初始呈现期间调用API的函数。</p></li><li><p>Header.js —一个简单的组件，可呈现应用程序标题并接受标题道具</p></li><li><p>Movie.js —渲染每部电影。电影对象只是作为道具传递给它的。</p></li><li><p>Search.js —包含带有输入元素和搜索按钮的表单，包含处理输入元素并重置字段的函数，还包含调用作为道具传递给它的搜索函数的函数。</p><p>让我们开始在src目录中创建一个新文件夹并将其命名，components因为这是我们所有组件所在的位置。然后，我们将App.js文件移动到该文件夹​​中。然后，我们将创建Header组件。创建一个名为的文件，Header.js并向其中添加以下代码：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import React from <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line">const Header = (props) =&gt; &#123;</span><br><span class="line">  <span class="built_in">return</span> (</span><br><span class="line">    &lt;header className=<span class="string">&quot;App-header&quot;</span>&gt;</span><br><span class="line">      &lt;h2&gt;&#123;props.text&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default Header;</span><br></pre></td></tr></table></figure><p> 这个组件不需要太多解释-它基本上是一个功能组件，header使用text道具呈现标签。让我们不要忘记更新index.js文件中的导入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import React from <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line">import ReactDOM from <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line">import <span class="string">&#x27;./index.css&#x27;</span>;</span><br><span class="line">import App from <span class="string">&#x27;./components/App&#x27;</span>; // this changed</span><br><span class="line">import * as serviceWorker from <span class="string">&#x27;./serviceWorker&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;App /&gt;, document.getElementById(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line"></span><br><span class="line">// If you want your app to work offline and load faster, you can change</span><br><span class="line">// unregister() to register() below. Note this comes with some pitfalls.</span><br><span class="line">// Learn more about service workers: http://bit.ly/CRA-PWA</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">serviceWorker.unregister();</span><br></pre></td></tr></table></figure><h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><p> 并App.css使用以下样式（不是必填）更新我们的样式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">.App &#123;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.App-header &#123;</span><br><span class="line">  background-color: <span class="comment">#282c34;</span></span><br><span class="line">  height: 70px;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: column;</span><br><span class="line">  align-items: center;</span><br><span class="line">  justify-content: center;</span><br><span class="line">  font-size: calc(10px + 2vmin);</span><br><span class="line">  color: white;</span><br><span class="line">  padding: 20px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.spinner &#123;</span><br><span class="line">  height: 80px;</span><br><span class="line">  margin: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.App-intro &#123;</span><br><span class="line">  font-size: large;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* new css <span class="keyword">for</span> movie component */</span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.movies &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-wrap: wrap;</span><br><span class="line">  flex-direction: row;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.App-header h2 &#123;</span><br><span class="line">  margin: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.add-movies &#123;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.add-movies button &#123;</span><br><span class="line">  font-size: 16px;</span><br><span class="line">  padding: 8px;</span><br><span class="line">  margin: 0 10px 30px 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.movie &#123;</span><br><span class="line">  padding: 5px 25px 10px 25px;</span><br><span class="line">  max-width: 25%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.errorMessage &#123;</span><br><span class="line">  margin: auto;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">  color: rgb(161, 15, 15);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.search &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: row;</span><br><span class="line">  flex-wrap: wrap;</span><br><span class="line">  justify-content: center;</span><br><span class="line">  margin-top: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">input[<span class="built_in">type</span>=<span class="string">&quot;submit&quot;</span>] &#123;</span><br><span class="line">  padding: 5px;</span><br><span class="line">  background-color: transparent;</span><br><span class="line">  color: black;</span><br><span class="line">  border: 1px solid black;</span><br><span class="line">  width: 80px;</span><br><span class="line">  margin-left: 5px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">input[<span class="built_in">type</span>=<span class="string">&quot;submit&quot;</span>]:hover &#123;</span><br><span class="line">  background-color: <span class="comment">#282c34;</span></span><br><span class="line">  color: antiquewhite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.search &gt; input[<span class="built_in">type</span>=<span class="string">&quot;text&quot;</span>]&#123;</span><br><span class="line">  width: 40%;</span><br><span class="line">  min-width: 170px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@media screen and (min-width: 694px) and (max-width: 915px) &#123;</span><br><span class="line">  .movie &#123;</span><br><span class="line">    max-width: 33%;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@media screen and (min-width: 652px) and (max-width: 693px) &#123;</span><br><span class="line">  .movie &#123;</span><br><span class="line">    max-width: 50%;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@media screen and (max-width: 651px) &#123;</span><br><span class="line">  .movie &#123;</span><br><span class="line">    max-width: 100%;</span><br><span class="line">    margin: auto;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 一旦有了这些，下一步就是创建Movie组件。我们将通过创建一个名为的文件Movie.js并添加以下代码来做到这一点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import React from <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line">const DEFAULT_PLACEHOLDER_IMAGE =</span><br><span class="line">  <span class="string">&quot;https://m.media-amazon.com/images/M/MV5BMTczNTI2ODUwOF5BMl5BanBnXkFtZTcwMTU0NTIzMw@@._V1_SX300.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const Movie = (&#123; movie &#125;) =&gt; &#123;</span><br><span class="line">  const poster =</span><br><span class="line">    movie.Poster === <span class="string">&quot;N/A&quot;</span> ? DEFAULT_PLACEHOLDER_IMAGE : movie.Poster;</span><br><span class="line">  <span class="built_in">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">&quot;movie&quot;</span>&gt;</span><br><span class="line">      &lt;h2&gt;&#123;movie.Title&#125;&lt;/h2&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;img</span><br><span class="line">          width=<span class="string">&quot;200&quot;</span></span><br><span class="line">          alt=&#123;`The movie titled: <span class="variable">$&#123;movie.Title&#125;</span>`&#125;</span><br><span class="line">          src=&#123;poster&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;p&gt;(&#123;movie.Year&#125;)&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default Movie;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 这需要更多的解释，但它只是呈现电影标题，图像和年份的表示性组件（没有任何内部状态）。这样做的原因DEFAULT_PLACEHOLDER_IMAGE是因为从API检索的某些电影没有图像，因此我们将呈现一个占位符图像而不是断开的链接。</p><p> 现在，我们将创建Search组件。这部分令人兴奋，因为在过去，为了处理内部状态，我们将不得不创建一个类组件……但现在不再了！因为使用钩子，我们可以使功能组件处理其自身的内部状态。让我们创建一个名为的Search.js文件，然后在该文件中添加以下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useState &#125; from <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const Search = (props) =&gt; &#123;</span><br><span class="line">  const [searchValue, setSearchValue] = useState(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  const handleSearchInputChanges = (e) =&gt; &#123;</span><br><span class="line">    setSearchValue(e.target.value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  const resetInputField = () =&gt; &#123;</span><br><span class="line">    setSearchValue(<span class="string">&quot;&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  const callSearchFunction = (e) =&gt; &#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    props.search(searchValue);</span><br><span class="line">    resetInputField();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">return</span> (</span><br><span class="line">      &lt;form className=<span class="string">&quot;search&quot;</span>&gt;</span><br><span class="line">        &lt;input</span><br><span class="line">          value=&#123;searchValue&#125;</span><br><span class="line">          onChange=&#123;handleSearchInputChanges&#125;</span><br><span class="line">          <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span></span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;input onClick=&#123;callSearchFunction&#125; <span class="built_in">type</span>=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;SEARCH&quot;</span> /&gt;</span><br><span class="line">      &lt;/form&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default Search;</span><br></pre></td></tr></table></figure><p> 这太令人兴奋了！！！我确定您已经看到了我们将要使用的第一个hooks API，它被称为useState。顾名思义，它使我们可以将React状态添加到功能组件中。所述useState钩接受一个参数，它是在初始状态，然后它返回一个包含当前的状态（相当于一个数组this.state为类组件）和一个函数进行更新（相当于this.setState）。</p><p> 在本例中，我们将当前状态作为搜索输入字段的值。调用onChange事件时，将handleSearchInputChanges调用该函数，该函数将使用新值调用状态更新函数。该resetInputField函数基本上setSearchValue用空字符串调用状态更新函数（），以清除输入字段。查看此内容以了解有关useStateAPI的更多信息。</p><h2 id="App-js"><a href="#App-js" class="headerlink" title="App.js"></a>App.js</h2><p> 最后，我们将App.js使用以下代码更新文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useState, useEffect &#125; from <span class="string">&quot;react&quot;</span>;</span><br><span class="line">import <span class="string">&quot;../App.css&quot;</span>;</span><br><span class="line">import Header from <span class="string">&quot;./Header&quot;</span>;</span><br><span class="line">import Movie from <span class="string">&quot;./Movie&quot;</span>;</span><br><span class="line">import Search from <span class="string">&quot;./Search&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const MOVIE_API_URL = <span class="string">&quot;https://www.omdbapi.com/?s=man&amp;apikey=4a3b711b&quot;</span>; // you should replace this with yours</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const App = () =&gt; &#123;</span><br><span class="line">  const [loading, setLoading] = useState(<span class="literal">true</span>);</span><br><span class="line">  const [movies, setMovies] = useState([]);</span><br><span class="line">  const [errorMessage, setErrorMessage] = useState(null);</span><br><span class="line"></span><br><span class="line">    useEffect(() =&gt; &#123;</span><br><span class="line">    fetch(MOVIE_API_URL)</span><br><span class="line">      .<span class="keyword">then</span>(response =&gt; response.json())</span><br><span class="line">      .<span class="keyword">then</span>(jsonResponse =&gt; &#123;</span><br><span class="line">        setMovies(jsonResponse.Search);</span><br><span class="line">        setLoading(<span class="literal">false</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">    const search = searchValue =&gt; &#123;</span><br><span class="line">    setLoading(<span class="literal">true</span>);</span><br><span class="line">    setErrorMessage(null);</span><br><span class="line"></span><br><span class="line">    fetch(`https://www.omdbapi.com/?s=<span class="variable">$&#123;searchValue&#125;</span>&amp;apikey=4a3b711b`)</span><br><span class="line">      .<span class="keyword">then</span>(response =&gt; response.json())</span><br><span class="line">      .<span class="keyword">then</span>(jsonResponse =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (jsonResponse.Response === <span class="string">&quot;True&quot;</span>) &#123;</span><br><span class="line">          setMovies(jsonResponse.Search);</span><br><span class="line">          setLoading(<span class="literal">false</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          setErrorMessage(jsonResponse.Error);</span><br><span class="line">          setLoading(<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">return</span> (</span><br><span class="line">     &lt;div className=<span class="string">&quot;App&quot;</span>&gt;</span><br><span class="line">      &lt;Header text=<span class="string">&quot;HOOKED&quot;</span> /&gt;</span><br><span class="line">      &lt;Search search=&#123;search&#125; /&gt;</span><br><span class="line">      &lt;p className=<span class="string">&quot;App-intro&quot;</span>&gt;Sharing a few of our favourite movies&lt;/p&gt;</span><br><span class="line">      &lt;div className=<span class="string">&quot;movies&quot;</span>&gt;</span><br><span class="line">        &#123;loading &amp;&amp; !errorMessage ? (</span><br><span class="line">         &lt;span&gt;loading...&lt;/span&gt;</span><br><span class="line">         ) : errorMessage ? (</span><br><span class="line">          &lt;div className=<span class="string">&quot;errorMessage&quot;</span>&gt;&#123;errorMessage&#125;&lt;/div&gt;</span><br><span class="line">        ) : (</span><br><span class="line">          movies.map((movie, index) =&gt; (</span><br><span class="line">            &lt;Movie key=&#123;`<span class="variable">$&#123;index&#125;</span>-<span class="variable">$&#123;movie.Title&#125;</span>`&#125; movie=&#123;movie&#125; /&gt;</span><br><span class="line">          ))</span><br><span class="line">        )&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default App;</span><br></pre></td></tr></table></figure><p> 让我们看一下代码：我们正在使用3个useState函数，所以是的，我们可以useState在一个组件中拥有多个函数。第一个用于处理加载状态（将loading设置为true时，它将呈现“ loading…”文本）。第二个用于处理从服务器获取的电影数组。最后，第三个用于处理发出API请求时可能发生的任何错误。</p><p> 在那之后，我们遇到了我们在应用程序中使用的第二个钩子API：useEffect钩子。该钩子基本上使您可以在功能组件中执行副作用。所谓副作用，是指诸如数据获取，订阅和手动DOM操作之类的事情。关于这个钩子的最好的部分是来自React官方文档的引言：</p><p> 如果你熟悉阵营类生命周期方法，你能想到的useEffect钩。因为componentDidMount，componentDidUpdate和componentWillUnmount结合。<br> 这是因为useEffect在第一个渲染（componentDidMount）之后以及每次更新（componentDidUpdate）之后都会被调用。</p><p> 我知道您可能想知道这与componentDidMount每次更新后都调用它有何相似之处。好吧，这是因为该useEffect函数接受两个参数，一个是您要运行的函数，另一个是数组。在该数组中，我们只是传入一个值，该值告诉React如果传入的值未更改，则跳过应用效果。</p><p> 根据文档，这类似于我们在条件中添加条件语句时的情况componentDidUpdate：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// <span class="keyword">for</span> class components</span><br><span class="line">componentDidUpdate(prevProps, prevState) &#123;</span><br><span class="line">  <span class="keyword">if</span> (prevState.count !== this.state.count) &#123;</span><br><span class="line">    document.title = `You clicked <span class="variable">$&#123;this.state.count&#125;</span> <span class="built_in">times</span>`;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// using hooks it will become</span><br><span class="line">useEffect(() =&gt; &#123;</span><br><span class="line">  document.title = `You clicked <span class="variable">$&#123;count&#125;</span> <span class="built_in">times</span>`;</span><br><span class="line">&#125;, [count]); // Only re-run the effect <span class="keyword">if</span> count changes</span><br></pre></td></tr></table></figure><p> 在我们的例子中，我们没有任何变化的值，因此我们可以传入一个空数组，该数组告诉React这个效果应该被调用一次。</p><p> 如您所见，我们有3个useState功能有些相关，应该可以将它们以某种方式进行组合。值得庆幸的是，React团队为我们提供了服务，因为他们制作了一个有助于此操作的钩子-将该钩子称为useReducer。让我们将App组件转换为使用新的钩子，这样我们App.js现在将如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useReducer, useEffect &#125; from <span class="string">&quot;react&quot;</span>;</span><br><span class="line">import <span class="string">&quot;../App.css&quot;</span>;</span><br><span class="line">import Header from <span class="string">&quot;./Header&quot;</span>;</span><br><span class="line">import Movie from <span class="string">&quot;./Movie&quot;</span>;</span><br><span class="line">import Search from <span class="string">&quot;./Search&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const MOVIE_API_URL = <span class="string">&quot;https://www.omdbapi.com/?s=man&amp;apikey=4a3b711b&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const initialState = &#123;</span><br><span class="line">  loading: <span class="literal">true</span>,</span><br><span class="line">  movies: [],</span><br><span class="line">  errorMessage: null</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const reducer = (state, action) =&gt; &#123;</span><br><span class="line">  switch (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;SEARCH_MOVIES_REQUEST&quot;</span>:</span><br><span class="line">      <span class="built_in">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        loading: <span class="literal">true</span>,</span><br><span class="line">        errorMessage: null</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;SEARCH_MOVIES_SUCCESS&quot;</span>:</span><br><span class="line">      <span class="built_in">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        loading: <span class="literal">false</span>,</span><br><span class="line">        movies: action.payload</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;SEARCH_MOVIES_FAILURE&quot;</span>:</span><br><span class="line">      <span class="built_in">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        loading: <span class="literal">false</span>,</span><br><span class="line">        errorMessage: action.error</span><br><span class="line">      &#125;;</span><br><span class="line">    default:</span><br><span class="line">      <span class="built_in">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const App = () =&gt; &#123;</span><br><span class="line">  const [state, dispatch] = useReducer(reducer, initialState);</span><br><span class="line"></span><br><span class="line">    useEffect(() =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">        fetch(MOVIE_API_URL)</span><br><span class="line">            .<span class="keyword">then</span>(response =&gt; response.json())</span><br><span class="line">            .<span class="keyword">then</span>(jsonResponse =&gt; &#123;</span><br><span class="line">        </span><br><span class="line">            dispatch(&#123;</span><br><span class="line">                <span class="built_in">type</span>: <span class="string">&quot;SEARCH_MOVIES_SUCCESS&quot;</span>,</span><br><span class="line">                payload: jsonResponse.Search</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">    const search = searchValue =&gt; &#123;</span><br><span class="line">    dispatch(&#123;</span><br><span class="line">      <span class="built_in">type</span>: <span class="string">&quot;SEARCH_MOVIES_REQUEST&quot;</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">        fetch(`https://www.omdbapi.com/?s=<span class="variable">$&#123;searchValue&#125;</span>&amp;apikey=4a3b711b`)</span><br><span class="line">      .<span class="keyword">then</span>(response =&gt; response.json())</span><br><span class="line">      .<span class="keyword">then</span>(jsonResponse =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (jsonResponse.Response === <span class="string">&quot;True&quot;</span>) &#123;</span><br><span class="line">          dispatch(&#123;</span><br><span class="line">                <span class="built_in">type</span>: <span class="string">&quot;SEARCH_MOVIES_SUCCESS&quot;</span>,</span><br><span class="line">                payload: jsonResponse.Search</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          dispatch(&#123;</span><br><span class="line">                <span class="built_in">type</span>: <span class="string">&quot;SEARCH_MOVIES_FAILURE&quot;</span>,</span><br><span class="line">                error: jsonResponse.Error</span><br><span class="line">          &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">    const &#123; movies, errorMessage, loading &#125; = state;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">&quot;App&quot;</span>&gt;</span><br><span class="line">      &lt;Header text=<span class="string">&quot;HOOKED&quot;</span> /&gt;</span><br><span class="line">      &lt;Search search=&#123;search&#125; /&gt;</span><br><span class="line">      &lt;p className=<span class="string">&quot;App-intro&quot;</span>&gt;Sharing a few of our favourite movies&lt;/p&gt;</span><br><span class="line">      &lt;div className=<span class="string">&quot;movies&quot;</span>&gt;</span><br><span class="line">        &#123;loading &amp;&amp; !errorMessage ? (</span><br><span class="line">          &lt;span&gt;loading... &lt;/span&gt;</span><br><span class="line">        ) : errorMessage ? (</span><br><span class="line">          &lt;div className=<span class="string">&quot;errorMessage&quot;</span>&gt;&#123;errorMessage&#125;&lt;/div&gt;</span><br><span class="line">        ) : (</span><br><span class="line">          movies.map((movie, index) =&gt; (</span><br><span class="line">            &lt;Movie key=&#123;`<span class="variable">$&#123;index&#125;</span>-<span class="variable">$&#123;movie.Title&#125;</span>`&#125; movie=&#123;movie&#125; /&gt;</span><br><span class="line">          ))</span><br><span class="line">        )&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default App;</span><br></pre></td></tr></table></figure><p> 因此，如果一切顺利，那么我们应该不会看到应用程序行为的任何变化。现在让我们看一下useReducer挂钩的工作原理。</p><p> 该挂钩具有3个参数，但在我们的用例中，我们将仅使用2个。典型的useReducer挂钩如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const [state, dispatch] = useReducer(</span><br><span class="line">    reducer,</span><br><span class="line">    initialState</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p> 该reducer参数类似于我们在Redux中使用的参数，如下所示：<br>Redux中使用的参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">const reducer = (state, action) =&gt; &#123;</span><br><span class="line">  switch (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;SEARCH_MOVIES_REQUEST&quot;</span>:</span><br><span class="line">      <span class="built_in">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        loading: <span class="literal">true</span>,</span><br><span class="line">        errorMessage: null</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;SEARCH_MOVIES_SUCCESS&quot;</span>:</span><br><span class="line">      <span class="built_in">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        loading: <span class="literal">false</span>,</span><br><span class="line">        movies: action.payload</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;SEARCH_MOVIES_FAILURE&quot;</span>:</span><br><span class="line">      <span class="built_in">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        loading: <span class="literal">false</span>,</span><br><span class="line">        errorMessage: action.error</span><br><span class="line">      &#125;;</span><br><span class="line">    default:</span><br><span class="line">      <span class="built_in">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 精简器接受initialState和操作，因此精简器根据操作类型返回一个新的状态对象。例如，如果调度的操作类型为SEARCH_MOVIES_REQUEST，则状态将使用新对象更新，其中for的loading值为true，并且errorMessage为null。</p><p> 要注意的另一件事是，在我们的中useEffect，我们现在正在调度一个带有有效负载的操作，作为从服务器获取的电影数组。此外，在我们的search职能中，我们实际上是在分派三个不同的动作。</p><p> 一种动作是SEARCH_MOVIES_REQUEST更新我们的状态对象make 的动作loading=true and errorMessage = null。<br> 如果请求成功，那么我们将分派另一个操作，该操作的类型SEARCH_MOVIES_SUCCESS 将更新状态对象，从而loading=false and movies = action.payload使有效负载是从OMDB获取的电影数组。<br> 如果有错误，我们反而会派遣与类型不同的操作SEARCH_MOVIES_FAILURE，更新我们的状态对象制作loading=false and errorMessage = action.error，其中action.error从服务器得到该错误消息。<br> 要了解有关useReducer钩子的更多信息，请查看官方文档。</p><p>这是本文的GitHub存储库的链接。</p><p><a href="https://github.com/Hard-workingrookie/hooks-movie-app">github</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;最终完成效果&quot;&gt;&lt;a href=&quot;#最终完成效果&quot; class=&quot;headerlink&quot; title=&quot;最终完成效果&quot;&gt;&lt;/a&gt;最终完成效果&lt;/h2&gt;&lt;img src= &quot;/img/loading.gif&quot; data-lazy-src=&quot;https://cdn-m</summary>
      
    
    
    
    <category term="react学习" scheme="https://hard-workingrookie.github.io/categories/react%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="react" scheme="https://hard-workingrookie.github.io/tags/react/"/>
    
    <category term="React-Hook" scheme="https://hard-workingrookie.github.io/tags/React-Hook/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://hard-workingrookie.github.io/2020/08/26/hello-world/"/>
    <id>https://hard-workingrookie.github.io/2020/08/26/hello-world/</id>
    <published>2020-08-26T07:52:28.766Z</published>
    <updated>2020-08-26T09:35:15.782Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="默认分类" scheme="https://hard-workingrookie.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
    <category term="test" scheme="https://hard-workingrookie.github.io/tags/test/"/>
    
  </entry>
  
</feed>
